Index: src/main/java/javacode/chessprogram/graphicsandui/Art.java
===================================================================
--- src/main/java/javacode/chessprogram/graphicsandui/Art.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/javacode/chessprogram/graphicsandui/Art.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
@@ -1,93 +0,0 @@
-package javacode.chessprogram.graphicsandui;
-
-import javacode.chessprogram.chess.BitManipulations;
-import javacode.chessprogram.chess.Chessboard;
-
-public class Art {
-
-    private static String pieceByNumberASCII(int s){
-        if (s == 1) return ("P");
-        if (s == 2) return ("N");
-        if (s == 3) return ("B");
-        if (s == 4) return ("R");
-        if (s == 5) return ("Q");
-        if (s == 6) return ("K");
-
-        if (s == 7) return ("p");
-        if (s == 8) return ("n");
-        if (s == 9) return ("b");
-        if (s == 10) return ("r");
-        if (s == 11) return ("q");
-        if (s == 12) return ("k");
-        else return (".");
-    }
-
-    public static String boardArt (Chessboard board) {
-        StringBuilder s = new StringBuilder();
-        s.append("   a b c d e f g h\n");
-        s.append("  +---------------+\n");
-        for (int y = 7; y >= 0; y--) {
-            s.append(y + 1).append(" |");
-            for (int x = 7; x >= 0; x--) {
-                s.append(pieceByNumberASCII(pieceOnSquare(board, x + y * 8)));
-                if (x>0) s.append(" ");
-            }
-            s.append("| ").append(y + 1);
-            s.append("\n");
-        }
-        s.append("  +---------------+\n");
-        s.append("   a b c d e f g h\n");
-
-        return s.toString();
-    }
-
-
-    public static String makeMoveToString (int l){
-        String binaryString = Integer.toBinaryString(l);
-        int numberOfPaddingZeros = 16 - binaryString.length();
-        StringBuilder sb = new StringBuilder();
-        while (sb.length() < numberOfPaddingZeros){
-            sb.append("0");
-        }
-
-        String temp = sb.toString() + "" + binaryString;
-        return temp.substring(0, 6) +"\n" +
-                temp.substring(6, 12) + "\n" +
-                temp.substring(12, 16);
-    }
-
-    public static void printLong(long l){
-        for (int y = 0; y < 8; y++) {
-            for (int i = 0; i < 8; i++) {
-                StringBuilder s = new StringBuilder(Long.toBinaryString(l));
-                while (s.length() < 64) {
-                    s.insert(0, "0");
-                }
-                System.out.print(s.charAt(y * 8 + i));
-            }
-            System.out.println();
-        }
-        System.out.println("---");
-    }
-
-    private static int pieceOnSquare(Chessboard board, int s){
-        long square = BitManipulations.newPieceOnSquare(s);
-
-        if ((square & board.WHITE_PAWNS) != 0) return 1;
-        if ((square & board.WHITE_KNIGHTS) != 0) return 2;
-        if ((square & board.WHITE_BISHOPS) != 0) return 3;
-        if ((square & board.WHITE_ROOKS) != 0) return 4;
-        if ((square & board.WHITE_QUEEN) != 0) return 5;
-        if ((square & board.WHITE_KING) != 0) return 6;
-
-        if ((square & board.BLACK_PAWNS) != 0) return 7;
-        if ((square & board.BLACK_KNIGHTS) != 0) return 8;
-        if ((square & board.BLACK_BISHOPS) != 0)  return 9;
-        if ((square & board.BLACK_ROOKS) != 0) return 10;
-        if ((square & board.BLACK_QUEEN) != 0) return 11;
-        if ((square & board.BLACK_KING) != 0) return 12;
-
-        else return 0;
-    }
-
-}
Index: src/main/java/javacode/chessprogram/bitboards/BitBoards.java
===================================================================
--- src/main/java/javacode/chessprogram/bitboards/BitBoards.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/javacode/chessprogram/bitboards/BitBoards.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
@@ -1,89 +0,0 @@
-package javacode.chessprogram.bitboards;
-
-public class BitBoards {
-
-    private static final long UNIVERSE = 0xffffffffffffffffL;
-
-    public static final long WHITE_PAWNS = 0x000000000000FF00L;
-    public static final long WHITE_KNIGHTS = 0x0000000000000042L;
-    public static final long WHITE_BISHOPS = 0x0000000000000024L;
-    public static final long WHITE_ROOKS = 0x0000000000000081L;
-    public static final long WHITE_QUEEN = 0x0000000000000010L;
-    public static final long WHITE_KING = 0x0000000000000008L;
-
-    public static final long BLACK_PAWNS = 0x00FF000000000000L;
-    public static final long BLACK_KNIGHTS = 0x4200000000000000L;
-    public static final long BLACK_BISHOPS = 0x2400000000000000L;
-    public static final long BLACK_ROOKS = 0x8100000000000000L;
-    public static final long BLACK_QUEEN = 0x1000000000000000L;
-    public static final long BLACK_KING = 0x0800000000000000L;
-
-    public static final long WHITE_SQUARES = 0x5555555555555555L;
-    public static final long BLACK_SQUARES = 0xAAAAAAAAAAAAAAAAL;
-
-    static long CASTLE_WHITE_KING_SQUARES = 0x0000000000000006L;
-    static long CASTLE_WHITE_QUEEN_SQUARES = 0x0000000000000070L;
-    static long CASTLE_BLACK_KING_SQUARES = 0x0600000000000000L;
-    static long CASTLE_BLACK_QUEEN_SQUARES = 0x7000000000000000L;
-
-    public static final long RANK_ONE = 0x00000000000000FFL;
-    public static final long RANK_TWO = 0x000000000000FF00L;
-    public static final long RANK_THREE = 0x0000000000FF0000L;
-    public static final long RANK_FOUR = 0x00000000FF000000L;
-    public static final long RANK_FIVE = 0x000000FF00000000L;
-    public static final long RANK_SIX = 0x0000FF0000000000L;
-    public static final long RANK_SEVEN = 0x00FF000000000000L;
-    public static final long RANK_EIGHT = 0xFF00000000000000L;
-
-    public static final long FILE_H = 0x0101010101010101L;
-    public static final long FILE_G = 0x0202020202020202L;
-    public static final long FILE_F = 0x0404040404040404L;
-    public static final long FILE_E = 0x0808080808080808L;
-    public static final long FILE_D = 0x1010101010101010L;
-    public static final long FILE_C = 0x2020202020202020L;
-    public static final long FILE_B = 0x4040404040404040L;
-    public static final long FILE_A = 0x8080808080808080L;
-
-    public static final long[] FILES = new long[]{
-            0x0101010101010101L,
-            0x0202020202020202L,
-            0x0404040404040404L,
-            0x0808080808080808L,
-            0x1010101010101010L,
-            0x2020202020202020L,
-            0x4040404040404040L,
-            0x8080808080808080L,
-    };
-
-    public static final long NORTH_WEST = FILE_A | RANK_EIGHT;
-    public static final long NORTH_EAST = FILE_H | RANK_EIGHT;
-    public static final long SOUTH_WEST = FILE_A | RANK_ONE;
-    public static final long SOUTH_EAST = FILE_H | RANK_ONE;
-
-    public static final long NORTH_WEST_CORNER = FILE_A & RANK_EIGHT;
-    public static final long NORTH_EAST_CORNER = FILE_H & RANK_EIGHT;
-    public static final long SOUTH_WEST_CORNER = FILE_A & RANK_ONE;
-    public static final long SOUTH_EAST_CORNER = FILE_H & RANK_ONE;
-
-    public static final long centreFourSquares = (RANK_FOUR | RANK_FIVE) & (FILE_D | FILE_E);
-    public static final long centreNineSquares = (RANK_THREE | RANK_FOUR | RANK_FIVE | RANK_SIX) &
-            (FILE_C |FILE_D | FILE_E | FILE_F);
-
-    public static final long noMansLand = (RANK_THREE | RANK_FOUR | RANK_FIVE | RANK_SIX);
-    public static final long eastWestHighway = (RANK_FOUR | RANK_FIVE);
-    public static final long northSouthHighway = (FILE_D | FILE_E);
-
-    public static final long DIAGONAL_NW_SE = 0x8040201008040201L;
-    public static final long DIAGONAL_SW_NE = 0x0102040810204080L;
-
-    public static final long boardWithoutEdges = UNIVERSE ^ (NORTH_WEST | NORTH_EAST | SOUTH_WEST | SOUTH_EAST);
-
-    public static final long whiteCastleKingEmpties = 0x0000000000000006L;
-    public static final long whiteCastleQueenEmpties = 0x0000000000000070L;
-
-    public static final long blackCastleKingEmpties = 0x0600000000000000L;
-    public static final long blackCastleQueenEmpties = 0x7000000000000000L;
-
-    public static final long whiteCastleQueenUnthreateneds = 0x0000000000000030L;
-    public static final long blackCastleQueenUnthreateneds = 0x3000000000000000L;
-}
Index: src/main/java/javacode/chessprogram/chess/BitExtractor.java
===================================================================
--- src/main/java/javacode/chessprogram/chess/BitExtractor.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/javacode/chessprogram/chess/BitExtractor.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
@@ -1,23 +0,0 @@
-package javacode.chessprogram.chess;
-
-import java.util.ArrayList;
-import java.util.List;
-
-public class BitExtractor {
-
-    public static List<Long> getAllPieces(long pieces, long ignoreThesePieces) {
-        List<Long> indexes = new ArrayList<>();
-        long temp = pieces & (~ignoreThesePieces);
-        while (temp != 0) {
-            long firstPiece = getFirstPiece(temp);
-            indexes.add(firstPiece);
-            temp ^= firstPiece;
-        }
-        return indexes;
-    }
-
-    private static long getFirstPiece(long l) {
-        return Long.highestOneBit(l);
-    }
-
-}
Index: src/main/java/javacode/chessprogram/chess/BitIndexing.java
===================================================================
--- src/main/java/javacode/chessprogram/chess/BitIndexing.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/javacode/chessprogram/chess/BitIndexing.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
@@ -1,28 +0,0 @@
-package javacode.chessprogram.chess;
-
-import java.util.ArrayList;
-import java.util.List;
-
-
-public class BitIndexing {
-
-    public static final long UNIVERSE = 0xffffffffffffffffL;
-
-    public static int getIndexOfFirstPiece (long pieces) {
-        return Long.numberOfTrailingZeros(pieces);
-    }
-
-    public static List<Integer> getIndexOfAllPieces(long pieces){
-        List<Integer> indexes = new ArrayList<>();
-        while (pieces != 0){
-            indexes.add(Long.numberOfLeadingZeros(pieces));
-            pieces &= pieces - 1;
-        }
-        return indexes;
-    }
-
-    public static int populationCount (long pieces) {
-        return Long.bitCount(pieces);
-    }
-
-}
Index: src/main/java/javacode/chessprogram/chess/BitManipulations.java
===================================================================
--- src/main/java/javacode/chessprogram/chess/BitManipulations.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/javacode/chessprogram/chess/BitManipulations.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
@@ -1,71 +0,0 @@
-package javacode.chessprogram.chess;
-
-import static javacode.chessprogram.bitboards.BitBoards.boardWithoutEdges;
-
-public class BitManipulations {
-
-    public static long newPieceOnSquare (int x){
-        return 0x0000000000000001L << x;
-    }
-
-    public static long squareCentredOnIndexNaive(int x){
-        long piece = newPieceOnSquare(x);
-        return squareCentredOnPieceNaive(piece);
-    }
-
-    private static long squareCentredOnPieceNaive(long piece){
-        long answer = 0;
-
-        answer += piece
-                + (piece << 9)
-                + (piece << 8)
-                + (piece << 7)
-
-                + (piece << 1)
-                + (piece >>> 1)
-
-                + (piece >>> 7)
-                + (piece >>> 8)
-                + (piece >>> 9)
-        ;
-        return answer;
-    }
-
-
-    private static long squareCentredOnIndexSmart(int x){
-        long piece = newPieceOnSquare(x);
-        return squareCentredOnPieceSmart(piece);
-    }
-
-
-    private static long squareCentredOnPieceSmart(long piece){
-        long answer = 0;
-
-        if ((boardWithoutEdges & piece) != 0){
-            return squareCentredOnPieceNaive(piece);
-        }
-        else {
-            throw new RuntimeException("unfinished");
-        }
-
-//        if ((RANK_EIGHT & piece) != 0) {
-//            return ((piece << 1)
-//                    + (piece >>> 1)
-//
-//                    + (piece >>> 7)
-//                    + (piece >>> 8)
-//                    + (piece >>> 9));
-//        }
-//        if ((RANK_ONE & piece) != 0) {
-//            return ((piece << 1)
-//                    + (piece >>> 1)
-//                    + (piece << 9)
-//                    + (piece << 8)
-//                    + (piece << 7));
-//                    
-//        }
-
-                
-    }
-    
-}
Index: src/main/java/javacode/chessprogram/miscAdmin/BlankBoard.java
===================================================================
--- src/main/java/javacode/chessprogram/miscAdmin/BlankBoard.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/javacode/chessprogram/miscAdmin/BlankBoard.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
@@ -1,37 +0,0 @@
-package javacode.chessprogram.miscAdmin;
-
-import javacode.chessprogram.chess.Chessboard;
-import javacode.chessprogram.moveMaking.StackMoveData;
-
-import java.util.Stack;
-
-class BlankBoard {
-    
-    static Chessboard blankBoard(){
-        Chessboard board = new Chessboard();
-
-        board.WHITE_PAWNS = 0;
-        board.WHITE_KNIGHTS = 0;
-        board.WHITE_BISHOPS = 0;
-        board.WHITE_ROOKS = 0;
-        board.WHITE_QUEEN = 0;
-        board.WHITE_KING = 0;
-
-        board.BLACK_PAWNS = 0;
-        board.BLACK_KNIGHTS = 0;
-        board.BLACK_BISHOPS = 0;
-        board.BLACK_ROOKS = 0;
-        board.BLACK_QUEEN = 0;
-        board.BLACK_KING = 0;
-        
-        return board;
-    }
-
-    static void printMoveStack(Chessboard board){
-        int size = board.moveStack.size();
-        Stack<StackMoveData> copyStack = (Stack<StackMoveData>) board.moveStack.clone();
-        for (int m = 0; m < size; m++){
-            System.out.println(copyStack.pop());
-        }
-    }
-}
Index: src/main/java/javacode/chessprogram/check/CheckChecker.java
===================================================================
--- src/main/java/javacode/chessprogram/check/CheckChecker.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/javacode/chessprogram/check/CheckChecker.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
@@ -1,122 +0,0 @@
-package javacode.chessprogram.check;
-
-import javacode.chessengine.transpositiontable.ZobristHash;
-import javacode.chessprogram.chess.Chessboard;
-import javacode.chessprogram.moveGeneration.PieceMoveKing;
-import javacode.chessprogram.moveGeneration.PieceMoveKnight;
-import javacode.chessprogram.moveGeneration.PieceMovePawns;
-import javacode.chessprogram.moveGeneration.PieceMoveSliding;
-
-import java.util.Stack;
-
-import static javacode.chessprogram.chess.BitIndexing.populationCount;
-
-public class CheckChecker {
-
-    public static boolean boardInCheck(Chessboard board, boolean white){
-        long myKing = (white) ? board.WHITE_KING : board.BLACK_KING;
-        int numberOfCheckers = numberOfPiecesThatLegalThreatenSquare(board, white, myKing);
-        return numberOfCheckers > 0;
-    }
-
-    public static int numberOfPiecesThatLegalThreatenSquare(Chessboard board, boolean myColour, long square){
-        long pawns, knights, bishops, rooks, queens, king;
-        if (!myColour){
-            pawns = board.WHITE_PAWNS;
-            knights = board.WHITE_KNIGHTS;
-            bishops = board.WHITE_BISHOPS;
-            rooks = board.WHITE_ROOKS;
-            queens = board.WHITE_QUEEN;
-            king = board.WHITE_KING;
-        }
-        else {
-            pawns = board.BLACK_PAWNS;
-            knights = board.BLACK_KNIGHTS;
-            bishops = board.BLACK_BISHOPS;
-            rooks = board.BLACK_ROOKS;
-            queens = board.BLACK_QUEEN;
-            king = board.BLACK_KING;
-        }
-
-        int numberOfThreats = 0;
-
-        if (pawns != 0) {
-            numberOfThreats += populationCount(PieceMovePawns.singlePawnCaptures(board, square, myColour, pawns));
-        }
-        if (numberOfThreats > 1){
-            return numberOfThreats;
-        }
-        if (knights != 0) {
-            numberOfThreats += populationCount(PieceMoveKnight.singleKnightTable(board, square, myColour, knights));
-        }
-        if (numberOfThreats > 1){
-            return numberOfThreats;
-        }
-        if (bishops != 0) {
-            numberOfThreats += populationCount(PieceMoveSliding.singleBishopCaptures(board, square, myColour, bishops));
-        }
-        if (numberOfThreats > 1){
-            return numberOfThreats;
-        }
-        if (rooks != 0) {
-            numberOfThreats += populationCount(PieceMoveSliding.singleRookCaptures(board, square, myColour, rooks));
-        }
-        if (numberOfThreats > 1){
-            return numberOfThreats;
-        }
-        if (queens != 0) {
-            numberOfThreats += populationCount(PieceMoveSliding.singleQueenCaptures(board, square, myColour, queens));
-        }
-        if (numberOfThreats > 1){
-            return numberOfThreats;
-        }
-        if (king != 0) {
-            numberOfThreats += populationCount(PieceMoveKing.singleKingCaptures(board, square, myColour, king));
-        }
-
-        return numberOfThreats;
-    }
-
-    public static boolean isDrawByRepetition(Chessboard board, ZobristHash zobristHash){
-        Stack<Long> zobristStack = (Stack<Long>) zobristHash.getZobristStack().clone();
-        long zobristHashToMatch = zobristHash.getBoardHash();
-        int howManyMovesToSearchToMax = 50;
-        int limit = Math.min(howManyMovesToSearchToMax, zobristStack.size());
-        
-        int counter = 0;
-        for (int previousBoardHashIndex = limit - 1; previousBoardHashIndex >= 0; previousBoardHashIndex--){
-            Long pop = zobristStack.pop();
-            if (pop == zobristHashToMatch){
-                counter++;
-            }
-            if (counter > 0){
-                return true;
-            }
-        }
-        return counter > 0;
-    }
-
-    public static boolean isDrawByInsufficientMaterial(Chessboard board){
-        boolean drawByMaterial = false;
-        int totalPieces = populationCount(board.ALL_PIECES());
-
-        switch (totalPieces){
-            case 2:
-                drawByMaterial = true;
-                break;
-            case 3:
-                if (populationCount(board.BLACK_BISHOPS)
-                        + populationCount(board.WHITE_BISHOPS)
-                        + populationCount(board.BLACK_KNIGHTS)
-                        +populationCount(board.WHITE_KNIGHTS) != 0) {
-                    
-                    drawByMaterial = true;
-                }
-                break;
-            case 4:
-                break;
-        }
-
-        return drawByMaterial;
-    }
-}
Index: src/main/java/tests/programtests/CheckCheckerTest.java
===================================================================
--- src/main/java/tests/programtests/CheckCheckerTest.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/tests/programtests/CheckCheckerTest.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
@@ -1,56 +0,0 @@
-package tests.programtests;
-
-import javacode.chessprogram.bitboards.RandomBoard;
-import javacode.chessprogram.check.CheckChecker;
-import javacode.chessprogram.chess.Chessboard;
-import org.junit.Assert;
-import org.junit.jupiter.api.BeforeAll;
-import org.junit.jupiter.api.Test;
-
-class CheckCheckerTest {
-
-    static int num = 11;
-    private static Chessboard[] bs;
-
-    @BeforeAll
-    static void setUp() {
-        bs = RandomBoard.boardForTests();
-    }
-
-    @Test
-    void boardInCheck() {
-        Assert.assertFalse(CheckChecker.boardInCheck(bs[0], true));
-        Assert.assertFalse(CheckChecker.boardInCheck(bs[0], false));
-
-        Assert.assertTrue(CheckChecker.boardInCheck(bs[1], true));
-        Assert.assertTrue(CheckChecker.boardInCheck(bs[1], false));
-
-        Assert.assertTrue(CheckChecker.boardInCheck(bs[2], true));
-        Assert.assertFalse(CheckChecker.boardInCheck(bs[2], false));
-
-        Assert.assertFalse(CheckChecker.boardInCheck(bs[3], true));
-        Assert.assertFalse(CheckChecker.boardInCheck(bs[3], false));
-
-        Assert.assertTrue(CheckChecker.boardInCheck(bs[4], true));
-        Assert.assertTrue(CheckChecker.boardInCheck(bs[4], false));
-
-        Assert.assertTrue(CheckChecker.boardInCheck(bs[5], true));
-        Assert.assertTrue(CheckChecker.boardInCheck(bs[5], false));
-
-        Assert.assertTrue(CheckChecker.boardInCheck(bs[6], true));
-        Assert.assertTrue(CheckChecker.boardInCheck(bs[6], false));
-
-        Assert.assertFalse(CheckChecker.boardInCheck(bs[7], true));
-        Assert.assertFalse(CheckChecker.boardInCheck(bs[7], false));
-
-        Assert.assertFalse(CheckChecker.boardInCheck(bs[8], true));
-        Assert.assertTrue(CheckChecker.boardInCheck(bs[8], false));
-
-        Assert.assertTrue(CheckChecker.boardInCheck(bs[9], true));
-        Assert.assertTrue(CheckChecker.boardInCheck(bs[9], false));
-
-        Assert.assertTrue(CheckChecker.boardInCheck(bs[10], true));
-        Assert.assertTrue(CheckChecker.boardInCheck(bs[10], false));
-    }
-
-}
\ No newline at end of file
Index: src/main/java/javacode/chessprogram/check/CheckMoveOrganiser.java
===================================================================
--- src/main/java/javacode/chessprogram/check/CheckMoveOrganiser.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/javacode/chessprogram/check/CheckMoveOrganiser.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
@@ -1,355 +0,0 @@
-package javacode.chessprogram.check;
-
-import javacode.chessprogram.bitboards.BitBoards;
-import javacode.chessprogram.chess.Chessboard;
-import javacode.chessprogram.chess.Move;
-import javacode.chessprogram.moveGeneration.*;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import static javacode.chessprogram.bitboards.BitBoards.*;
-import static javacode.chessprogram.chess.BitIndexing.UNIVERSE;
-import static javacode.chessprogram.chess.BitIndexing.getIndexOfFirstPiece;
-
-public class CheckMoveOrganiser {
-
-    public static List<Move> evadeCheckMovesMaster(Chessboard board, boolean white){
-        long myKing = (white) ? board.WHITE_KING : board.BLACK_KING;
-        long ignoreThesePieces = PinnedManager.whichPiecesArePinned(board, white, myKing);
-        // if a piece in pinned to the king, it can never be used to block / capture a different checker
-        return allLegalCheckEscapeMoves(board, white, ignoreThesePieces);
-    }
-
-
-    private static List<Move> allLegalCheckEscapeMoves(Chessboard board, boolean white, long ignoreThesePieces) {
-        List<Move> moves = new ArrayList<>();
-        long myKing = (white) ? board.WHITE_KING : board.BLACK_KING;
-        long blockingSquaresMask, checkingPieceMask;
-        long jumper = inCheckByAJumper(board, white);
-        if (jumper != 0){
-            blockingSquaresMask = 0;
-            checkingPieceMask = jumper;
-        }
-        else {
-            long slider = inCheckByASlider(board, white);
-            blockingSquaresMask = extractRayFromTwoPieces(board, myKing, slider) & (~slider);
-            checkingPieceMask = slider;
-        }
-        long PENULTIMATE_RANK = white ? BitBoards.RANK_SEVEN : BitBoards.RANK_TWO;
-        long myPawns = white ? board.WHITE_PAWNS : board.BLACK_PAWNS;
-        long promotablePawns = myPawns & PENULTIMATE_RANK;
-        long piecesToIgnoreAndPromotingPawns = ignoreThesePieces | promotablePawns;
-        
-        moves.addAll(MoveGeneratorPseudo.generateAllMovesWithoutKing
-                (board, white, piecesToIgnoreAndPromotingPawns, blockingSquaresMask, checkingPieceMask));
-
-        moves.addAll(KingLegalMoves.kingLegalMovesOnly(board, white));
-        
-        moves.addAll(MoveGeneratorPromotion.generatePromotionMoves(board, white, ignoreThesePieces, blockingSquaresMask, checkingPieceMask));
-
-        moves.addAll(MoveGeneratorEnPassant.generateEnPassantMoves(board, white, piecesToIgnoreAndPromotingPawns, blockingSquaresMask, checkingPieceMask));
-
-        return moves;
-    }
-
-    private static long extractRayFromTwoPieces(Chessboard board, long pieceOne, long pieceTwo){
-        if (pieceOne == pieceTwo) return 0;
-        long ALL_PIECES_TO_AVOID = board.ALL_WHITE_PIECES() | board.ALL_BLACK_PIECES();
-
-        ALL_PIECES_TO_AVOID ^= pieceTwo;
-        ALL_PIECES_TO_AVOID ^= pieceOne;
-        
-        // necessary as java offers signed ints, which get confused if talking about square 63
-        int indexOfPieceOne = getIndexOfFirstPiece(pieceOne);
-        int indexOfPieceTwo = getIndexOfFirstPiece(pieceTwo);
-        long bigPiece = (indexOfPieceOne > indexOfPieceTwo) ? pieceOne : pieceTwo;
-        long smallPiece = (indexOfPieceOne > indexOfPieceTwo) ? pieceTwo : pieceOne;
-        long possibleAnswer = 0;
-        
-        while (true) {
-            if ((smallPiece & BitBoards.FILE_A) != 0) {
-                break;
-            }
-            smallPiece <<= 1;
-            if ((smallPiece & ALL_PIECES_TO_AVOID) != 0) {
-                break;
-            }
-            if ((smallPiece & bigPiece) != 0) {
-                return possibleAnswer;
-            }
-            possibleAnswer |= smallPiece;
-        }
-
-        bigPiece = (indexOfPieceOne > indexOfPieceTwo) ? pieceOne : pieceTwo;
-        smallPiece = (indexOfPieceOne > indexOfPieceTwo) ? pieceTwo : pieceOne;
-        possibleAnswer = 0;
-        
-        while (true) {
-            if ((smallPiece & NORTH_WEST) != 0) {
-                break;
-            }
-            smallPiece <<= 9;
-            if ((smallPiece & ALL_PIECES_TO_AVOID) != 0) {
-                break;
-            }
-            if ((smallPiece & bigPiece) != 0) {
-                return possibleAnswer;
-            }
-            possibleAnswer |= smallPiece;
-        }
-
-        bigPiece = (indexOfPieceOne > indexOfPieceTwo) ? pieceOne : pieceTwo;
-        smallPiece = (indexOfPieceOne > indexOfPieceTwo) ? pieceTwo : pieceOne;
-        possibleAnswer = 0;
-
-        while (true) {
-            if ((smallPiece & BitBoards.RANK_EIGHT) != 0) {
-                break;
-            }
-            smallPiece <<= 8;
-            if ((smallPiece & ALL_PIECES_TO_AVOID) != 0) {
-                break;
-            }
-            if ((smallPiece & bigPiece) != 0) {
-                return possibleAnswer;
-            }
-            possibleAnswer |= smallPiece;
-        }
-
-        bigPiece = (indexOfPieceOne > indexOfPieceTwo) ? pieceOne : pieceTwo;
-        smallPiece = (indexOfPieceOne > indexOfPieceTwo) ? pieceTwo : pieceOne;
-        possibleAnswer = 0;
-
-        while (true) {
-            if ((smallPiece & NORTH_EAST) != 0) {
-                break;
-            }
-            smallPiece <<= 7;
-            if ((smallPiece & ALL_PIECES_TO_AVOID) != 0) {
-                break;
-            }
-            if ((smallPiece & bigPiece) != 0) {
-                return possibleAnswer;
-            }
-            possibleAnswer |= smallPiece;
-        }
-
-        return 0;
-    }
-
-    public static long extractInfiniteRayFromTwoPieces(Chessboard board, long pieceOne, long pieceTwo){
-        if (pieceOne == pieceTwo) return 0;
-
-        int indexOfPieceOne = getIndexOfFirstPiece(pieceOne);
-        int indexOfPieceTwo = getIndexOfFirstPiece(pieceTwo);
-        long bigPiece = (indexOfPieceOne > indexOfPieceTwo) ? pieceOne : pieceTwo;
-        long smallPiece = (indexOfPieceOne > indexOfPieceTwo) ? pieceTwo : pieceOne;
-        long possibleAnswer = 0;
-        long answer = 0;
-        
-        boolean thisOne = false;
-        while (true) {
-            if ((smallPiece & BitBoards.FILE_A) != 0) {
-                if (thisOne) {
-                    answer |= possibleAnswer;
-                }
-                break;
-            }
-            smallPiece <<= 1;
-            if ((smallPiece & bigPiece) != 0) {
-                thisOne = true;
-            }
-            possibleAnswer |= smallPiece;
-        }
-
-        bigPiece = !(indexOfPieceOne > indexOfPieceTwo) ? pieceOne : pieceTwo;
-        smallPiece = !(indexOfPieceOne > indexOfPieceTwo) ? pieceTwo : pieceOne;
-        possibleAnswer = 0;
-        
-        thisOne = false;
-        while (true) {
-            if ((smallPiece & BitBoards.FILE_H) != 0) {
-                if (thisOne) {
-                    answer |= possibleAnswer;
-                }
-                break;
-            }
-            smallPiece >>>= 1;
-            if ((smallPiece & bigPiece) != 0) {
-                thisOne = true;
-            }
-            possibleAnswer |= smallPiece;
-        }
-
-        bigPiece = (indexOfPieceOne > indexOfPieceTwo) ? pieceOne : pieceTwo;
-        smallPiece = (indexOfPieceOne > indexOfPieceTwo) ? pieceTwo : pieceOne;
-        possibleAnswer = 0;
-        
-        thisOne = false;
-        while (true) {
-            if ((smallPiece & NORTH_WEST) != 0) {
-                if (thisOne) {
-                    answer |= possibleAnswer;
-                }
-                break;
-            }
-            smallPiece <<= 9;
-            if ((smallPiece & bigPiece) != 0) {
-                thisOne = true;
-            }
-            possibleAnswer |= smallPiece;
-        }
-
-        bigPiece = !(indexOfPieceOne > indexOfPieceTwo) ? pieceOne : pieceTwo;
-        smallPiece = !(indexOfPieceOne > indexOfPieceTwo) ? pieceTwo : pieceOne;
-        possibleAnswer = 0;
-        
-        thisOne = false;
-        while (true) {
-            if ((smallPiece & SOUTH_EAST) != 0) {
-                if (thisOne) {
-                    answer |= possibleAnswer;
-                }
-                break;
-            }
-            smallPiece >>>= 9;
-            if ((smallPiece & bigPiece) != 0) {
-                thisOne = true;
-            }
-            possibleAnswer |= smallPiece;
-        }
-
-        bigPiece = (indexOfPieceOne > indexOfPieceTwo) ? pieceOne : pieceTwo;
-        smallPiece = (indexOfPieceOne > indexOfPieceTwo) ? pieceTwo : pieceOne;
-        possibleAnswer = 0;
-        
-        thisOne = false;
-        while (true) {
-            if ((smallPiece & BitBoards.RANK_EIGHT) != 0) {
-                if (thisOne) {
-                    answer |= possibleAnswer;
-                }
-                break;
-            }
-            smallPiece <<= 8;
-            if ((smallPiece & bigPiece) != 0) {
-                thisOne = true;
-            }
-            possibleAnswer |= smallPiece;
-        }
-
-        bigPiece = !(indexOfPieceOne > indexOfPieceTwo) ? pieceOne : pieceTwo;
-        smallPiece = !(indexOfPieceOne > indexOfPieceTwo) ? pieceTwo : pieceOne;
-        possibleAnswer = 0;
-        
-        thisOne = false;
-        while (true) {
-            if ((smallPiece & BitBoards.RANK_ONE) != 0) {
-                if (thisOne) {
-                    answer |= possibleAnswer;
-                }
-                break;
-            }
-            smallPiece >>>= 8;
-            if ((smallPiece & bigPiece) != 0) {
-                thisOne = true;
-            }
-            possibleAnswer |= smallPiece;
-        }
-
-        bigPiece = (indexOfPieceOne > indexOfPieceTwo) ? pieceOne : pieceTwo;
-        smallPiece = (indexOfPieceOne > indexOfPieceTwo) ? pieceTwo : pieceOne;
-        possibleAnswer = 0;
-        
-        thisOne = false;
-        while (true) {
-            if ((smallPiece & NORTH_EAST) != 0) {
-                if (thisOne) {
-                    answer |= possibleAnswer;
-                }
-                break;
-            }
-            smallPiece <<= 7;
-            if ((smallPiece & bigPiece) != 0) {
-                thisOne = true;
-            }
-            possibleAnswer |= smallPiece;
-        }
-
-        bigPiece = !(indexOfPieceOne > indexOfPieceTwo) ? pieceOne : pieceTwo;
-        smallPiece = !(indexOfPieceOne > indexOfPieceTwo) ? pieceTwo : pieceOne;
-        possibleAnswer = 0;
-        
-        thisOne = false;
-        while (true) {
-            if ((smallPiece & SOUTH_WEST) != 0) {
-                if (thisOne) {
-                    answer |= possibleAnswer;
-                }
-                break;
-            }
-            smallPiece >>>= 7;
-            if ((smallPiece & bigPiece) != 0) {
-                thisOne = true;
-            }
-            possibleAnswer |= smallPiece;
-        }
-        return answer;
-    }
-
-
-    private static long inCheckByAJumper(Chessboard board, boolean white){
-        long ans = 0, pawns, knights;
-        if (!white){
-            pawns = board.WHITE_PAWNS;
-            knights = board.WHITE_KNIGHTS;
-        }
-        else {
-            pawns = board.BLACK_PAWNS;
-            knights = board.BLACK_KNIGHTS;
-        }
-        long myKing = (white) ? board.WHITE_KING : board.BLACK_KING;
-
-        long possiblePawn = PieceMovePawns.singlePawnCaptures(board, myKing, white, pawns);
-        if (possiblePawn != 0) {
-            return possiblePawn;
-        }
-        long possibleKnight = PieceMoveKnight.singleKnightTable(board, myKing, white, UNIVERSE) & knights;
-        if (possibleKnight != 0) {
-            return possibleKnight;
-        }
-
-        return 0;
-    }
-
-    private static long inCheckByASlider(Chessboard board, boolean white){
-        long ans = 0, bishops, rooks, queens;
-        if (!white){
-            bishops = board.WHITE_BISHOPS;
-            rooks = board.WHITE_ROOKS;
-            queens = board.WHITE_QUEEN;
-        }
-        else {
-            bishops = board.BLACK_BISHOPS;
-            rooks = board.BLACK_ROOKS;
-            queens = board.BLACK_QUEEN;
-        }
-        long myKing = (white) ? board.WHITE_KING : board.BLACK_KING;
-
-        long possibleBishop = PieceMoveSliding.singleBishopCaptures(board, myKing, white, bishops);
-        if (possibleBishop != 0) {
-            return possibleBishop;
-        }
-        long possibleRook = PieceMoveSliding.singleRookCaptures(board, myKing, white, rooks);
-        if (possibleRook != 0){
-            return possibleRook;
-        }
-        long possibleQueen = PieceMoveSliding.singleQueenCaptures(board, myKing, white, queens);
-        if (possibleQueen != 0){
-            return possibleQueen;
-        }
-        return 0;
-    }
-
-}
Index: src/main/java/javacode/chessprogram/check/CheckUtilities.java
===================================================================
--- src/main/java/javacode/chessprogram/check/CheckUtilities.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/javacode/chessprogram/check/CheckUtilities.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
@@ -1,16 +0,0 @@
-package javacode.chessprogram.check;
-
-import javacode.chessprogram.chess.Chessboard;
-import javacode.chessprogram.chess.Copier;
-import javacode.chessprogram.moveGeneration.MoveGeneratorPseudo;
-
-import static javacode.chessprogram.chess.BitIndexing.UNIVERSE;
-
-class CheckUtilities {
-
-    static long kingDangerSquares(Chessboard board, boolean white){
-        Chessboard boardWithoutMyKing = Copier.copyBoard(board, white, true);
-        return MoveGeneratorPseudo.generatePseudoCaptureTable(boardWithoutMyKing, !white, 0, UNIVERSE, UNIVERSE);
-    }
-
-}
Index: src/main/java/javacode/chessprogram/chess/Chessboard.java
===================================================================
--- src/main/java/javacode/chessprogram/chess/Chessboard.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/javacode/chessprogram/chess/Chessboard.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
@@ -1,98 +0,0 @@
-package javacode.chessprogram.chess;
-
-import javacode.chessprogram.moveMaking.StackMoveData;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Objects;
-import java.util.Stack;
-
-public class Chessboard {
-
-    public Stack<StackMoveData> moveStack = new Stack<>();
-
-    public List<Move> stackMoves(Stack<StackMoveData> stack){
-        List<Move> moves = new ArrayList<>();
-        Stack<StackMoveData> clone = (Stack<StackMoveData>) stack.clone();
-        for (int s = 0; s < stack.size(); s++){
-            Move move = clone.pop().move;
-            moves.add(move);
-        }
-        return moves;
-    }
-    
-    private boolean whiteTurn = true;
-    public boolean whiteCanCastleK = true, whiteCanCastleQ = true, blackCanCastleK = true, blackCanCastleQ = true;
-
-    public long WHITE_PAWNS = 0x000000000000FF00L;
-    public long WHITE_KNIGHTS = 0x0000000000000042L;
-    public long WHITE_BISHOPS = 0x0000000000000024L;
-    public long WHITE_ROOKS = 0x0000000000000081L;
-    public long WHITE_QUEEN = 0x0000000000000010L;
-    public long WHITE_KING = 0x0000000000000008L;
-
-    public long BLACK_PAWNS = 0x00FF000000000000L;
-    public long BLACK_KNIGHTS = 0x4200000000000000L;
-    public long BLACK_BISHOPS = 0x2400000000000000L;
-    public long BLACK_ROOKS = 0x8100000000000000L;
-    public long BLACK_QUEEN = 0x1000000000000000L;
-    public long BLACK_KING = 0x0800000000000000L;
-
-    public long ALL_WHITE_PIECES (){
-        return WHITE_PAWNS | WHITE_KNIGHTS | WHITE_BISHOPS | WHITE_ROOKS | WHITE_QUEEN | WHITE_KING;
-    }
-
-    public long ALL_BLACK_PIECES (){
-        return BLACK_PAWNS | BLACK_KNIGHTS | BLACK_BISHOPS | BLACK_ROOKS | BLACK_QUEEN | BLACK_KING;
-    }
-
-    public long ALL_PIECES (){
-        return ALL_WHITE_PIECES() | ALL_BLACK_PIECES();
-    }
-
-
-    public boolean isWhiteTurn() {
-        return whiteTurn;
-    }
-
-    public void setWhiteTurn(boolean whiteTurn) {
-        this.whiteTurn = whiteTurn;
-    }
-
-    @Override
-    public boolean equals(Object o) {
-        if (this == o) return true;
-        if (o == null || getClass() != o.getClass()) return false;
-        Chessboard that = (Chessboard) o;
-        return whiteTurn == that.whiteTurn &&
-                whiteCanCastleK == that.whiteCanCastleK &&
-                whiteCanCastleQ == that.whiteCanCastleQ &&
-                blackCanCastleK == that.blackCanCastleK &&
-                blackCanCastleQ == that.blackCanCastleQ &&
-                WHITE_PAWNS == that.WHITE_PAWNS &&
-                WHITE_KNIGHTS == that.WHITE_KNIGHTS &&
-                WHITE_BISHOPS == that.WHITE_BISHOPS &&
-                WHITE_ROOKS == that.WHITE_ROOKS &&
-                WHITE_QUEEN == that.WHITE_QUEEN &&
-                WHITE_KING == that.WHITE_KING &&
-                BLACK_PAWNS == that.BLACK_PAWNS &&
-                BLACK_KNIGHTS == that.BLACK_KNIGHTS &&
-                BLACK_BISHOPS == that.BLACK_BISHOPS &&
-                BLACK_ROOKS == that.BLACK_ROOKS &&
-                BLACK_QUEEN == that.BLACK_QUEEN &&
-                BLACK_KING == that.BLACK_KING &&
-                Objects.equals(moveStack, that.moveStack);
-    }
-
-    @Override
-    public int hashCode() {
-        return Objects.hash(moveStack, whiteTurn, whiteCanCastleK, whiteCanCastleQ, blackCanCastleK, blackCanCastleQ, WHITE_PAWNS, WHITE_KNIGHTS, WHITE_BISHOPS, WHITE_ROOKS, WHITE_QUEEN, WHITE_KING, BLACK_PAWNS, BLACK_KNIGHTS, BLACK_BISHOPS, BLACK_ROOKS, BLACK_QUEEN, BLACK_KING);
-    }
-
-    @Override
-    public String toString() {
-        return "Chessboard{" +
-                "whiteTurn=" + whiteTurn +
-                '}';
-    }
-}
Index: src/main/java/tests/programtests/ChessboardTest.java
===================================================================
--- src/main/java/tests/programtests/ChessboardTest.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/tests/programtests/ChessboardTest.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
@@ -1,27 +0,0 @@
-package tests.programtests;
-
-import javacode.chessprogram.bitboards.RandomBoard;
-import javacode.chessprogram.chess.Chessboard;
-import org.junit.Assert;
-import org.junit.jupiter.api.BeforeAll;
-import org.junit.jupiter.api.Test;
-
-class ChessboardTest {
-
-    private static Chessboard[] bs;
-    
-    @BeforeAll
-    static void setUp() {
-        bs = RandomBoard.boardForTests();
-        RandomBoard.printBoards(bs);
-    }
-
-    @Test
-    void equals() {
-        
-        for (Chessboard b : bs){
-            Assert.assertEquals(b, b);
-        }
-        
-    }
-}
\ No newline at end of file
Index: src/main/java/javacode/chessprogram/chess/Copier.java
===================================================================
--- src/main/java/javacode/chessprogram/chess/Copier.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/javacode/chessprogram/chess/Copier.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
@@ -1,71 +0,0 @@
-package javacode.chessprogram.chess;
-
-import javacode.chessprogram.moveMaking.MoveParser;
-import javacode.chessprogram.moveMaking.StackMoveData;
-
-import java.util.Stack;
-
-public class Copier {
-
-    public static Chessboard copyBoard(Chessboard board, boolean white, boolean ignoreMyKing){
-        Chessboard newBoard = new Chessboard();
-        
-        newBoard.moveStack = (Stack< StackMoveData >) board.moveStack.clone();
-        
-        newBoard.WHITE_PAWNS = board.WHITE_PAWNS;
-        newBoard.WHITE_KNIGHTS = board.WHITE_KNIGHTS;
-        newBoard.WHITE_BISHOPS = board.WHITE_BISHOPS;
-        newBoard.WHITE_ROOKS = board.WHITE_ROOKS;
-        newBoard.WHITE_QUEEN = board.WHITE_QUEEN;
-        newBoard.WHITE_KING = board.WHITE_KING;
-
-        newBoard.BLACK_PAWNS = board.BLACK_PAWNS;
-        newBoard.BLACK_KNIGHTS = board.BLACK_KNIGHTS;
-        newBoard.BLACK_BISHOPS = board.BLACK_BISHOPS;
-        newBoard.BLACK_ROOKS = board.BLACK_ROOKS;
-        newBoard.BLACK_QUEEN = board.BLACK_QUEEN;
-        newBoard.BLACK_KING = board.BLACK_KING;
-
-        if (ignoreMyKing && white) {
-            newBoard.WHITE_KING = 0;
-        }
-        if (ignoreMyKing && !white) {
-            newBoard.BLACK_KING = 0;
-        }
-
-        newBoard.whiteCanCastleK = board.whiteCanCastleK;
-        newBoard.blackCanCastleK = board.blackCanCastleK;
-        newBoard.whiteCanCastleQ = board.whiteCanCastleQ;
-        newBoard.blackCanCastleQ = board.blackCanCastleQ;
-
-        newBoard.setWhiteTurn(board.isWhiteTurn());
-
-        return newBoard;
-    }
-
-
-    public static Move copyMove (Move move) {
-        Move copyMove = new Move(move.getSourceAsPieceIndex(), move.destinationIndex);
-
-        if ((move.move & MoveParser.SPECIAL_MOVE_MASK) != 0) {
-            if ((move.move & MoveParser.SPECIAL_MOVE_MASK) == MoveParser.CASTLING_MASK) {
-                copyMove.move |= MoveParser.CASTLING_MASK;
-            } else if ((move.move & MoveParser.SPECIAL_MOVE_MASK) == MoveParser.ENPASSANT_MASK) {
-                copyMove.move |= MoveParser.ENPASSANT_MASK;
-            } else if ((move.move & MoveParser.SPECIAL_MOVE_MASK) == MoveParser.PROMOTION_MASK) {
-                copyMove.move |= MoveParser.PROMOTION_MASK;
-
-                if ((move.move & MoveParser.WHICH_PROMOTION) == MoveParser.KNIGHT_PROMOTION_MASK) {
-                    copyMove.move |= MoveParser.KNIGHT_PROMOTION_MASK;
-                } else if ((move.move & MoveParser.WHICH_PROMOTION) == MoveParser.BISHOP_PROMOTION_MASK) {
-                    copyMove.move |= MoveParser.BISHOP_PROMOTION_MASK;
-                } else if ((move.move & MoveParser.WHICH_PROMOTION) == MoveParser.ROOK_PROMOTION_MASK) {
-                    copyMove.move |= MoveParser.ROOK_PROMOTION_MASK;
-                } else if ((move.move & MoveParser.WHICH_PROMOTION) == MoveParser.QUEEN_PROMOTION_MASK) {
-                    copyMove.move |= MoveParser.QUEEN_PROMOTION_MASK;
-                }
-            }
-        }
-        return copyMove;
-    }
-}
Index: src/main/java/javacode/chessprogram/miscAdmin/DetailedPerftSearching.java
===================================================================
--- src/main/java/javacode/chessprogram/miscAdmin/DetailedPerftSearching.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/javacode/chessprogram/miscAdmin/DetailedPerftSearching.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
@@ -1,175 +0,0 @@
-package javacode.chessprogram.miscAdmin;
-
-import javacode.chessprogram.chess.Chessboard;
-import javacode.chessprogram.chess.Move;
-import javacode.chessprogram.graphicsandui.Art;
-import javacode.chessprogram.moveGeneration.MoveGeneratorMaster;
-import javacode.chessprogram.moveMaking.MoveOrganiser;
-import javacode.chessprogram.moveMaking.MoveUnmaker;
-
-import java.util.ArrayList;
-import java.util.List;
-
-public class DetailedPerftSearching {
-
-    private static int nps = 0;
-    
-    class MoveNLong {
-        final long number;
-        final Move move;
-
-        MoveNLong(long number, Move move) {
-            this.number = number;
-            this.move = move;
-        }
-
-        @Override
-        public String toString() {
-            return "\nMoveNLong{" +
-                    "move=" + move +
-                    ", number=" + number +
-                    '}';
-        }
-    }
-    private List<MoveNLong> childrenNumbersAndMoves(Chessboard board, int depth){
-        List<MoveNLong> moveNLongs = new ArrayList<>();
-        System.out.println(Art.boardArt(board));
-
-        List<Long> longs = sumOfChildrenStartingAt(board, depth);
-//        System.out.println(longs);
-        long total = sumList(longs);
-
-        List<Move> moves = MoveGeneratorMaster.generateLegalMoves(board, board.isWhiteTurn());
-//        System.out.println(moves);
-
-        for (int i = 0; i < longs.size(); i++) {
-            Long l = longs.get(i);
-            MoveNLong m = new MoveNLong(longs.get(i), moves.get(i));
-
-            moveNLongs.add(m);
-        }
-        System.out.println(total);
-        System.out.println("------------");
-
-        return moveNLongs;
-    }
-
-    private static List<Long> sumOfChildrenStartingAt(Chessboard board, int d){
-        List<Long> movesByMove = new ArrayList<>();
-        List<Move> moves = MoveGeneratorMaster.generateLegalMoves(board, board.isWhiteTurn());
-        for (Move move : moves) {
-            MoveOrganiser.makeMoveMaster(board, move);
-            MoveOrganiser.flipTurn(board);
-            long l = countFinalNodesAtDepthHelper(board, d - 1);
-            movesByMove.add(l);
-//            System.out.println("move number : " + m +", move: "+ move +" , number of kids: " + l);
-            MoveUnmaker.unMakeMoveMaster(board);
-        }
-        return movesByMove;
-    }
-
-    private static List<Long> oddOnesOut(List<Long> l1, List<Long> l2){
-        List<Long> odds = new ArrayList<>();
-
-        List<Long> listOne = new ArrayList<>(l1);
-        List<Long> listTwo = new ArrayList<>(l2);
-
-        for (Long l : listOne) {
-            listTwo.remove(l);
-        }
-        return listTwo;
-
-    }
-
-    private static long sumList(List<Long> movesByMove){
-        long total = 0;
-        for (Long l : movesByMove){
-            total += l;
-        }
-        return total;
-    }
-
-    public static long runPerftTestWithBoard(int d, Chessboard board, long correctAnswer){
-        String s = Art.boardArt(board);
-        System.out.println(s);
-        System.out.println("-----------------------------------");
-        System.out.println("Correct Number of nodes at depth " + d + ": "+ correctAnswer);
-        System.out.println("-----------------------------------");
-        return runPerftTestWithBoard(d, board);
-    }
-
-    public static long runPerftTestWithBoardLong(int d, Chessboard board, long correctAnswer){
-        String s = Art.boardArt(board);
-        System.out.println(s);
-        System.out.println("-----------------------------------");
-        System.out.println("Correct Number of nodes at depth " + d + ": "+ correctAnswer);
-        System.out.println("-----------------------------------");
-        return runPerftTestWithBoard(d, board);
-    }
-
-    private static long runPerftTestWithBoard(int d, Chessboard board){
-        int maxD = d > 0 ? d : 6;
-//        for (int depth = 1; depth <= maxD; depth++) {
-//            countFinalNodesAtDepth(board, depth);
-//            System.out.println();
-//            System.out.println("-----");
-//            reset();
-//        }
-        reset();
-        return countFinalNodesAtDepth(board, maxD);
-    }
-
-    private static long countFinalNodesAtDepth(Chessboard board, int depth) {
-        long t1 = System.currentTimeMillis();
-        long ii = DetailedPerftSearching.countFinalNodesAtDepthHelper(board, depth);
-        System.out.println("Final Nodes at Depth " + depth + ": " + ii);
-        System.out.println("--previous checks: " + MoveGeneratorMaster.numberOfChecks);
-        System.out.println("--checkmates: " + MoveGeneratorMaster.numberOfCheckMates);
-        System.out.println("--stalemates: " + MoveGeneratorMaster.numberOfStaleMates);
-        System.out.println("--eps: " + MoveOrganiser.epNum);
-        System.out.println("--previous captures: " + MoveOrganiser.captures);
-        System.out.println("--previous castlings: " + MoveOrganiser.castlings);
-        System.out.println("--previous promotions: " + MoveOrganiser.promotions);
-        long t2 = System.currentTimeMillis();
-        long t = t2 - t1;
-        long seconds = t / 1000;
-        System.out.println("Depth " + depth + " took " + seconds + " seconds (" + t+" milliseconds).");
-        if (t > 0) {
-            System.out.println("NPS: " + ((nps / t) * 1000));
-        }
-        return ii;
-    }
-
-    private static long countFinalNodesAtDepthHelper(Chessboard board, int depth){
-        long temp = 0;
-        if (depth == 0){
-            return 1;
-        }
-        List<Move> moves = MoveGeneratorMaster.generateLegalMoves(board, board.isWhiteTurn());
-        if (depth == 1){
-            final int size = moves.size();
-            nps += size;
-            return size;
-        }
-        for (Move move : moves) {
-            MoveOrganiser.makeMoveMaster(board, move);
-            MoveOrganiser.flipTurn(board);
-            nps++;
-            long movesAtDepth = countFinalNodesAtDepthHelper(board, depth - 1);
-            temp += movesAtDepth;
-            MoveUnmaker.unMakeMoveMaster(board);
-        }
-        return temp;
-    }
-
-    private static void reset(){
-        nps = 0;
-        MoveGeneratorMaster.numberOfChecks = 0;
-        MoveGeneratorMaster.numberOfCheckMates = 0;
-        MoveGeneratorMaster.numberOfStaleMates = 0;
-        MoveOrganiser.epNum = 0;
-        MoveOrganiser.captures = 0;
-        MoveOrganiser.castlings = 0;
-        MoveOrganiser.promotions = 0;
-    }
-}
Index: src/main/java/tests/programtests/DetailedPerftSearchingTestSuite.java
===================================================================
--- src/main/java/tests/programtests/DetailedPerftSearchingTestSuite.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/tests/programtests/DetailedPerftSearchingTestSuite.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
@@ -1,705 +0,0 @@
-package tests.programtests;
-
-import javacode.chessprogram.chess.Chessboard;
-import javacode.chessprogram.miscAdmin.DetailedPerftSearching;
-import javacode.chessprogram.miscAdmin.FenParser;
-import org.junit.Assert;
-import org.junit.jupiter.api.Test;
-
-class DetailedPerftSearchingTestSuite {
-
-    /*
-    Many thanks to:
-    
-    - Martin Sedlak
-    http://www.talkchess.com/forum3/viewtopic.php?t=47318
-    
-    - JVMerlino
-    http://www.talkchess.com/forum3/viewtopic.php?f=7&t=47318&sid=346f11bd9bec1af8783af3009d320d94&start=20
-    
-    - Peter Ellis Jones
-    https://gist.github.com/peterellisjones/8c46c28141c162d1d8a0f0badbc9cff9
-     */
-
-    @Test
-    void regularBoard() {
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(5, new Chessboard(), 4865609),
-                4865609);
-
-        System.out.println("-----------------------------");
-
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(6, new Chessboard(), 119060324),
-                119060324);
-
-//        System.out.println("-----------------------------");
-//        
-//        Assert.assertEquals(
-//                DetailedPerftSearching.runPerftTestWithBoardLong(7, new Chessboard(), 3195901860L),
-//                3195901860L);
-
-
-//        System.out.println("-----------------------------");
-//
-//        Assert.assertEquals(
-//                DetailedPerftSearching.runPerftTestWithBoardLong(8, new Chessboard(), 84998978956L),
-//                84998978956L);
-
-
-//        System.out.println("-----------------------------");
-//
-//        Assert.assertEquals(
-//                DetailedPerftSearching.runPerftTestWithBoardLong(9, new Chessboard(), 2439530234167L),
-//                2439530234167L);
-//
-//
-//        System.out.println("-----------------------------");
-//
-//        Assert.assertEquals(
-//                DetailedPerftSearching.runPerftTestWithBoardLong(10, new Chessboard(), 69352859712417L),
-//                69352859712417L);
-
-    }
-
-    @Test
-    void tinyDepths() {
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(1, FenParser.makeBoardBasedOnFEN("r6r/1b2k1bq/8/8/7B/8/8/R3K2R b QK - 3 2"), 8),
-                8);
-
-        System.out.println("-----------------------------");
-
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(1, FenParser.makeBoardBasedOnFEN("8/8/8/2k5/2pP4/8/B7/4K3 b - d3 5 3"), 8),
-                8);
-
-        System.out.println("-----------------------------");
-
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(1, FenParser.makeBoardBasedOnFEN("r1bqkbnr/pppppppp/n7/8/8/P7/1PPPPPPP/RNBQKBNR w QqKk - 2 2"), 19),
-                19);
-
-        System.out.println("-----------------------------");
-
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(1, FenParser.makeBoardBasedOnFEN("r3k2r/p1pp1pb1/bn2Qnp1/2qPN3/1p2P3/2N5/PPPBBPPP/R3K2R b QqKk - 3 2"), 5),
-                5);
-
-        System.out.println("-----------------------------");
-
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(1, FenParser.makeBoardBasedOnFEN("2kr3r/p1ppqpb1/bn2Qnp1/3PN3/1p2P3/2N5/PPPBBPPP/R3K2R b QK - 3 2"), 44),
-                44);
-
-        System.out.println("-----------------------------");
-
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(1, FenParser.makeBoardBasedOnFEN("rnb2k1r/pp1Pbppp/2p5/q7/2B5/8/PPPQNnPP/RNB1K2R w QK - 3 9"), 39),
-                39);
-
-        System.out.println("-----------------------------");
-
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(1, FenParser.makeBoardBasedOnFEN("2r5/3pk3/8/2P5/8/2K5/8/8 w - - 5 4"), 9),
-                9);
-
-        System.out.println("-----------------------------");
-
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(3, FenParser.makeBoardBasedOnFEN("rnbq1k1r/pp1Pbppp/2p5/8/2B5/8/PPP1NnPP/RNBQK2R w KQ - 1 8"), 62379),
-                62379);
-
-        System.out.println("-----------------------------");
-
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(3, FenParser.makeBoardBasedOnFEN("r4rk1/1pp1qppp/p1np1n2/2b1p1B1/2B1P1b1/P1NP1N2/1PP1QPPP/R4RK1 w - - 0 10"), 89890),
-                89890);
-        
-    }
-
-
-    @Test
-    void test1() {
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(6, FenParser.makeBoardBasedOnFEN("3k4/3p4/8/K1P4r/8/8/8/8 b - - 0 1"), 1134888),
-                1134888);
-    }
-
-    @Test
-    void test2() {
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(6, FenParser.makeBoardBasedOnFEN("8/8/4k3/8/2p5/8/B2P2K1/8 w - - 0 1"), 1015133),
-                1015133);
-    }
-
-    @Test
-    void test3() {
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(6, FenParser.makeBoardBasedOnFEN("8/8/1k6/2b5/2pP4/8/5K2/8 b - d3 0 1"), 1440467),
-                1440467);
-    }
-
-    @Test
-    void test4() {
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(6, FenParser.makeBoardBasedOnFEN("5k2/8/8/8/8/8/8/4K2R w K - 0 1"), 661072),
-                661072);
-
-    }
-
-    @Test
-    void test5() {
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(6, FenParser.makeBoardBasedOnFEN("3k4/8/8/8/8/8/8/R3K3 w Q - 0 1"), 803711),
-                803711);
-
-    }
-
-
-    @Test
-    void test6() {
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(4, FenParser.makeBoardBasedOnFEN("r3k2r/1b4bq/8/8/8/8/7B/R3K2R w KQkq - 0 1"), 1274206),
-                1274206);
-    }
-
-
-    @Test
-    void test7() {
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(4, FenParser.makeBoardBasedOnFEN("r3k2r/8/3Q4/8/8/5q2/8/R3K2R b KQkq - 0 1"), 1720476),
-                1720476);
-
-    }
-
-    @Test
-    void test8() {
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(6, FenParser.makeBoardBasedOnFEN("2K2r2/4P3/8/8/8/8/8/3k4 w - - 0 1"), 3821001),
-                3821001);
-    }
-
-    @Test
-    void test9() {
-
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(5, FenParser.makeBoardBasedOnFEN("8/8/1P2K3/8/2n5/1q6/8/5k2 b - - 0 1"), 1004658),
-                1004658);
-    }
-
-    @Test
-    void test10() {
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(6, FenParser.makeBoardBasedOnFEN("4k3/1P6/8/8/8/8/K7/8 w - - 0 1"), 217342),
-                217342);
-    }
-
-    @Test
-    void test11() {
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(6, FenParser.makeBoardBasedOnFEN("8/P1k5/K7/8/8/8/8/8 w - - 0 1"), 92683),
-                92683);
-
-    }
-
-    @Test
-    void test12() {
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(6, FenParser.makeBoardBasedOnFEN("K1k5/8/P7/8/8/8/8/8 w - - 0 1"), 2217),
-                2217);
-    }
-
-    @Test
-    void test13() {
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(7, FenParser.makeBoardBasedOnFEN("8/k1P5/8/1K6/8/8/8/8 w - - 0 1"), 567584),
-                567584);
-    }
-
-
-    @Test
-    void test14() {
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(4, FenParser.makeBoardBasedOnFEN("8/8/2k5/5q2/5n2/8/5K2/8 b - - 0 1"), 23527),
-                23527);
-
-    }
-
-
-    @Test
-    void test15() {
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(5, FenParser.makeBoardBasedOnFEN("r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq -"), 193690690),
-                193690690);
-
-    }
-
-    @Test
-    void AvoidIllegalEPCapture() {
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(6, FenParser.makeBoardBasedOnFEN("8/5bk1/8/2Pp4/8/1K6/8/8 w - d6 0 1"), 824064),
-                824064);
-
-        System.out.println("-----------------------------");
-
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(6, FenParser.makeBoardBasedOnFEN("8/8/1k6/8/2pP4/8/5BK1/8 b - d3 0 1"), 824064),
-                824064);
-    }
-
-
-    @Test
-    void EPCaptureChecksOpponent() {
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(6, FenParser.makeBoardBasedOnFEN("8/8/1k6/2b5/2pP4/8/5K2/8 b - d3 0 1"), 1440467),
-                1440467);
-
-        System.out.println("-----------------------------");
-
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(6, FenParser.makeBoardBasedOnFEN("8/5k2/8/2Pp4/2B5/1K6/8/8 w - d6 0 1"), 1440467),
-                1440467);
-    }
-
-
-    @Test
-    void shortCastlingGivesCheck() {
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(6, FenParser.makeBoardBasedOnFEN("5k2/8/8/8/8/8/8/4K2R w K - 0 1"), 661072),
-                661072);
-
-        System.out.println("-----------------------------");
-
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(6, FenParser.makeBoardBasedOnFEN("4k2r/8/8/8/8/8/8/5K2 b k - 0 1"), 661072),
-                661072);
-    }
-
-    @Test
-    void longCastlingGivesCheck() {
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(6, FenParser.makeBoardBasedOnFEN("3k4/8/8/8/8/8/8/R3K3 w Q - 0 1"), 803711),
-                803711);
-
-        System.out.println("-----------------------------");
-
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(6, FenParser.makeBoardBasedOnFEN("r3k3/8/8/8/8/8/8/3K4 b q - 0 1"), 803711),
-                803711);
-    }
-
-
-    @Test
-    void CastlingCRAndDoublePins() {
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(4, FenParser.makeBoardBasedOnFEN("r3k2r/1b4bq/8/8/8/8/7B/R3K2R w KQkq - 0 1"), 1274206),
-                1274206);
-
-        System.out.println("-----------------------------");
-
-
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(4, FenParser.makeBoardBasedOnFEN("r3k2r/7b/8/8/8/8/1B4BQ/R3K2R b KQkq - 0 1"), 1274206),
-                1274206);
-    }
-
-
-    @Test
-    void CastlingPrevented() {
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(4, FenParser.makeBoardBasedOnFEN("r3k2r/8/3Q4/8/8/5q2/8/R3K2R b KQkq - 0 1"), 1720476),
-                1720476);
-
-        System.out.println("-----------------------------");
-
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(4, FenParser.makeBoardBasedOnFEN("r3k2r/8/5Q2/8/8/3q4/8/R3K2R w KQkq - 0 1"), 1720476),
-                1720476);
-    }
-
-    @Test
-    void PromoteOutOfCheck() {
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(6, FenParser.makeBoardBasedOnFEN("2K2r2/4P3/8/8/8/8/8/3k4 w - - 0 1"), 3821001),
-                3821001);
-
-        System.out.println("-----------------------------");
-
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(6, FenParser.makeBoardBasedOnFEN("3K4/8/8/8/8/8/4p3/2k2R2 b - - 0 1"), 3821001),
-                3821001);
-    }
-
-    @Test
-    void discoveredCheck() {
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(5, FenParser.makeBoardBasedOnFEN("8/8/1P2K3/8/2n5/1q6/8/5k2 b - - 0 1"), 1004658),
-                1004658);
-
-        System.out.println("-----------------------------");
-
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(5, FenParser.makeBoardBasedOnFEN("5K2/8/1Q6/2N5/8/1p2k3/8/8 w - - 0 1"), 1004658),
-                1004658);
-    }
-
-    @Test
-    void promoteToCheck() {
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(6, FenParser.makeBoardBasedOnFEN("4k3/1P6/8/8/8/8/K7/8 w - - 0 1"), 217342),
-                217342);
-
-        System.out.println("-----------------------------");
-
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(6, FenParser.makeBoardBasedOnFEN("8/k7/8/8/8/8/1p6/4K3 b - - 0 1"), 217342),
-                217342);
-    }
-
-    @Test
-    void underPromoteToCheck() {
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(6, FenParser.makeBoardBasedOnFEN("8/P1k5/K7/8/8/8/8/8 w - - 0 1"), 92683),
-                92683);
-
-        System.out.println("-----------------------------");
-
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(6, FenParser.makeBoardBasedOnFEN("8/8/8/8/8/k7/p1K5/8 b - - 0 1"), 92683),
-                92683);
-    }
-
-    @Test
-    void selfStaleMate() {
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(6, FenParser.makeBoardBasedOnFEN("K1k5/8/P7/8/8/8/8/8 w - - 0 1"), 2217),
-                2217);
-
-        System.out.println("-----------------------------");
-
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(6, FenParser.makeBoardBasedOnFEN("8/8/8/8/8/p7/8/k1K5 b - - 0 1"), 2217),
-                2217);
-    }
-
-    @Test
-    void checkStalemate() {
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(7, FenParser.makeBoardBasedOnFEN("8/k1P5/8/1K6/8/8/8/8 w - - 0 1"), 567584),
-                567584);
-
-        System.out.println("-----------------------------");
-
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(7, FenParser.makeBoardBasedOnFEN("8/8/8/8/1k6/8/K1p5/8 b - - 0 1"), 567584),
-                567584);
-    }
-
-
-    @Test
-    void doubleCheck() {
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(4, FenParser.makeBoardBasedOnFEN("8/8/2k5/5q2/5n2/8/5K2/8 b - - 0 1"), 23527),
-                23527);
-
-        System.out.println("-----------------------------");
-
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(4, FenParser.makeBoardBasedOnFEN("8/5k2/8/5N2/5Q2/2K5/8/8 w - - 0 1"), 23527),
-                23527);
-    }
-
-    @Test
-    void misc() {
-
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(4, FenParser.makeBoardBasedOnFEN("8/7p/p5pb/4k3/P1pPn3/8/P5PP/1rB2RK1 b - d3 0 28"), 67197),
-                67197);
-
-
-        System.out.println("-----------------------------");
-
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(6, FenParser.makeBoardBasedOnFEN("8/7p/p5pb/4k3/P1pPn3/8/P5PP/1rB2RK1 b - d3 0 28"), 38633283),
-                38633283);
-    }
-    
-    
-    @Test
-    void bigDepth1() {
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(6, FenParser.makeBoardBasedOnFEN("r3k2r/8/8/8/3pPp2/8/8/R3K1RR b KQkq e3 0 1"), 485647607),
-                485647607);
-
-    }
-
-    @Test
-    void bigDepth2() {
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(6, FenParser.makeBoardBasedOnFEN("r3k2r/Pppp1ppp/1b3nbN/nP6/BBP1P3/q4N2/Pp1P2PP/R2Q1RK1 w kq - 0 1"), 706045033),
-                706045033);
-    }
-
-    @Test
-    void bigDepth3() {
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(6, FenParser.makeBoardBasedOnFEN("8/7p/p5pb/4k3/P1pPn3/8/P5PP/1rB2RK1 b - d3 0 28"), 38633283),
-                38633283);
-    }
-
-    @Test
-    void bigDepth4() {
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(7, FenParser.makeBoardBasedOnFEN("8/3K4/2p5/p2b2r1/5k2/8/8/1q6 b - - 1 67"), 493407574),
-                493407574);
-    }
-    @Test
-    void bigDepth5() {
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(6, FenParser.makeBoardBasedOnFEN("rnbqkb1r/ppppp1pp/7n/4Pp2/8/8/PPPP1PPP/RNBQKBNR w KQkq f6 0 3"), 244063299),
-                244063299);
-    }
-
-    @Test
-    void bigDepth6() {
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(5, FenParser.makeBoardBasedOnFEN("r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq -"), 193690690),
-                193690690);
-    }
-
-
-
-    @Test
-    void bigDepth7() {
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(8, FenParser.makeBoardBasedOnFEN("8/p7/8/1P6/K1k3p1/6P1/7P/8 w - -"), 8103790),
-                8103790);
-    }
-
-    @Test
-    void bigDepth8Beelzebub() {
-        Assert.assertEquals(
-                    DetailedPerftSearching.runPerftTestWithBoard(1, FenParser.makeBoardBasedOnFEN("n1n5/PPPk4/8/8/8/8/4Kppp/5N1N b - -"), 24),
-                    24);
-
-        System.out.println("---------");
-
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(2, FenParser.makeBoardBasedOnFEN("n1n5/PPPk4/8/8/8/8/4Kppp/5N1N b - -"), 496),
-                496);
-
-        System.out.println("---------");
-
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(3, FenParser.makeBoardBasedOnFEN("n1n5/PPPk4/8/8/8/8/4Kppp/5N1N b - -"), 9483),
-                9483);
-
-        System.out.println("---------");
-
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(4, FenParser.makeBoardBasedOnFEN("n1n5/PPPk4/8/8/8/8/4Kppp/5N1N b - -"), 182838),
-                182838);
-
-        System.out.println("---------");
-
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(5, FenParser.makeBoardBasedOnFEN("n1n5/PPPk4/8/8/8/8/4Kppp/5N1N b - -"), 3605103),
-                3605103);
-
-        System.out.println("---------");
-
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(6, FenParser.makeBoardBasedOnFEN("n1n5/PPPk4/8/8/8/8/4Kppp/5N1N b - -"), 71179139),
-                71179139);
-
-        System.out.println("---------");
-    }
-
-
-    @Test
-    void bigDepth9() {
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(6, FenParser.makeBoardBasedOnFEN("r3k2r/p6p/8/B7/1pp1p3/3b4/P6P/R3K2R w KQkq -"), 77054993),
-                77054993);
-    }
-
-    @Test
-    void bigDepth10() {
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(7, FenParser.makeBoardBasedOnFEN("8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8 w - -"), 178633661),
-                178633661);
-
-
-    }
-
-
-    @Test
-    void bigDepth11() {
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(8, FenParser.makeBoardBasedOnFEN("8/5p2/8/2k3P1/p3K3/8/1P6/8 b - -"), 64451405),
-                64451405);
-    }
-
-    @Test
-    void bigDepth12() {
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(5, FenParser.makeBoardBasedOnFEN("r3k2r/pb3p2/5npp/n2p4/1p1PPB2/6P1/P2N1PBP/R3K2R w KQkq -"), 29179893),
-                29179893);
-    }
-    
-    @Test
-    void detailTest1(){
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(1, FenParser.makeBoardBasedOnFEN("r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq - 0 1"), 48),
-                48);
-
-        System.out.println("--------- ");
-
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(2, FenParser.makeBoardBasedOnFEN("r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq - 0 1"), 2039),
-                2039);
-
-        System.out.println("--------- ");
-
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(3, FenParser.makeBoardBasedOnFEN("r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq - 0 1"), 97862),
-                97862);
-
-        System.out.println("--------- ");
-
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(4, FenParser.makeBoardBasedOnFEN("r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq - 0 1"), 4085603),
-                4085603);
-
-        System.out.println("--------- ");
-
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(5, FenParser.makeBoardBasedOnFEN("r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq - 0 1"), 193690690),
-                193690690);
-
-        System.out.println("--------- ");
-//
-//        Assert.assertEquals(
-//                DetailedPerftSearching.runPerftTestWithBoardLong(6, FenParser.makeBoardBasedOnFEN("r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq - 0 1"), 8031647685L),
-//                8031647685L);
-//
-//        System.out.println("--------- ");
-    }
-
-    @Test
-    void detailTest2(){
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(1, FenParser.makeBoardBasedOnFEN("8/PPP4k/8/8/8/8/4Kppp/8 w - - 0 1"), 18),
-                18);
-
-        System.out.println("--------- ");
-
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(2, FenParser.makeBoardBasedOnFEN("8/PPP4k/8/8/8/8/4Kppp/8 w - - 0 1"), 290),
-                290);
-
-        System.out.println("--------- ");
-
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(3, FenParser.makeBoardBasedOnFEN("8/PPP4k/8/8/8/8/4Kppp/8 w - - 0 1"), 5044),
-                5044);
-
-        System.out.println("--------- ");
-
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(4, FenParser.makeBoardBasedOnFEN("8/PPP4k/8/8/8/8/4Kppp/8 w - - 0 1"), 89363),
-                89363);
-
-        System.out.println("--------- ");
-
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(5, FenParser.makeBoardBasedOnFEN("8/PPP4k/8/8/8/8/4Kppp/8 w - - 0 1"), 1745545),
-                1745545);
-
-        System.out.println("--------- ");
-
-//        Assert.assertEquals(
-//                DetailedPerftSearching.runPerftTestWithBoardLong(6, FenParser.makeBoardBasedOnFEN("8/PPP4k/8/8/8/8/4Kppp/8 w - - 0 1"), 34336777),
-//                34336777);
-//
-//        System.out.println("--------- ");
-    }
-
-
-    @Test
-    void detailTest3() {
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(1, FenParser.makeBoardBasedOnFEN("8/3K4/2p5/p2b2r1/5k2/8/8/1q6 b - 1 67"), 50),
-                50);
-
-        System.out.println("--------- ");
-
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(2, FenParser.makeBoardBasedOnFEN("8/3K4/2p5/p2b2r1/5k2/8/8/1q6 b - 1 67"), 279),
-                279);
-
-        System.out.println("--------- ");
-
-
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(3, FenParser.makeBoardBasedOnFEN("8/3K4/2p5/p2b2r1/5k2/8/8/1q6 b - 1 67"), 13310),
-                13310);
-
-        System.out.println("--------- ");
-
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(4, FenParser.makeBoardBasedOnFEN("8/3K4/2p5/p2b2r1/5k2/8/8/1q6 b - 1 67"), 54703),
-                54703);
-
-        System.out.println("--------- ");
-
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(5, FenParser.makeBoardBasedOnFEN("8/3K4/2p5/p2b2r1/5k2/8/8/1q6 b - 1 67"), 2538084),
-                2538084);
-
-        System.out.println("--------- ");
-    }
-    
-    @Test
-    void detailTest4() {
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(1, FenParser.makeBoardBasedOnFEN("8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8 w - - 0 1"), 14),
-                14);
-
-        System.out.println("--------- ");
-
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(2, FenParser.makeBoardBasedOnFEN("8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8 w - - 0 1"), 191),
-                191);
-
-        System.out.println("--------- ");
-
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(3, FenParser.makeBoardBasedOnFEN("8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8 w - - 0 1"), 2812),
-                2812);
-
-        System.out.println("--------- ");
-
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(4, FenParser.makeBoardBasedOnFEN("8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8 w - - 0 1"), 43238),
-                43238);
-
-        System.out.println("--------- ");
-
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(5, FenParser.makeBoardBasedOnFEN("8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8 w - - 0 1"), 674624),
-                674624);
-
-        System.out.println("--------- ");
-    }
-
-
-    @Test
-    void detailTest5() {
-        Assert.assertEquals(
-                DetailedPerftSearching.runPerftTestWithBoard(5, FenParser.makeBoardBasedOnFEN("r3k2r/pb3p2/5npp/n2p4/1p1PPB2/6P1/P2N1PBP/R3K2R b KQkq -"), 26957954),
-                26957954);
-
-    }
-}
\ No newline at end of file
Index: src/main/java/javacode/chessengine/transpositiontable/EngineMovesAndHash.java
===================================================================
--- src/main/java/javacode/chessengine/transpositiontable/EngineMovesAndHash.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/javacode/chessengine/transpositiontable/EngineMovesAndHash.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
@@ -1,38 +0,0 @@
-package javacode.chessengine.transpositiontable;
-
-import javacode.chessprogram.chess.Chessboard;
-import javacode.chessprogram.chess.Move;
-
-import static javacode.chessprogram.moveMaking.MoveOrganiser.flipTurn;
-import static javacode.chessprogram.moveMaking.MoveOrganiser.makeMoveMaster;
-import static javacode.chessprogram.moveMaking.MoveUnmaker.unMakeMoveMaster;
-
-public class EngineMovesAndHash {
-    
-    public static void makeMoveAndHashUpdate(Chessboard board, Move move, ZobristHash zobristHash){
-        zobristHash.zobristStack.push(zobristHash.getBoardHash());
-        zobristHash.updateHashPreMove(board, move);
-        makeMoveMaster(board, move);
-        flipTurn(board);
-        zobristHash.updateHashPostMove(board, move);
-    }
-
-    public static void UnMakeMoveAndHashUpdate(Chessboard board, ZobristHash zobristHash){
-        zobristHash.setBoardHash(zobristHash.zobristStack.pop());
-        unMakeMoveMaster(board);
-    }
-
-    public static void makeNullMove(Chessboard board, ZobristHash zobristHash){
-        zobristHash.zobristStack.push(zobristHash.getBoardHash());
-        if (board.moveStack.size() > 0) {
-            zobristHash.updateWithEPFlags(board);
-        }
-        zobristHash.setBoardHash(zobristHash.getBoardHash() ^ ZobristHash.zobristHashColourBlack);
-        flipTurn(board);
-    }
-
-    public static void unMakeNullMove(Chessboard board, ZobristHash zobristHash){
-        zobristHash.setBoardHash(zobristHash.zobristStack.pop());
-        flipTurn(board);
-    }
-}
Index: src/main/java/javacode/chessprogram/miscAdmin/ExtendedPositionDescriptionParser.java
===================================================================
--- src/main/java/javacode/chessprogram/miscAdmin/ExtendedPositionDescriptionParser.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/javacode/chessprogram/miscAdmin/ExtendedPositionDescriptionParser.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
@@ -1,160 +0,0 @@
-package javacode.chessprogram.miscAdmin;
-
-import javacode.chessprogram.chess.Chessboard;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-
-public class ExtendedPositionDescriptionParser {
-    
-    public static EPDObject parseEDPPosition(String edpPosition){
-        
-        String id = extractIDString(edpPosition);
-        
-        String[] bms = extractBestMoves(edpPosition);
-
-        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(edpPosition);
-        
-        String boardFen = extractBoardFen(edpPosition);
-
-        List<Integer> goodDestinations = new ArrayList<>();
-        for (String bm : bms) {
-            goodDestinations.add(MoveParserFromAN.destinationIndex(chessboard, bm));
-        }
-
-
-        String[] ams = extractAvoidMoves(edpPosition);
-        List<Integer> badDestinations = new ArrayList<>();
-        for (String am : ams) {
-            badDestinations.add(MoveParserFromAN.destinationIndex(chessboard, am));
-        }
-
-        return new EPDObject(chessboard, goodDestinations, id, boardFen, badDestinations);
-    }
-
-    private static String extractBoardFen(String edpPosition){
-        String pattern = "[/|\\w]* ";
-        Pattern p = Pattern.compile(pattern);
-        Matcher m = p.matcher(edpPosition);
-
-        String ans = "";
-
-        if (m.find()){
-            ans = m.group();
-        }
-        return ans;
-    }
-
-    private static String[] extractBestMoves(String edpPosition){
-        String pattern = "bm ([\\w| |+]*);";
-        Pattern p = Pattern.compile(pattern);
-        Matcher m = p.matcher(edpPosition);
-
-        String ans = "";
-
-        if (m.find()){
-            ans = m.group(1);
-        }
-
-        return ans.split(" ");
-    }
-
-    private static String[] extractAvoidMoves(String edpPosition){
-        String bool = "am .*";
-        Pattern p1 = Pattern.compile(bool);
-        Matcher m1 = p1.matcher(edpPosition);
-        
-        
-        if (!m1.find()){
-            return new String[0];
-        }
-
-        
-        String pattern = "am ([\\w| |+]*);";
-        Pattern p = Pattern.compile(pattern);
-        Matcher m = p.matcher(edpPosition);
-
-        String ans = "";
-
-        if (m.find()){
-            ans = m.group(1);
-        }
-
-        return ans.split(" ");
-    }
-
-    private static String extractBestMove(String edpPosition){
-        String pattern = "bm (\\w*)";
-        Pattern p = Pattern.compile(pattern);
-        Matcher m = p.matcher(edpPosition);
-
-        String ans = "";
-        
-        if (m.find()){
-            ans = m.group(1);
-        }
-        return ans;
-    }
-    
-    private static String extractIDString(String edpPosition){
-        String pattern = "id \\\"(\\w*[\\.+| +\\w]*)\\\"";
-        Pattern p = Pattern.compile(pattern);
-        Matcher m = p.matcher(edpPosition);
-
-        String ans = "";
-
-        if (m.find()){
-            ans = m.group(1);
-        }
-        return ans;
-    }
-    
-    public static class EPDObject {
-        private final Chessboard board;
-        private final List<Integer> bestMoveDestinationIndex;
-        private final List<Integer> avoidMoveDestinationIndex;
-        private final String id;
-        private final String boardFen;
-
-        EPDObject(Chessboard board, List<Integer> bestMoveDestinationIndex, String id,
-                  String boardFen, List<Integer> avoidMoveDestinationIndex) {
-            this.board = board;
-            this.bestMoveDestinationIndex = bestMoveDestinationIndex;
-            this.id = id;
-            this.boardFen = boardFen;
-            this.avoidMoveDestinationIndex = avoidMoveDestinationIndex;
-        }
-
-        public Chessboard getBoard() {
-            return board;
-        }
-
-        public List<Integer> getBestMoveDestinationIndex() {
-            return bestMoveDestinationIndex;
-        }
-
-        public String getId() {
-            return id;
-        }
-
-        public List<Integer> getAvoidMoveDestinationIndex() {
-            return avoidMoveDestinationIndex;
-        }
-
-        public String getBoardFen() {
-            return boardFen;
-        }
-
-        @Override
-        public String toString() {
-            return "EPDObject{" +
-                    "bestMoveDestinationIndex=" + bestMoveDestinationIndex +
-                    ", id='" + id + '\'' +
-                    ", boardFen='" + boardFen + '\'' +
-                    '}';
-        }
-    }
-    
-}
Index: src/main/java/javacode/chessprogram/miscAdmin/FenParser.java
===================================================================
--- src/main/java/javacode/chessprogram/miscAdmin/FenParser.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/javacode/chessprogram/miscAdmin/FenParser.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
@@ -1,295 +0,0 @@
-package javacode.chessprogram.miscAdmin;
-
-import javacode.chessprogram.chess.BitManipulations;
-import javacode.chessprogram.chess.Chessboard;
-import javacode.chessprogram.graphicsandui.Art;
-import javacode.chessprogram.moveMaking.StackMoveData;
-
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-
-public class FenParser {
-    
-    FenParser(String fenString){
-        Chessboard chessboard = parseFenString(fenString);
-        String s = Art.boardArt(chessboard);
-    }
-
-    public static Chessboard makeBoardBasedOnFEN(String fen){
-//        System.out.println(fen);
-        
-        Chessboard board = parseFenString(fen);
-        board.setWhiteTurn(isItWhitesTurn(fen));
-
-        boolean[] castlingRights = castlingRights(fen);
-        board.whiteCanCastleK = castlingRights[0];
-        board.whiteCanCastleQ = castlingRights[1];
-        board.blackCanCastleK = castlingRights[2];
-        board.blackCanCastleQ = castlingRights[3];
-
-        if (isEPFlagSet(fen)){
-            epFlag(fen, board);
-        }
-        return board;
-    }
-
-
-    private static boolean totalMoves(String fen){
-        //todo
-        String boardPattern = " (.) (\\w+|-) (\\w+|-)";
-        Pattern r = Pattern.compile(boardPattern);
-        Matcher m = r.matcher(fen);
-
-        String epFlags = "";
-
-        if (m.find()){
-            epFlags = m.group(3);
-        }
-        if (epFlags.length() == 0){
-            throw new RuntimeException("Could not Parse board rep of fen string");
-        }
-
-        return !epFlags.equals("-");
-    }
-
-
-    private static boolean fiftyMoves(String fen){
-        //todo
-        String boardPattern = " (.) (\\w+|-) (\\w+|-)";
-        Pattern r = Pattern.compile(boardPattern);
-        Matcher m = r.matcher(fen);
-
-        String epFlags = "";
-
-        if (m.find()){
-            epFlags = m.group(3);
-        }
-        if (epFlags.length() == 0){
-            throw new RuntimeException("Could not Parse board rep of fen string");
-        }
-
-        return !epFlags.equals("-");
-    }
-
-    private static void epFlag(String fen, Chessboard board){
-        String boardPattern = " (.) (\\w+|-) (\\w|-)";
-        Pattern r = Pattern.compile(boardPattern);
-        Matcher m = r.matcher(fen);
-
-        String epFlags = "";
-
-        if (m.find()){
-            epFlags = m.group(3);
-        }
-        if (epFlags.length() == 0){
-            throw new RuntimeException("Could not Parse board rep of fen string");
-        }
-
-        switch (epFlags) {
-            case "a": {
-                StackMoveData previousMoveForEPPurposes = new StackMoveData
-                        (null, board, 50, 1, StackMoveData.SpecialMove.ENPASSANTVICTIM);
-                board.moveStack.push(previousMoveForEPPurposes);
-                break;
-            }
-            case "b": {
-                StackMoveData previousMoveForEPPurposes = new StackMoveData
-                        (null, board, 50, 2, StackMoveData.SpecialMove.ENPASSANTVICTIM);
-                board.moveStack.push(previousMoveForEPPurposes);
-                break;
-            }
-            case "c": {
-                StackMoveData previousMoveForEPPurposes = new StackMoveData
-                        (null, board, 50, 3, StackMoveData.SpecialMove.ENPASSANTVICTIM);
-                board.moveStack.push(previousMoveForEPPurposes);
-                break;
-            }
-            case "d": {
-                StackMoveData previousMoveForEPPurposes = new StackMoveData
-                        (null, board, 50, 4, StackMoveData.SpecialMove.ENPASSANTVICTIM);
-                board.moveStack.push(previousMoveForEPPurposes);
-                break;
-            }
-            case "e": {
-                StackMoveData previousMoveForEPPurposes = new StackMoveData
-                        (null, board, 50, 5, StackMoveData.SpecialMove.ENPASSANTVICTIM);
-                board.moveStack.push(previousMoveForEPPurposes);
-                break;
-            }
-            case "f": {
-                StackMoveData previousMoveForEPPurposes = new StackMoveData
-                        (null, board, 50, 6, StackMoveData.SpecialMove.ENPASSANTVICTIM);
-                board.moveStack.push(previousMoveForEPPurposes);
-                break;
-            }
-            case "g": {
-                StackMoveData previousMoveForEPPurposes = new StackMoveData
-                        (null, board, 50, 7, StackMoveData.SpecialMove.ENPASSANTVICTIM);
-                board.moveStack.push(previousMoveForEPPurposes);
-                break;
-            }
-            case "h": {
-                StackMoveData previousMoveForEPPurposes = new StackMoveData
-                        (null, board, 50, 8, StackMoveData.SpecialMove.ENPASSANTVICTIM);
-                board.moveStack.push(previousMoveForEPPurposes);
-                break;
-            }
-            default:
-                System.out.println("problem with EP flag");
-        }
-    }
-
-    private static boolean isEPFlagSet(String fen){
-        String boardPattern = " (.) (\\w+|-) (\\w+|-)";
-        Pattern r = Pattern.compile(boardPattern);
-        Matcher m = r.matcher(fen);
-
-        String epFlags = "";
-
-        if (m.find()){
-            epFlags = m.group(3);
-        }
-        if (epFlags.length() == 0){
-            throw new RuntimeException("Could not Parse board rep of fen string");
-        }
-
-        return !epFlags.equals("-");
-    }
-
-    private static boolean[] castlingRights(String fen){
-        boolean[] castlingRights = {
-                false, false, false, false,
-        };
-        String boardPattern = " (.) (\\w+|-)";
-        Pattern r = Pattern.compile(boardPattern);
-        Matcher m = r.matcher(fen);
-        String castleString = "";
-        if (m.find()){
-            castleString = m.group(2);
-        }
-        if (castleString.length() == 0){
-            throw new RuntimeException("Could not Parse board rep of fen string");
-        }
-
-        if (castleString.equals("-")){
-            return castlingRights;
-        }
-
-        if (castleString.contains("K")){
-            castlingRights[0] = true;
-        }
-        if (castleString.contains("Q")){
-            castlingRights[1] = true;
-        }
-        if (castleString.contains("k")){
-            castlingRights[2] = true;
-        }
-        if (castleString.contains("q")){
-            castlingRights[3] = true;
-        }
-
-        return castlingRights;
-    }
-
-    private static boolean isItWhitesTurn(String fen){
-        String boardPattern = " (.)";
-        Pattern r = Pattern.compile(boardPattern);
-        Matcher m = r.matcher(fen);
-        String player = "";
-        if (m.find()){
-            player = m.group(1);
-        }
-        if (player.length() == 0){
-            throw new RuntimeException("Could not Parse board rep of fen string");
-        }
-        return player.equals("w");
-    }
-
-    private static Chessboard parseFenString (String fen){
-        Chessboard board = BlankBoard.blankBoard();
-        String boardRepresentation = boardRep(fen);
-        int length = boardRepresentation.length();
-        int index = -1;
-        int square = 63;
-        while (true){
-            index++;
-            if (index >= length){
-                break;
-            }
-            if (square < 0){
-                break;
-            }
-            String entry = Character.toString(boardRepresentation.charAt(index));
-            if (entry.equals("/")){
-                continue;
-            }
-            try {
-                int i = Integer.parseInt(entry);
-                square -= (i);
-                continue;
-            }
-            catch (NumberFormatException ignored){
-            }
-            long pieceFromFen = BitManipulations.newPieceOnSquare(square);
-            square--;
-            switch (entry) {
-                case "P":
-                    board.WHITE_PAWNS |= pieceFromFen;
-                    break;
-                case "N":
-                    board.WHITE_KNIGHTS |= pieceFromFen;
-                    break;
-                case "B":
-                    board.WHITE_BISHOPS |= pieceFromFen;
-                    break;
-                case "R":
-                    board.WHITE_ROOKS |= pieceFromFen;
-                    break;
-                case "Q":
-                    board.WHITE_QUEEN |= pieceFromFen;
-                    break;
-                case "K":
-                    board.WHITE_KING |= pieceFromFen;
-                    break;
-
-                case "p":
-                    board.BLACK_PAWNS |= pieceFromFen;
-                    break;
-                case "n":
-                    board.BLACK_KNIGHTS |= pieceFromFen;
-                    break;
-                case "b":
-                    board.BLACK_BISHOPS |= pieceFromFen;
-                    break;
-                case "r":
-                    board.BLACK_ROOKS |= pieceFromFen;
-                    break;
-                case "q":
-                    board.BLACK_QUEEN |= pieceFromFen;
-                    break;
-                case "k":
-                    board.BLACK_KING |= pieceFromFen;
-                    break;
-                default:
-                    System.out.println("I don't know this Piece");
-            }
-        }
-        return board;
-    }
-
-    private static String boardRep(String fen){
-        String boardPattern = "^[\\w*/]*";
-        Pattern r = Pattern.compile(boardPattern);
-        Matcher m = r.matcher(fen);
-        String boardRepresentation = "";
-        if (m.find()){
-            boardRepresentation = m.group();
-        }
-        if (boardRepresentation.length() == 0){
-            throw new RuntimeException("Could not Parse board rep of fen string");
-        }
-
-        return boardRepresentation;
-    }
-
-}
Index: src/main/java/javacode/chessprogram/bitboards/King.java
===================================================================
--- src/main/java/javacode/chessprogram/bitboards/King.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/javacode/chessprogram/bitboards/King.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
@@ -1,76 +0,0 @@
-package javacode.chessprogram.bitboards;
-
-
-public class King {
-
-    public static final long[] KING_MOVE_TABLE = {
-            0x302L,
-            0x705L,
-            0xe0aL,
-            0x1c14L,
-            0x3828L,
-            0x7050L,
-            0xe0a0L,
-            0xc040L,
-            0x30203L,
-            0x70507L,
-            0xe0a0eL,
-            0x1c141cL,
-            0x382838L,
-            0x705070L,
-            0xe0a0e0L,
-            0xc040c0L,
-            0x3020300L,
-            0x7050700L,
-            0xe0a0e00L,
-            0x1c141c00L,
-            0x38283800L,
-            0x70507000L,
-            0xe0a0e000L,
-            0xc040c000L,
-            0x302030000L,
-            0x705070000L,
-            0xe0a0e0000L,
-            0x1c141c0000L,
-            0x3828380000L,
-            0x7050700000L,
-            0xe0a0e00000L,
-            0xc040c00000L,
-            0x30203000000L,
-            0x70507000000L,
-            0xe0a0e000000L,
-            0x1c141c000000L,
-            0x382838000000L,
-            0x705070000000L,
-            0xe0a0e0000000L,
-            0xc040c0000000L,
-            0x3020300000000L,
-            0x7050700000000L,
-            0xe0a0e00000000L,
-            0x1c141c00000000L,
-            0x38283800000000L,
-            0x70507000000000L,
-            0xe0a0e000000000L,
-            0xc040c000000000L,
-            0x302030000000000L,
-            0x705070000000000L,
-            0xe0a0e0000000000L,
-            0x1c141c0000000000L,
-            0x3828380000000000L,
-            0x7050700000000000L,
-            0xe0a0e00000000000L,
-            0xc040c00000000000L,
-            0x203000000000000L,
-            0x507000000000000L,
-            0xa0e000000000000L,
-            0x141c000000000000L,
-            0x2838000000000000L,
-            0x5070000000000000L,
-            0xa0e0000000000000L,
-            0x40c0000000000000L,
-    };
-
-
-
-
-}
Index: src/main/java/javacode/chessprogram/check/KingLegalMoves.java
===================================================================
--- src/main/java/javacode/chessprogram/check/KingLegalMoves.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/javacode/chessprogram/check/KingLegalMoves.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
@@ -1,36 +0,0 @@
-package javacode.chessprogram.check;
-
-import javacode.chessprogram.chess.BitIndexing;
-import javacode.chessprogram.chess.Chessboard;
-import javacode.chessprogram.chess.Move;
-import javacode.chessprogram.moveGeneration.MoveGenerationUtilities;
-import javacode.chessprogram.moveGeneration.PieceMoveKing;
-import org.junit.Assert;
-
-import java.util.List;
-
-public class KingLegalMoves {
-
-    public static List<Move> kingLegalMovesOnly(Chessboard board, boolean white){
-        long myKing = (white) ? board.WHITE_KING : board.BLACK_KING;
-        int indexOfKing = BitIndexing.getIndexOfFirstPiece(myKing);
-        return MoveGenerationUtilities.movesFromAttackBoard(kingLegalPushAndCaptureTable(board, white), indexOfKing);
-    }
-
-    private static long kingLegalPushAndCaptureTable(Chessboard board, boolean white){
-        long ans = 0;
-        long myKing = (white) ? board.WHITE_KING : board.BLACK_KING;
-        long kingSafeSquares = ~CheckUtilities.kingDangerSquares(board, white);
-        long enemyPieces = (!white) ? board.ALL_WHITE_PIECES() : board.ALL_BLACK_PIECES();
-        long kingSafeCaptures = enemyPieces & kingSafeSquares;
-        long kingSafePushes = (~board.ALL_PIECES() & kingSafeSquares);
-        
-        ans |= PieceMoveKing.singleKingPushes(board, myKing, white, kingSafePushes);
-        ans |= PieceMoveKing.singleKingCaptures(board, myKing, white, kingSafeCaptures);
-
-        Assert.assertTrue(((kingSafeCaptures & kingSafePushes) == 0));
-
-        return ans;
-    }
-
-}
Index: src/main/java/javacode/chessprogram/bitboards/Knight.java
===================================================================
--- src/main/java/javacode/chessprogram/bitboards/Knight.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/javacode/chessprogram/bitboards/Knight.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
@@ -1,73 +0,0 @@
-package javacode.chessprogram.bitboards;
-
-public class Knight {
-
-    public static final long[] KNIGHT_MOVE_TABLE = {
-            0x20400L,
-            0x50800L,
-            0xa1100L,
-            0x142200L,
-            0x284400L,
-            0x508800L,
-            0xa01000L,
-            0x402000L,
-            0x2040004L,
-            0x5080008L,
-            0xa110011L,
-            0x14220022L,
-            0x28440044L,
-            0x50880088L,
-            0xa0100010L,
-            0x40200020L,
-            0x204000402L,
-            0x508000805L,
-            0xa1100110aL,
-            0x1422002214L,
-            0x2844004428L,
-            0x5088008850L,
-            0xa0100010a0L,
-            0x4020002040L,
-            0x20400040200L,
-            0x50800080500L,
-            0xa1100110a00L,
-            0x142200221400L,
-            0x284400442800L,
-            0x508800885000L,
-            0xa0100010a000L,
-            0x402000204000L,
-            0x2040004020000L,
-            0x5080008050000L,
-            0xa1100110a0000L,
-            0x14220022140000L,
-            0x28440044280000L,
-            0x50880088500000L,
-            0xa0100010a00000L,
-            0x40200020400000L,
-            0x204000402000000L,
-            0x508000805000000L,
-            0xa1100110a000000L,
-            0x1422002214000000L,
-            0x2844004428000000L,
-            0x5088008850000000L,
-            0xa0100010a0000000L,
-            0x4020002040000000L,
-            0x400040200000000L,
-            0x800080500000000L,
-            0x1100110a00000000L,
-            0x2200221400000000L,
-            0x4400442800000000L,
-            0x8800885000000000L,
-            0x100010a000000000L,
-            0x2000204000000000L,
-            0x4020000000000L,
-            0x8050000000000L,
-            0x110a0000000000L,
-            0x22140000000000L,
-            0x44280000000000L,
-            0x88500000000000L,
-            0x10a00000000000L,
-            0x20400000000000L,
-    };
-
-
-}
Index: src/main/java/META-INF/MANIFEST.MF
===================================================================
--- src/main/java/META-INF/MANIFEST.MF	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/META-INF/MANIFEST.MF	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
@@ -1,3 +0,0 @@
-Manifest-Version: 1.0
-Main-Class: javacode.main.UCIEntry
-
Index: src/main/java/javacode/chessprogram/chess/Move.java
===================================================================
--- src/main/java/javacode/chessprogram/chess/Move.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/javacode/chessprogram/chess/Move.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
@@ -1,106 +0,0 @@
-package javacode.chessprogram.chess;
-
-import javacode.chessprogram.graphicsandui.Art;
-import javacode.chessprogram.miscAdmin.MovePrettifier;
-
-import java.util.Objects;
-
-public class Move {
-
-    public int move;
-    private int source;
-    public int destinationIndex;
-    final private static int
-            sourceOffset = 6,
-            SOURCE_MASK = 0x00000fc0,
-            DESTINATION_MASK = 0x0000003f,
-
-            SPECIAL_MOVE_MASK = 0x00003000,
-            CASTLING_MASK = 0x00001000,
-            ENPASSANT_MASK = 0x00002000,
-            PROMOTION_MASK = 0x00003000,
-
-            WHICH_PROMOTION = 0x0000c000,
-            KNIGHT_PROMOTION_MASK = 0x00000000,
-            BISHOP_PROMOTION_MASK = 0x00004000,
-            ROOK_PROMOTION_MASK = 0x00008000,
-            QUEEN_PROMOTION_MASK = 0x0000c000;
-
-    public Move(int source, int destinationIndex){
-        makeSourceAndDest(source, destinationIndex);
-    }
-
-    public Move(int source, int destinationIndex, boolean castling, boolean enPassant, boolean promotion,
-                boolean promoteToKnight, boolean promoteToBishop, boolean promoteToRook, boolean promoteToQueen){
-
-        makeSourceAndDest(source, destinationIndex);
-
-        if (castling) this.move |= CASTLING_MASK;
-        if (enPassant) this.move |= ENPASSANT_MASK;
-        if (promotion) {
-            if (promoteToKnight) this.move |= KNIGHT_PROMOTION_MASK;
-            else if (promoteToBishop) this.move |= BISHOP_PROMOTION_MASK;
-            else if (promoteToRook) this.move |= ROOK_PROMOTION_MASK;
-            else if (promoteToQueen) this.move |= QUEEN_PROMOTION_MASK;
-        }
-    }
-
-    public Move(int source, int destinationIndex, boolean castling, boolean enPassant, boolean promotion,
-                boolean promoteToKnight, boolean promoteToBishop, boolean promoteToRook, boolean promoteToQueen, int hack){
-
-        makeSourceAndDest(source, destinationIndex);
-
-        if (castling) this.move |= CASTLING_MASK;
-        if (enPassant) this.move |= ENPASSANT_MASK;
-        if (promotion) {
-            this.move |= PROMOTION_MASK;
-            if (promoteToKnight) this.move |= KNIGHT_PROMOTION_MASK;
-            else if (promoteToBishop) this.move |= BISHOP_PROMOTION_MASK;
-            else if (promoteToRook) this.move |= ROOK_PROMOTION_MASK;
-            else if (promoteToQueen) this.move |= QUEEN_PROMOTION_MASK;
-        }
-    }
-
-
-    private void makeSourceAndDest(int s, int d){
-        if (s >= 64 | s < 0 | d >= 64 | d < 0){
-            throw new RuntimeException("Move: False Move " + s+" "+ d);
-        }
-        this.source = (s << sourceOffset) & SOURCE_MASK;
-        this.destinationIndex = d & DESTINATION_MASK;
-        this.move |= this.source;
-        this.move |= this.destinationIndex;
-    }
-
-    @Override
-    public String toString() {
-        return MovePrettifier.prettyMove(this);
-    }
-
-    public String toStringSimple() {
-        return (getSourceAsPieceIndex() +" " + destinationIndex);
-    }
-    
-    public String toComplicatedString(){
-        return Art.makeMoveToString(this.move);
-    }
-
-    public int getSourceAsPieceIndex() {
-        return source >>> sourceOffset;
-    }
-
-    @Override
-    public boolean equals(Object o) {
-        if (this == o) return true;
-        if (o == null || getClass() != o.getClass()) return false;
-        Move move1 = (Move) o;
-        return move == move1.move &&
-                source == move1.source &&
-                destinationIndex == move1.destinationIndex;
-    }
-
-    @Override
-    public int hashCode() {
-        return Objects.hash(move, source, destinationIndex);
-    }
-}
Index: src/main/java/javacode/chessprogram/moveMaking/MoveCastling.java
===================================================================
--- src/main/java/javacode/chessprogram/moveMaking/MoveCastling.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/javacode/chessprogram/moveMaking/MoveCastling.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
@@ -1,84 +0,0 @@
-package javacode.chessprogram.moveMaking;
-
-import javacode.chessprogram.bitboards.BitBoards;
-import javacode.chessprogram.chess.Chessboard;
-import javacode.chessprogram.chess.Move;
-
-import static javacode.chessprogram.chess.BitManipulations.newPieceOnSquare;
-
-class MoveCastling {
-
-    static void makeCastlingMove(Chessboard board, Move move){
-        long sourcePiece = newPieceOnSquare(move.getSourceAsPieceIndex());
-        if ((sourcePiece & BitBoards.WHITE_KING) != 0){
-            if (move.destinationIndex == 1){
-                long originalRook = newPieceOnSquare(0);
-                long newRook = newPieceOnSquare(move.destinationIndex + 1);
-                long newKing = newPieceOnSquare(move.destinationIndex);
-                MoveMakingUtilities.removePieces(board, sourcePiece, originalRook);
-                board.WHITE_KING |= newKing;
-                board.WHITE_ROOKS |= newRook;
-                board.whiteCanCastleK = board.whiteCanCastleQ = false;
-            }
-            else if (move.destinationIndex == 5){
-                long originalRook = newPieceOnSquare(7);
-                long newRook = newPieceOnSquare(move.destinationIndex - 1);
-                long newKing = newPieceOnSquare(move.destinationIndex);
-                MoveMakingUtilities.removePieces(board, sourcePiece, originalRook);
-                board.WHITE_KING |= newKing;
-                board.WHITE_ROOKS |= newRook;
-                board.whiteCanCastleK = board.whiteCanCastleQ = false;
-            }
-        }
-
-        else if ((sourcePiece & BitBoards.BLACK_KING) != 0){
-            if (move.destinationIndex == 57){
-                long originalRook = newPieceOnSquare(56);
-                long newRook = newPieceOnSquare(move.destinationIndex + 1);
-                long newKing = newPieceOnSquare(move.destinationIndex);
-                MoveMakingUtilities.removePieces(board, sourcePiece, originalRook);
-                board.BLACK_KING |= newKing;
-                board.BLACK_ROOKS |= newRook;
-                board.blackCanCastleK = board.blackCanCastleQ = false;
-            }
-            else if (move.destinationIndex == 61){
-                long originalRook = newPieceOnSquare(63);
-                long newRook = newPieceOnSquare(move.destinationIndex - 1);
-                long newKing = newPieceOnSquare(move.destinationIndex);
-                MoveMakingUtilities.removePieces(board, sourcePiece, originalRook);
-                board.BLACK_KING |= newKing;
-                board.BLACK_ROOKS |= newRook;
-                board.blackCanCastleK = board.blackCanCastleQ = false;
-            }
-        }
-        else {
-            throw new RuntimeException("Incorrect call to castling move");
-        }
-    }
-
-    static void castleFlagManager (Chessboard board, Move move){
-
-        // disable relevant castle flag whenever a piece moves into the relevant square.
-        if (move.getSourceAsPieceIndex() == 0 || move.destinationIndex == 0){
-            board.whiteCanCastleK = false;
-        }
-        if (move.getSourceAsPieceIndex() == 3 || move.destinationIndex == 3){
-            board.whiteCanCastleK = false;
-            board.whiteCanCastleQ = false;
-        }
-        if (move.getSourceAsPieceIndex() == 7 || move.destinationIndex == 7){
-            board.whiteCanCastleQ = false;
-        }
-
-        if (move.getSourceAsPieceIndex() == 56 || move.destinationIndex == 56){
-            board.blackCanCastleK = false;
-        }
-        if (move.getSourceAsPieceIndex() == 59 || move.destinationIndex == 59){
-            board.blackCanCastleK = false;
-            board.blackCanCastleQ = false;
-        }
-        if (move.getSourceAsPieceIndex() == 63 || move.destinationIndex == 63){
-            board.blackCanCastleQ = false;
-        }
-    }
-}
Index: src/main/java/javacode/chessprogram/moveMaking/MoveEnPassant.java
===================================================================
--- src/main/java/javacode/chessprogram/moveMaking/MoveEnPassant.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/javacode/chessprogram/moveMaking/MoveEnPassant.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
@@ -1,33 +0,0 @@
-package javacode.chessprogram.moveMaking;
-
-import javacode.chessprogram.chess.Chessboard;
-import javacode.chessprogram.chess.Move;
-
-import static javacode.chessprogram.chess.BitManipulations.newPieceOnSquare;
-
-class MoveEnPassant {
-    
-    static void makeEnPassantMove(Chessboard board, Move move){
-        long sourcePiece = newPieceOnSquare(move.getSourceAsPieceIndex());
-        long destinationPiece = newPieceOnSquare(move.destinationIndex);
-        
-        if ((destinationPiece & board.ALL_PIECES()) != 0) {
-            throw new RuntimeException("EP move Problem");
-        }
-        
-        if ((sourcePiece & board.WHITE_PAWNS) != 0){
-            MoveMakingUtilities.removePieces(board, sourcePiece, destinationPiece >>> 8);
-            board.WHITE_PAWNS |= destinationPiece;
-        }
-        
-        else if  ((sourcePiece & board.BLACK_PAWNS) != 0){
-            MoveMakingUtilities.removePieces(board, sourcePiece, destinationPiece << 8);
-            board.BLACK_PAWNS |= destinationPiece;
-        }
-        else {
-            throw new RuntimeException("false EP move");
-        }
-    }
-
-
-}
Index: src/main/java/javacode/chessprogram/moveGeneration/MoveGenerationUtilities.java
===================================================================
--- src/main/java/javacode/chessprogram/moveGeneration/MoveGenerationUtilities.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/javacode/chessprogram/moveGeneration/MoveGenerationUtilities.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
@@ -1,30 +0,0 @@
-package javacode.chessprogram.moveGeneration;
-
-import javacode.chessprogram.chess.BitIndexing;
-import javacode.chessprogram.chess.Move;
-
-import java.util.ArrayList;
-import java.util.List;
-
-public class MoveGenerationUtilities {
-
-    public static List<Move> movesFromAttackBoard(long attackBoard, int source) {
-        List<Move> moves = new ArrayList<>();
-        List<Integer> indexOfAllPieces = BitIndexing.getIndexOfAllPieces(attackBoard);
-        for (int i : indexOfAllPieces) {
-            moves.add(new Move(source, i));
-        }
-        return moves;
-    }
-
-    static List<Move> movesFromAttackBoardLong(long attackBoard, long longSource) {
-        List<Move> moves = new ArrayList<>();
-        int source = BitIndexing.getIndexOfFirstPiece(longSource);
-        List<Integer> indexOfAllPieces = BitIndexing.getIndexOfAllPieces(attackBoard);
-        for (int i : indexOfAllPieces) {
-            moves.add(new Move(source, i));
-        }
-        return moves;
-    }
-
-}
\ No newline at end of file
Index: src/main/java/javacode/chessprogram/moveGeneration/MoveGeneratorCastling.java
===================================================================
--- src/main/java/javacode/chessprogram/moveGeneration/MoveGeneratorCastling.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/javacode/chessprogram/moveGeneration/MoveGeneratorCastling.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
@@ -1,99 +0,0 @@
-package javacode.chessprogram.moveGeneration;
-
-import javacode.chessprogram.bitboards.BitBoards;
-import javacode.chessprogram.check.CheckChecker;
-import javacode.chessprogram.chess.BitExtractor;
-import javacode.chessprogram.chess.Chessboard;
-import javacode.chessprogram.chess.Move;
-import org.junit.Assert;
-
-import java.util.ArrayList;
-import java.util.List;
-
-class MoveGeneratorCastling {
-
-    // checking if we are in check happens elsewhere
-    static List<Move> generateCastlingMoves(Chessboard board, boolean white){
-        List<Move> moves = new ArrayList<>();
-
-        if (white){
-            if(board.whiteCanCastleK){
-                if (areTheseSquaresEmpty(board, BitBoards.whiteCastleKingEmpties)
-                        && areTheseSquaresUnthreatened(board, true, BitBoards.whiteCastleKingEmpties)
-                        && ((board.WHITE_KING & BitBoards.WHITE_KING) != 0)
-                        && ((board.WHITE_ROOKS & BitBoards.SOUTH_EAST_CORNER) != 0)){
-
-                    Assert.assertTrue(areTheseSquaresUnthreatened(board, true, board.WHITE_KING));
-                    Assert.assertTrue(!CheckChecker.boardInCheck(board, true));
-                    
-                    Move whiteCastleSE = new Move(3, 1, true, false, false, false, false, false, false);
-                    moves.add(whiteCastleSE);
-                }
-            }
-
-            if(board.whiteCanCastleQ){
-                if (areTheseSquaresEmpty(board, BitBoards.whiteCastleQueenEmpties)
-                        && areTheseSquaresUnthreatened(board, true, BitBoards.whiteCastleQueenUnthreateneds)
-                        && ((board.WHITE_KING & BitBoards.WHITE_KING) != 0)
-                        && ((board.WHITE_ROOKS & BitBoards.SOUTH_WEST_CORNER) != 0)){
-
-                    Assert.assertTrue(areTheseSquaresUnthreatened(board, true, board.WHITE_KING));
-                    Assert.assertTrue(!CheckChecker.boardInCheck(board, true));
-
-                    Move whiteCastleSW = new Move(3, 5, true, false, false, false, false, false, false);
-                    moves.add(whiteCastleSW);
-                }
-            }
-
-
-        }
-        else {
-            if(board.blackCanCastleK){
-                if (areTheseSquaresEmpty(board, BitBoards.blackCastleKingEmpties)
-                        && areTheseSquaresUnthreatened(board, false, BitBoards.blackCastleKingEmpties)
-                        && ((board.BLACK_KING & BitBoards.BLACK_KING) != 0)
-                        && ((board.BLACK_ROOKS & BitBoards.NORTH_EAST_CORNER) != 0)){
-
-                    Assert.assertTrue(areTheseSquaresUnthreatened(board, false, board.BLACK_KING));
-                    Assert.assertTrue(!CheckChecker.boardInCheck(board, false));
-                    
-                    Move blackCastleNE = new Move(59, 57, true, false, false, false, false, false, false);
-                    moves.add(blackCastleNE);
-                }
-            }
-
-            if(board.blackCanCastleQ){
-                if (areTheseSquaresEmpty(board, BitBoards.blackCastleQueenEmpties)
-                        && areTheseSquaresUnthreatened(board, false, BitBoards.blackCastleQueenUnthreateneds)
-                        && ((board.BLACK_KING & BitBoards.BLACK_KING) != 0)
-                        && ((board.BLACK_ROOKS & BitBoards.NORTH_WEST_CORNER) != 0)){
-
-                    Assert.assertTrue(areTheseSquaresUnthreatened(board, false, board.BLACK_KING));
-                    Assert.assertTrue(!CheckChecker.boardInCheck(board, false));
-                    
-                    Move blackCastleNW = new Move(59, 61, true, false, false, false, false, false, false);
-                    moves.add(blackCastleNW);
-                }
-            }
-        }
-
-        return moves;
-    }
-
-
-
-    private static boolean areTheseSquaresUnthreatened(Chessboard board, boolean white, long squares){
-        List<Long> squaresThatShouldBeUnthreatened = BitExtractor.getAllPieces(squares, 0);
-        for (long square : squaresThatShouldBeUnthreatened) {
-            int numberOfThreats = CheckChecker.numberOfPiecesThatLegalThreatenSquare(board, white, square); 
-            if (numberOfThreats > 0){
-                return false;
-            }
-        }
-        return true;
-    }
-
-    private static boolean areTheseSquaresEmpty(Chessboard board, long squares){
-        return ((board.ALL_PIECES() & squares) == 0);
-    }
-}
Index: src/main/java/javacode/chessprogram/moveGeneration/MoveGeneratorEnPassant.java
===================================================================
--- src/main/java/javacode/chessprogram/moveGeneration/MoveGeneratorEnPassant.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/javacode/chessprogram/moveGeneration/MoveGeneratorEnPassant.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
@@ -1,129 +0,0 @@
-package javacode.chessprogram.moveGeneration;
-
-import javacode.chessprogram.bitboards.BitBoards;
-import javacode.chessprogram.check.CheckChecker;
-import javacode.chessprogram.chess.BitExtractor;
-import javacode.chessprogram.chess.BitIndexing;
-import javacode.chessprogram.chess.Chessboard;
-import javacode.chessprogram.chess.Move;
-import javacode.chessprogram.moveMaking.MoveOrganiser;
-import javacode.chessprogram.moveMaking.MoveParser;
-import javacode.chessprogram.moveMaking.MoveUnmaker;
-import javacode.chessprogram.moveMaking.StackMoveData;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import static javacode.chessprogram.moveMaking.StackMoveData.SpecialMove;
-
-public class MoveGeneratorEnPassant {
-
-    public static List<Move> generateEnPassantMoves(Chessboard board, boolean white,
-                                                    long ignoreThesePieces, long legalPushes, long legalCaptures) {
-        List<Move> moves = new ArrayList<>();
-
-        long myPawns = white ? board.WHITE_PAWNS : board.BLACK_PAWNS;
-        long enemyPawns = white ? board.BLACK_PAWNS : board.WHITE_PAWNS;
-        long enPassantTakingRank = white ? BitBoards.RANK_FIVE : BitBoards.RANK_FOUR;
-
-        long myPawnsInPosition = myPawns & enPassantTakingRank;
-        if (myPawnsInPosition == 0) {
-            return new ArrayList<>();
-        }
-
-        long enemyPawnsInPosition = enemyPawns & enPassantTakingRank;
-        if (enemyPawnsInPosition == 0) {
-            return new ArrayList<>();
-        }
-
-        if (board.moveStack.size() < 1){
-            return new ArrayList<>();
-        }
-
-        StackMoveData previousMove = board.moveStack.peek();
-        if (previousMove.typeOfSpecialMove != SpecialMove.ENPASSANTVICTIM){
-            return new ArrayList<>();
-        }
-
-
-
-        long FILE = extractFileFromInt(previousMove.enPassantFile);
-
-        List<Long> allEnemyPawnsInPosition = BitExtractor.getAllPieces(enemyPawnsInPosition, ignoreThesePieces);
-
-        long enemyTakingSpots = 0;
-        for (Long enemyPawn : allEnemyPawnsInPosition){
-            long takingSpot = white ? enemyPawn << 8 : enemyPawn >>> 8;
-            long potentialTakingSpot = takingSpot & FILE;
-
-            if ((potentialTakingSpot & board.ALL_PIECES()) != 0){
-                continue;
-            }
-            
-            if (((enemyPawn & legalCaptures) == 0) && ((potentialTakingSpot & legalPushes) == 0)) {
-                continue;
-            }
-            enemyTakingSpots |= potentialTakingSpot;
-        }
-
-
-        if (enemyTakingSpots == 0){
-            return new ArrayList<>();
-        }
-
-        List<Long> allMyPawnsInPosition = BitExtractor.getAllPieces(myPawnsInPosition, ignoreThesePieces);
-
-        for (Long myPawn : allMyPawnsInPosition){
-            int indexOfFirstPiece = BitIndexing.getIndexOfFirstPiece(myPawn);
-            long pawnEnPassantCapture = PieceMovePawns.singlePawnCaptures(board, myPawn, white, enemyTakingSpots);
-            List<Move> epMoves = MoveGenerationUtilities.movesFromAttackBoard(pawnEnPassantCapture, indexOfFirstPiece);
-            moves.addAll(epMoves);
-        }
-
-        List<Move> safeEPMoves = new ArrayList<>();
-        // remove moves that would lead us in check
-        for (Move move : moves){
-            move.move |= MoveParser.ENPASSANT_MASK;
-
-            MoveOrganiser.makeMoveMaster(board, move);
-            boolean enPassantWouldLeadToCheck = CheckChecker.boardInCheck(board, white);
-            MoveUnmaker.unMakeMoveMaster(board);
-
-            if (enPassantWouldLeadToCheck){
-                continue;
-            }
-            safeEPMoves.add(move);
-        }
-        return safeEPMoves;
-    }
-
-
-    private static long extractFileFromInt(int file){
-        if (file == 1){
-            return BitBoards.FILE_A;
-        }
-        else if (file == 2){
-            return BitBoards.FILE_B;
-        }
-        else if (file == 3){
-            return BitBoards.FILE_C;
-        }
-        else if (file == 4){
-            return BitBoards.FILE_D;
-        }
-        else if (file == 5){
-            return BitBoards.FILE_E;
-        }
-        else if (file == 6){
-            return BitBoards.FILE_F;
-        }
-        else if (file == 7){
-            return BitBoards.FILE_G;
-        }
-        else if (file == 8){
-            return BitBoards.FILE_H;
-        }
-        throw new RuntimeException("Incorrect File gotten from Stack.");
-    }
-
-}
Index: src/main/java/javacode/chessprogram/moveGeneration/MoveGeneratorKnight.java
===================================================================
--- src/main/java/javacode/chessprogram/moveGeneration/MoveGeneratorKnight.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/javacode/chessprogram/moveGeneration/MoveGeneratorKnight.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
@@ -1,55 +0,0 @@
-package javacode.chessprogram.moveGeneration;
-
-import javacode.chessprogram.chess.BitIndexing;
-import javacode.chessprogram.chess.Chessboard;
-import javacode.chessprogram.chess.Move;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import static javacode.chessprogram.chess.BitExtractor.getAllPieces;
-
-class MoveGeneratorKnight {
-
-    static List<Move> masterKnightCaptures(Chessboard board, boolean white,
-                                                  long ignoreThesePieces, long legalCaptures){
-        long ans = 0, knights;
-        List<Move> moves = new ArrayList<>();
-        if (white){
-            knights = board.WHITE_KNIGHTS;
-        }
-        else {
-            knights = board.BLACK_KNIGHTS;
-        }
-
-        List<Long> allKnights = getAllPieces(knights, ignoreThesePieces);
-        for (Long piece : allKnights){
-            long jumpingMoves = PieceMoveKnight.singleKnightTable(board, piece, white, legalCaptures);
-            int indexOfPiece = BitIndexing.getIndexOfFirstPiece(piece);
-            moves.addAll(MoveGenerationUtilities.movesFromAttackBoard(jumpingMoves, indexOfPiece));
-        }
-
-        return moves;
-    }
-
-    static List<Move> masterKnightPushes(Chessboard board, boolean white,
-                                                long ignoreThesePieces, long legalPushes){
-        long ans = 0, knights;
-        List<Move> moves = new ArrayList<>();
-        if (white){
-            knights = board.WHITE_KNIGHTS;
-        }
-        else {
-            knights = board.BLACK_KNIGHTS;
-        }
-
-        List<Long> allUnpinnedKnights = getAllPieces(knights, ignoreThesePieces);
-        for (Long piece : allUnpinnedKnights){
-            long jumpingMoves = PieceMoveKnight.singleKnightTable(board, piece, white, legalPushes);
-            int indexOfPiece = BitIndexing.getIndexOfFirstPiece(piece);
-            moves.addAll(MoveGenerationUtilities.movesFromAttackBoard(jumpingMoves, indexOfPiece));
-        }
-        return moves;
-    }
-
-}
Index: src/main/java/javacode/chessprogram/moveGeneration/MoveGeneratorMaster.java
===================================================================
--- src/main/java/javacode/chessprogram/moveGeneration/MoveGeneratorMaster.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/javacode/chessprogram/moveGeneration/MoveGeneratorMaster.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
@@ -1,200 +0,0 @@
-package javacode.chessprogram.moveGeneration;
-
-import javacode.chessprogram.bitboards.BitBoards;
-import javacode.chessprogram.check.CheckChecker;
-import javacode.chessprogram.check.CheckMoveOrganiser;
-import javacode.chessprogram.check.KingLegalMoves;
-import javacode.chessprogram.chess.BitExtractor;
-import javacode.chessprogram.chess.Chessboard;
-import javacode.chessprogram.chess.Move;
-
-import java.util.ArrayList;
-import java.util.List;
-
-public class MoveGeneratorMaster {
-
-    public static int numberOfChecks = 0;
-    public static int numberOfCheckMates = 0;
-    public static int numberOfStaleMates = 0;
-
-    public static List<Move> generateLegalMoves(Chessboard board, boolean white) {
-        List<Move> moves = generateLegalMovesHelper(board, white);
-
-        if (moves.size() == 0) {
-            long myKing = (white) ? board.WHITE_KING : board.BLACK_KING;
-            int numberOfCheckers = CheckChecker.numberOfPiecesThatLegalThreatenSquare(board, white, myKing);
-            if (numberOfCheckers > 0) {
-//                System.out.println("Checkmate");
-                numberOfCheckMates++;
-            }
-            else {
-//                System.out.println("Stalemate");
-                numberOfStaleMates++;
-            }
-        }
-        return moves;
-    }
-
-    private static List<Move> generateLegalMovesHelper(Chessboard board, boolean white) {
-        long myKing = (white) ? board.WHITE_KING : board.BLACK_KING;
-        int numberOfCheckers = CheckChecker.numberOfPiecesThatLegalThreatenSquare(board, white, myKing);
-
-        if (numberOfCheckers > 1){
-            numberOfChecks++;
-            return KingLegalMoves.kingLegalMovesOnly(board, white);
-        }
-        else if (numberOfCheckers == 1){
-            numberOfChecks++;
-            return CheckMoveOrganiser.evadeCheckMovesMaster(board, white);
-        }
-
-        else {
-            return notInCheckMoves(board, white);
-        }
-
-    }
-
-
-    private static List<Move> notInCheckMoves(Chessboard board, boolean whiteTurn){
-        List<Move> moves = new ArrayList<>();
-
-        long ENEMY_PIECES = (whiteTurn) ? board.ALL_BLACK_PIECES() : board.ALL_WHITE_PIECES();
-        long ALL_EMPTY_SQUARES = ~board.ALL_PIECES();
-        long myKing = (whiteTurn) ? board.WHITE_KING : board.BLACK_KING;
-        long pinnedPieces = PinnedManager.whichPiecesArePinned(board, whiteTurn, myKing);
-        long PENULTIMATE_RANK = whiteTurn ? BitBoards.RANK_SEVEN : BitBoards.RANK_TWO;
-        long myPawns = whiteTurn ? board.WHITE_PAWNS : board.BLACK_PAWNS;
-        long promotablePawns = myPawns & PENULTIMATE_RANK;
-        long pinnedPiecesAndPromotingPawns = pinnedPieces | promotablePawns;
-
-        moves.addAll(MoveGeneratorCastling.generateCastlingMoves(board, whiteTurn));
-
-        moves.addAll(KingLegalMoves.kingLegalMovesOnly(board, whiteTurn));
-
-        if (pinnedPieces == 0){
-            List<Move> regularPiecesMoves = MoveGeneratorPseudo.generateAllMovesWithoutKing
-                    (board, whiteTurn, promotablePawns, ALL_EMPTY_SQUARES, ENEMY_PIECES);
-
-            moves.addAll(regularPiecesMoves);
-
-            moves.addAll(MoveGeneratorEnPassant.generateEnPassantMoves
-                    (board, whiteTurn, promotablePawns, ALL_EMPTY_SQUARES, ENEMY_PIECES));
-
-            moves.addAll(MoveGeneratorPromotion.generatePromotionMoves
-                    (board, whiteTurn, 0, ALL_EMPTY_SQUARES, ENEMY_PIECES));
-
-            return moves;
-        }
-
-        moves.addAll(MoveGeneratorEnPassant.generateEnPassantMoves
-                (board, whiteTurn, pinnedPiecesAndPromotingPawns, ALL_EMPTY_SQUARES, ENEMY_PIECES));
-
-        moves.addAll(MoveGeneratorPromotion.generatePromotionMoves
-                (board, whiteTurn, pinnedPieces, ALL_EMPTY_SQUARES, ENEMY_PIECES));
-        
-        List<Move> pinnedPiecesMoves = pinnedMoveManager(board, whiteTurn, pinnedPieces, myKing);
-        moves.addAll(pinnedPiecesMoves);
-
-        List<Move> unpinnedPiecesMoves = MoveGeneratorPseudo.generateAllMovesWithoutKing
-                (board, whiteTurn, pinnedPiecesAndPromotingPawns, ~board.ALL_PIECES(), ENEMY_PIECES);
-        moves.addAll(unpinnedPiecesMoves);
-
-        return moves;
-    }
-
-
-    private static List<Move> pinnedMoveManager(Chessboard board, boolean whiteTurn,
-                                               long pinnedPieces, long squareWeArePinnedTo){
-        List<Move> moves = new ArrayList<>();
-        List<Long> allPinnedPieces = BitExtractor.getAllPieces(pinnedPieces, 0);
-
-        long ans = 0, pawns, knights, bishops, rooks, queens;
-        if (whiteTurn){
-            pawns = board.WHITE_PAWNS;
-            knights = board.WHITE_KNIGHTS;
-            bishops = board.WHITE_BISHOPS;
-            rooks = board.WHITE_ROOKS;
-            queens = board.WHITE_QUEEN;
-        }
-        else {
-            pawns = board.BLACK_PAWNS;
-            knights = board.BLACK_KNIGHTS;
-            bishops = board.BLACK_BISHOPS;
-            rooks = board.BLACK_ROOKS;
-            queens = board.BLACK_QUEEN;
-        }
-
-        long FRIENLDY_PIECES = (whiteTurn) ? board.ALL_WHITE_PIECES() : board.ALL_BLACK_PIECES();
-        long ENEMY_PIECES = (whiteTurn) ? board.ALL_BLACK_PIECES() : board.ALL_WHITE_PIECES();
-
-        for (long pinnedPiece : allPinnedPieces){
-            long infiniteRay = CheckMoveOrganiser.extractInfiniteRayFromTwoPieces(board, squareWeArePinnedTo, pinnedPiece);
-            long pushMask = infiniteRay & ~(board.ALL_BLACK_PIECES() | board.ALL_WHITE_PIECES());
-            long captureMask = infiniteRay & ENEMY_PIECES;
-
-            if ((pinnedPiece & knights) != 0) {
-                // knights cannot move cardinally or diagonally, and so cannot move while pinned
-                continue;
-            }
-            if ((pinnedPiece & pawns) != 0) {
-
-                long PENULTIMATE_RANK = whiteTurn ? BitBoards.RANK_SEVEN : BitBoards.RANK_TWO;
-                long allButPinnedFriends = FRIENLDY_PIECES & ~pinnedPiece;
-                
-                if ((pinnedPiece & PENULTIMATE_RANK) == 0) {
-
-                    long singlePawnAllPushes = PieceMovePawns.singlePawnPushes(board, pinnedPiece, whiteTurn, pushMask);
-                    List<Move> pawnPushes = MoveGenerationUtilities.movesFromAttackBoardLong(singlePawnAllPushes, pinnedPiece);
-                    moves.addAll(pawnPushes);
-
-                    long singlePawnAllCaptures = PieceMovePawns.singlePawnCaptures(board, pinnedPiece, whiteTurn, captureMask);
-                    List<Move> pawnCaptures = MoveGenerationUtilities.movesFromAttackBoardLong(singlePawnAllCaptures, pinnedPiece);
-                    moves.addAll(pawnCaptures);
-                    
-                    // a pinned pawn may still EP
-                    moves.addAll(MoveGeneratorEnPassant.generateEnPassantMoves
-                            (board, whiteTurn, allButPinnedFriends, pushMask, captureMask));
-                }
-                else {
-                    // a pinned pawn may still promote, through a capture of the pinner
-                    moves.addAll(MoveGeneratorPromotion.generatePromotionMoves
-                            (board, whiteTurn, allButPinnedFriends, pushMask, captureMask));
-                }
-                continue;
-            }
-            if ((pinnedPiece & bishops) != 0) {
-                long singleBishopsAllPushes = PieceMoveSliding.singleBishopPushes(board, pinnedPiece, whiteTurn, pushMask);
-                List<Move> bishopMovesPushes = MoveGenerationUtilities.movesFromAttackBoardLong(singleBishopsAllPushes, pinnedPiece);
-                
-                moves.addAll(bishopMovesPushes);
-
-                long singleBishopAllCaptures = PieceMoveSliding.singleBishopCaptures(board, pinnedPiece, whiteTurn, captureMask);
-                List<Move> bishopMovesCaptures = MoveGenerationUtilities.movesFromAttackBoardLong(singleBishopAllCaptures, pinnedPiece);
-                moves.addAll(bishopMovesCaptures);
-                continue;
-            }
-            if ((pinnedPiece & rooks) != 0) {
-                long singleRookAllPushes = PieceMoveSliding.singleRookPushes(board, pinnedPiece, whiteTurn, pushMask);
-                List<Move> rookMovesPushes = MoveGenerationUtilities.movesFromAttackBoardLong(singleRookAllPushes, pinnedPiece);
-                moves.addAll(rookMovesPushes);
-
-                long singleRookAllCaptures = PieceMoveSliding.singleRookCaptures(board, pinnedPiece, whiteTurn, captureMask);
-                List<Move> rookMovesCaptures = MoveGenerationUtilities.movesFromAttackBoardLong(singleRookAllCaptures, pinnedPiece);
-                moves.addAll(rookMovesCaptures);
-                continue;
-            }
-            if ((pinnedPiece & queens) != 0) {
-                long singleQueenAllPushes = PieceMoveSliding.singleQueenPushes(board, pinnedPiece, whiteTurn, pushMask);
-                List<Move> queenPushes = MoveGenerationUtilities.movesFromAttackBoardLong(singleQueenAllPushes, pinnedPiece);
-                moves.addAll(queenPushes);
-
-                long singleQueenAllCaptures = PieceMoveSliding.singleQueenCaptures(board, pinnedPiece, whiteTurn, captureMask);
-                List<Move> queenCaptures = MoveGenerationUtilities.movesFromAttackBoardLong(singleQueenAllCaptures, pinnedPiece);
-                moves.addAll(queenCaptures);
-            }
-        }
-        return moves;
-    }
-
-
-}
Index: src/main/java/javacode/chessprogram/moveGeneration/MoveGeneratorPawns.java
===================================================================
--- src/main/java/javacode/chessprogram/moveGeneration/MoveGeneratorPawns.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/javacode/chessprogram/moveGeneration/MoveGeneratorPawns.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
@@ -1,51 +0,0 @@
-package javacode.chessprogram.moveGeneration;
-
-import javacode.chessprogram.chess.BitIndexing;
-import javacode.chessprogram.chess.Chessboard;
-import javacode.chessprogram.chess.Move;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import static javacode.chessprogram.chess.BitExtractor.getAllPieces;
-
-class MoveGeneratorPawns {
-
-    static List<Move> masterPawnPushes(Chessboard board, boolean white,
-                                              long ignoreThesePieces, long legalPushes){
-        return masterMovePawns(board, white, ignoreThesePieces, legalPushes, 0);
-    }
-
-
-    public static List<Move> masterPawnCaptures(Chessboard board, boolean white,
-                                                long ignoreThesePieces, long legalCaptures){
-        return masterMovePawns(board, white, ignoreThesePieces, 0, legalCaptures);
-    }
-
-    private static List<Move> masterMovePawns(Chessboard board, boolean white,
-                                              long ignoreThesePieces, long legalPushes, long legalCaptures){
-        long ans = 0, pawns;
-        List<Move> moves = new ArrayList<>();
-        if (white){
-            pawns = board.WHITE_PAWNS;
-        }
-        else {
-            pawns = board.BLACK_PAWNS;
-        }
-
-        List<Long> allPawns = getAllPieces(pawns, ignoreThesePieces);
-        for (Long piece : allPawns){
-            long pawnMoves = PieceMovePawns.singlePawnPushes(board, piece, white, legalPushes);
-            int indexOfPiece = BitIndexing.getIndexOfFirstPiece(piece);
-            moves.addAll(MoveGenerationUtilities.movesFromAttackBoard(pawnMoves, indexOfPiece));
-        }
-
-        for (Long piece : allPawns){
-            long pawnMoves = PieceMovePawns.singlePawnCaptures(board, piece, white, legalCaptures);
-            int indexOfPiece = BitIndexing.getIndexOfFirstPiece(piece);
-            moves.addAll(MoveGenerationUtilities.movesFromAttackBoard(pawnMoves, indexOfPiece));
-        }
-        return moves;
-    }
-
-}
Index: src/main/java/javacode/chessprogram/moveGeneration/MoveGeneratorPromotion.java
===================================================================
--- src/main/java/javacode/chessprogram/moveGeneration/MoveGeneratorPromotion.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/javacode/chessprogram/moveGeneration/MoveGeneratorPromotion.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
@@ -1,142 +0,0 @@
-package javacode.chessprogram.moveGeneration;
-
-import javacode.chessprogram.bitboards.BitBoards;
-import javacode.chessprogram.chess.BitIndexing;
-import javacode.chessprogram.chess.Chessboard;
-import javacode.chessprogram.chess.Copier;
-import javacode.chessprogram.chess.Move;
-import javacode.chessprogram.moveMaking.MoveParser;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import static javacode.chessprogram.chess.BitExtractor.getAllPieces;
-
-public class MoveGeneratorPromotion {
-
-    public static List<Move> generatePromotionMoves(Chessboard board, boolean white,
-                                                    long ignoreThesePieces, long legalPushes, long legalCaptures){
-        List<Move> moves = new ArrayList<>();
-        moves.addAll(generatePromotionPushes(board, white, ignoreThesePieces, legalPushes));
-        moves.addAll(generatePromotionCaptures(board, white, ignoreThesePieces, legalCaptures));
-        return moves;
-    }
-
-    private static List<Move> generatePromotionPushes(Chessboard board, boolean white, 
-                                                     long ignoreThesePieces, long legalPushes){
-        List<Move> moves = new ArrayList<>();
-        long legalPieces = ~ignoreThesePieces;
-
-        if (white){
-            long PENULTIMATE_RANK = BitBoards.RANK_SEVEN;
-            long promotablePawns = board.WHITE_PAWNS & PENULTIMATE_RANK & legalPieces;
-            if ((promotablePawns) != 0) {
-                List<Long> allPromotablePawns = getAllPieces(promotablePawns, 0);
-                for (long piece : allPromotablePawns) {
-                    long pawnMoves = PieceMovePawns.singlePawnPushes(board, piece, true, (BitBoards.RANK_EIGHT & legalPushes));
-                    if (pawnMoves != 0) {
-                        int indexOfPiece = BitIndexing.getIndexOfFirstPiece(piece);
-                        Move move = MoveGenerationUtilities.movesFromAttackBoard(pawnMoves, indexOfPiece).get(0);
-                        move.move |= MoveParser.PROMOTION_MASK;
-                        moves.addAll(promotingMovesByPiece(move));
-                    }
-                }
-            }
-        }
-
-        else {
-            long PENULTIMATE_RANK = BitBoards.RANK_TWO;
-            long promotablePawns = board.BLACK_PAWNS & PENULTIMATE_RANK & legalPieces;
-            if ((promotablePawns) != 0) {
-                List<Long> allPromotablePawns = getAllPieces(promotablePawns, 0);
-                for (long piece : allPromotablePawns) {
-                    long pawnMoves = PieceMovePawns.singlePawnPushes(board, piece, false, (BitBoards.RANK_ONE & legalPushes));
-                    if (pawnMoves != 0) {
-                        int indexOfPiece = BitIndexing.getIndexOfFirstPiece(piece);
-
-                        Move move = MoveGenerationUtilities.movesFromAttackBoard(pawnMoves, indexOfPiece).get(0);
-                        move.move |= MoveParser.PROMOTION_MASK;
-                        moves.addAll(promotingMovesByPiece(move));
-                    }
-                }
-            }
-        }
-
-        return moves;
-    }
-
-    private static List<Move> generatePromotionCaptures(Chessboard board, boolean white,
-                                                       long ignoreThesePieces, long legalCaptures){
-        List<Move> moves = new ArrayList<>();
-        long legalPieces = ~ignoreThesePieces;
-
-        if (white){
-            long PENULTIMATE_RANK = BitBoards.RANK_SEVEN;
-            long promotablePawns = board.WHITE_PAWNS & PENULTIMATE_RANK & legalPieces;
-            long promotionCaptureSquares = BitBoards.RANK_EIGHT & board.ALL_BLACK_PIECES();
-            if ((promotablePawns) != 0) {
-                List<Long> allPromotablePawns = getAllPieces(promotablePawns, 0);
-                for (long piece : allPromotablePawns) {
-                    long pawnMoves = PieceMovePawns.singlePawnCaptures(board, piece, true, (promotionCaptureSquares & legalCaptures));
-                    if (pawnMoves != 0) {
-                        int indexOfPiece = BitIndexing.getIndexOfFirstPiece(piece);
-                        List<Move> unflaggedCaptures = MoveGenerationUtilities.movesFromAttackBoard(pawnMoves, indexOfPiece);
-
-                        for (Move move : unflaggedCaptures) {
-                            move.move |= MoveParser.PROMOTION_MASK;
-                            moves.addAll(promotingMovesByPiece(move));
-                        }
-                    }
-                }
-            }
-        }
-
-        else {
-            long PENULTIMATE_RANK = BitBoards.RANK_TWO;
-            long promotablePawns = board.BLACK_PAWNS & PENULTIMATE_RANK & legalPieces;
-            long promotionCaptureSquares = BitBoards.RANK_ONE & board.ALL_WHITE_PIECES();
-            if ((promotablePawns) != 0) {
-                List<Long> allPromotablePawns = getAllPieces(promotablePawns, 0);
-                for (long piece : allPromotablePawns) {
-                    long pawnMoves = PieceMovePawns.singlePawnCaptures(board, piece, false, (promotionCaptureSquares & legalCaptures));
-                    if (pawnMoves != 0) {
-                        int indexOfPiece = BitIndexing.getIndexOfFirstPiece(piece);
-                        List<Move> unflaggedCaptures = MoveGenerationUtilities.movesFromAttackBoard(pawnMoves, indexOfPiece);
-
-                        for (Move move : unflaggedCaptures) {
-                            move.move |= MoveParser.PROMOTION_MASK;
-                            moves.addAll(promotingMovesByPiece(move));
-                        }
-                    }
-                }
-            }
-        }
-
-        return moves;
-    }
-
-
-
-
-    private static List<Move> promotingMovesByPiece(Move move){
-        List<Move> moves = new ArrayList<>();
-
-        Move moveK = Copier.copyMove(move);
-        moveK.move |= MoveParser.KNIGHT_PROMOTION_MASK;
-        moves.add(moveK);
-
-        Move moveB = Copier.copyMove(move);
-        moveB.move |= MoveParser.BISHOP_PROMOTION_MASK;
-        moves.add(moveB);
-
-        Move moveR = Copier.copyMove(move);
-        moveR.move |= MoveParser.ROOK_PROMOTION_MASK;
-        moves.add(moveR);
-
-        Move moveQ = Copier.copyMove(move);
-        moveQ.move |= MoveParser.QUEEN_PROMOTION_MASK;
-        moves.add(moveQ);
-
-        return moves;
-    }
-}
Index: src/main/java/javacode/chessprogram/moveGeneration/MoveGeneratorPseudo.java
===================================================================
--- src/main/java/javacode/chessprogram/moveGeneration/MoveGeneratorPseudo.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/javacode/chessprogram/moveGeneration/MoveGeneratorPseudo.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
@@ -1,60 +0,0 @@
-package javacode.chessprogram.moveGeneration;
-
-import javacode.chessprogram.chess.Chessboard;
-import javacode.chessprogram.chess.Move;
-
-import java.util.ArrayList;
-import java.util.List;
-
-public class MoveGeneratorPseudo {
-
-    public static List<Move> generateAllMovesWithoutKing(Chessboard board, boolean whiteTurn,
-                                                         long ignoreThesePieces, long legalPushes, long legalCaptures){
-        List<Move> moves = new ArrayList<>();
-        if (legalCaptures != 0) {
-            moves.addAll(generateAllCapturesWithoutKing(board, whiteTurn, ignoreThesePieces, legalCaptures));
-        }
-        
-        if (legalPushes != 0) {
-            moves.addAll(generateAllPushesWithoutKing(board, whiteTurn, ignoreThesePieces, legalPushes));
-        }
-
-        return moves;
-    }
-
-    private static List<Move> generateAllPushesWithoutKing(Chessboard board, boolean whiteTurn,
-                                                          long ignoreThesePieces, long legalPushes){
-        List<Move> moves = new ArrayList<>();
-        moves.addAll(MoveGeneratorKnight.masterKnightPushes(board, whiteTurn, ignoreThesePieces, legalPushes));
-        moves.addAll(MoveGeneratorSliding.masterSlidingPushes(board, whiteTurn, ignoreThesePieces, legalPushes));
-        moves.addAll(MoveGeneratorPawns.masterPawnPushes(board, whiteTurn, ignoreThesePieces, legalPushes));
-
-        return moves;
-    }
-
-    private static List<Move> generateAllCapturesWithoutKing(Chessboard board, boolean whiteTurn,
-                                                             long ignoreThesePieces, long legalCaptures){
-        List<Move> moves = new ArrayList<>();
-        moves.addAll(MoveGeneratorKnight.masterKnightCaptures(board, whiteTurn, ignoreThesePieces, legalCaptures));
-        moves.addAll(MoveGeneratorSliding.masterSlidingCaptures(board, whiteTurn, ignoreThesePieces, legalCaptures));
-        moves.addAll(MoveGeneratorPawns.masterPawnCaptures(board, whiteTurn, ignoreThesePieces, legalCaptures));
-
-        return moves;
-    }
-
-    public static long generatePseudoCaptureTable(Chessboard board, boolean whiteTurn,
-                                                  long ignoreThesePieces, long legalPushes, long legalCaptures){
-        long ans = 0;
-
-        ans |= PieceMoveKing.masterAttackTableKing(board, whiteTurn, ignoreThesePieces, legalPushes, legalCaptures);
-        
-        ans |= PieceMoveKnight.masterAttackTableKnights(board, whiteTurn, ignoreThesePieces, legalPushes, legalCaptures);
-
-        ans |= PieceMoveSliding.masterAttackTableSliding(board, whiteTurn, ignoreThesePieces, legalPushes, legalCaptures);
-
-        ans |= PieceMovePawns.masterPawnCapturesTable(board, whiteTurn, ignoreThesePieces, legalCaptures);
-
-        return ans;
-    }
-
-}
Index: src/main/java/javacode/chessprogram/moveGeneration/MoveGeneratorSliding.java
===================================================================
--- src/main/java/javacode/chessprogram/moveGeneration/MoveGeneratorSliding.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/javacode/chessprogram/moveGeneration/MoveGeneratorSliding.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
@@ -1,136 +0,0 @@
-package javacode.chessprogram.moveGeneration;
-
-import javacode.chessprogram.chess.BitIndexing;
-import javacode.chessprogram.chess.Chessboard;
-import javacode.chessprogram.chess.Move;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import static javacode.chessprogram.chess.BitExtractor.getAllPieces;
-
-class MoveGeneratorSliding {
-
-    static List<Move> masterSlidingPushes (Chessboard board, boolean white,
-                                                  long ignoreThesePieces, long legalPushes){
-        long ans = 0, bishops, rooks, queens;
-        List<Move> moves = new ArrayList<>();
-        if (white){
-            bishops = board.WHITE_BISHOPS;
-            rooks = board.WHITE_ROOKS;
-            queens = board.WHITE_QUEEN;
-        }
-        else {
-            bishops = board.BLACK_BISHOPS;
-            rooks = board.BLACK_ROOKS;
-            queens = board.BLACK_QUEEN;
-        }
-
-        List<Long> allBishops = getAllPieces(bishops, ignoreThesePieces);
-        for (Long piece : allBishops){
-            long slidingMoves = PieceMoveSliding.singleBishopPushes(board, piece, white, legalPushes);
-            int indexOfPiece = BitIndexing.getIndexOfFirstPiece(piece);
-            moves.addAll(MoveGenerationUtilities.movesFromAttackBoard(slidingMoves, indexOfPiece));
-        }
-        List<Long> allRooks = getAllPieces(rooks, ignoreThesePieces);
-        for (Long piece : allRooks){
-            long slidingMoves = PieceMoveSliding.singleRookPushes(board, piece, white, legalPushes);
-            int indexOfPiece = BitIndexing.getIndexOfFirstPiece(piece);
-            moves.addAll(MoveGenerationUtilities.movesFromAttackBoard(slidingMoves, indexOfPiece));
-        }
-        List<Long> allQueens = getAllPieces(queens, ignoreThesePieces);
-        for (Long piece : allQueens){
-            long slidingMoves = PieceMoveSliding.singleQueenPushes(board, piece, white, legalPushes);
-            int indexOfPiece = BitIndexing.getIndexOfFirstPiece(piece);
-            moves.addAll(MoveGenerationUtilities.movesFromAttackBoard(slidingMoves, indexOfPiece));
-        }
-        return moves;
-    }
-
-    static List<Move> masterSlidingCaptures (Chessboard board, boolean white,
-                                                    long ignoreThesePieces, long legalCaptures){
-        long ans = 0, bishops, rooks, queens;
-        List<Move> moves = new ArrayList<>();
-        if (white){
-            bishops = board.WHITE_BISHOPS;
-            rooks = board.WHITE_ROOKS;
-            queens = board.WHITE_QUEEN;
-        }
-        else {
-            bishops = board.BLACK_BISHOPS;
-            rooks = board.BLACK_ROOKS;
-            queens = board.BLACK_QUEEN;
-        }
-
-        List<Long> allBishops = getAllPieces(bishops, ignoreThesePieces);
-        for (Long piece : allBishops){
-            long slidingMoves = PieceMoveSliding.singleBishopCaptures(board, piece, white, legalCaptures);
-            int indexOfPiece = BitIndexing.getIndexOfFirstPiece(piece);
-            moves.addAll(MoveGenerationUtilities.movesFromAttackBoard(slidingMoves, indexOfPiece));
-        }
-        List<Long> allRooks = getAllPieces(rooks, ignoreThesePieces);
-        for (Long piece : allRooks){
-            long slidingMoves = PieceMoveSliding.singleRookCaptures(board, piece, white, legalCaptures);
-            int indexOfPiece = BitIndexing.getIndexOfFirstPiece(piece);
-            moves.addAll(MoveGenerationUtilities.movesFromAttackBoard(slidingMoves, indexOfPiece));
-        }
-        List<Long> allQueens = getAllPieces(queens, ignoreThesePieces);
-        for (Long piece : allQueens){
-            long slidingMoves = PieceMoveSliding.singleQueenCaptures(board, piece, white, legalCaptures);
-            int indexOfPiece = BitIndexing.getIndexOfFirstPiece(piece);
-            moves.addAll(MoveGenerationUtilities.movesFromAttackBoard(slidingMoves, indexOfPiece));
-        }
-        return moves;
-    }
-
-    public static List<Move> masterMoveSliding (Chessboard board, boolean white,
-                                                long ignoreThesePieces, long legalPushes, long legalCaptures){
-        long ans = 0, bishops, rooks, queens;
-        List<Move> moves = new ArrayList<>();
-        if (white){
-            bishops = board.WHITE_BISHOPS;
-            rooks = board.WHITE_ROOKS;
-            queens = board.WHITE_QUEEN;
-        }
-        else {
-            bishops = board.BLACK_BISHOPS;
-            rooks = board.BLACK_ROOKS;
-            queens = board.BLACK_QUEEN;
-        }
-
-        List<Long> allBishops = getAllPieces(bishops, ignoreThesePieces);
-        for (Long piece : allBishops){
-            int indexOfPiece = BitIndexing.getIndexOfFirstPiece(piece);
-
-            long slidingPushes = PieceMoveSliding.singleBishopPushes(board, piece, white, legalPushes);
-            moves.addAll(MoveGenerationUtilities.movesFromAttackBoard(slidingPushes, indexOfPiece));
-
-            long slidingCaptures = PieceMoveSliding.singleBishopCaptures(board, piece, white, legalCaptures);
-            moves.addAll(MoveGenerationUtilities.movesFromAttackBoard(slidingCaptures, indexOfPiece));
-        }
-
-        List<Long> allRooks = getAllPieces(rooks, ignoreThesePieces);
-        for (Long piece : allRooks){
-            int indexOfPiece = BitIndexing.getIndexOfFirstPiece(piece);
-
-            long rookPushes = PieceMoveSliding.singleRookPushes(board, piece, white, legalPushes);
-            moves.addAll(MoveGenerationUtilities.movesFromAttackBoard(rookPushes, indexOfPiece));
-
-            long rookCaptures = PieceMoveSliding.singleRookCaptures(board, piece, white, legalCaptures);
-            moves.addAll(MoveGenerationUtilities.movesFromAttackBoard(rookCaptures, indexOfPiece));
-        }
-
-        List<Long> allQueens = getAllPieces(queens, ignoreThesePieces);
-        for (Long piece : allQueens){
-            int indexOfPiece = BitIndexing.getIndexOfFirstPiece(piece);
-
-            long queenPushes = PieceMoveSliding.singleQueenPushes(board, piece, white, legalPushes);
-            moves.addAll(MoveGenerationUtilities.movesFromAttackBoard(queenPushes, indexOfPiece));
-
-            long queenCaptures = PieceMoveSliding.singleQueenCaptures(board, piece, white, legalCaptures);
-            moves.addAll(MoveGenerationUtilities.movesFromAttackBoard(queenCaptures, indexOfPiece));
-        }
-        return moves;
-    }
-
-}
Index: src/main/java/javacode/chessprogram/moveMaking/MoveMakingUtilities.java
===================================================================
--- src/main/java/javacode/chessprogram/moveMaking/MoveMakingUtilities.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/javacode/chessprogram/moveMaking/MoveMakingUtilities.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
@@ -1,23 +0,0 @@
-package javacode.chessprogram.moveMaking;
-
-import javacode.chessprogram.chess.Chessboard;
-
-class MoveMakingUtilities {
-
-    static void removePieces (Chessboard board, long sourceSquare, long destinationSquare){
-        long mask = ~(sourceSquare | destinationSquare);
-        board.WHITE_PAWNS &= mask;
-        board.WHITE_KNIGHTS &= mask;
-        board.WHITE_BISHOPS &= mask;
-        board.WHITE_ROOKS &= mask;
-        board.WHITE_QUEEN &= mask;
-        board.WHITE_KING &= mask;
-        board.BLACK_PAWNS &= mask;
-        board.BLACK_KNIGHTS &= mask;
-        board.BLACK_BISHOPS &= mask;
-        board.BLACK_ROOKS &= mask;
-        board.BLACK_QUEEN &= mask;
-        board.BLACK_KING &= mask;
-    }
-
-}
Index: src/main/java/javacode/chessprogram/moveMaking/MoveOrganiser.java
===================================================================
--- src/main/java/javacode/chessprogram/moveMaking/MoveOrganiser.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/javacode/chessprogram/moveMaking/MoveOrganiser.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
@@ -1,188 +0,0 @@
-package javacode.chessprogram.moveMaking;
-
-import javacode.chessprogram.bitboards.BitBoards;
-import javacode.chessprogram.chess.Chessboard;
-import javacode.chessprogram.chess.Move;
-
-import static javacode.chessprogram.chess.BitManipulations.newPieceOnSquare;
-import static javacode.chessprogram.moveMaking.StackMoveData.SpecialMove.*;
-
-public class MoveOrganiser {
-
-    public static void flipTurn(Chessboard board){
-        board.setWhiteTurn(!board.isWhiteTurn());
-    }
-
-    public static int captures = 0;
-    public static int promotions = 0;
-    public static int castlings = 0;
-    public static int epNum = 0;
-    
-    public static void makeMoveMaster(Chessboard board, Move move) {
-
-        if(move== null){
-//            System.out.println(Art.boardArt(board));
-            System.out.println("null move passed to makeMove Master");
-            return;
-        }
-        
-        if (MoveParser.isSpecialMove(move)){
-            if (MoveParser.isCastlingMove(move)) {
-                castlings++;
-                StackMoveData stackMoveData = new StackMoveData(move, board, 50, CASTLING);
-                board.moveStack.push(stackMoveData);
-                MoveCastling.makeCastlingMove(board, move);
-                MoveCastling.castleFlagManager(board, move);
-            }
-
-            else if (MoveParser.isEnPassantMove(move)){
-                epNum++;
-                StackMoveData stackMoveData = new StackMoveData
-                        (move, board, 50, ENPASSANTCAPTURE);
-                board.moveStack.push(stackMoveData);
-                MoveEnPassant.makeEnPassantMove(board, move);
-                MoveCastling.castleFlagManager(board, move);
-            }
-
-            else if (MoveParser.isPromotionMove(move)){
-                int destination = move.destinationIndex;
-                long destSquare = newPieceOnSquare(destination);
-                boolean capturePromotion = (destSquare & board.ALL_PIECES()) != 0;
-                if (capturePromotion) {
-                    long destinationPiece = newPieceOnSquare(move.destinationIndex);
-                    int takenPiece = whichPieceOnSquare(board, destinationPiece);
-
-                    promotions++;
-                    captures++;
-                    StackMoveData stackMoveData = new StackMoveData(move, board, 50, PROMOTION, takenPiece);
-                    board.moveStack.push(stackMoveData);
-                    MovePromotion.makePromotingMove(board, move);
-                    MoveCastling.castleFlagManager(board, move);
-                }
-                else {
-                    promotions++;
-                    StackMoveData stackMoveData = new StackMoveData(move, board, 50, PROMOTION);
-                    board.moveStack.push(stackMoveData);
-                    MovePromotion.makePromotingMove(board, move);
-                    MoveCastling.castleFlagManager(board, move);
-                }
-
-            }
-        }
-
-
-        else {
-            int destination = move.destinationIndex;
-            long destSquare = newPieceOnSquare(destination);
-            boolean captureMove = (destSquare & board.ALL_PIECES()) != 0;
-            if (captureMove) {
-                captures++;
-                long destinationPiece = newPieceOnSquare(move.destinationIndex);
-                int takenPiece = whichPieceOnSquare(board, destinationPiece);
-                StackMoveData stackMoveData = new StackMoveData
-                        (move, board, 50, BASICCAPTURE, takenPiece);
-                board.moveStack.push(stackMoveData);
-                MoveRegular.makeRegularMove(board, move);
-                MoveCastling.castleFlagManager(board, move);
-            }
-            
-            else if (enPassantPossibility(board, move)){
-                int sourceAsPiece = move.getSourceAsPieceIndex();
-                int whichFile = 8 - sourceAsPiece % 8;
-                StackMoveData stackMoveData = new StackMoveData
-                        (move, board, 50, whichFile, ENPASSANTVICTIM);
-                board.moveStack.push(stackMoveData);
-                MoveRegular.makeRegularMove(board, move);
-                MoveCastling.castleFlagManager(board, move);
-            }
-
-            else {
-                long destinationPiece = newPieceOnSquare(move.getSourceAsPieceIndex());
-                int movingPiece = whichPieceOnSquare(board, destinationPiece);
-                if (movingPiece == 1 || movingPiece == 7){
-                    StackMoveData stackMoveData = new StackMoveData
-                            (move, board, 50, BASICLOUDPUSH);
-                    board.moveStack.push(stackMoveData);
-                    MoveRegular.makeRegularMove(board, move);
-                    MoveCastling.castleFlagManager(board, move);
-                }
-                else {
-                    // increment 50 move rule
-                    StackMoveData stackMoveData = new StackMoveData
-                            (move, board, 50, BASICQUIETPUSH);
-                    board.moveStack.push(stackMoveData);
-                    MoveRegular.makeRegularMove(board, move);
-                    MoveCastling.castleFlagManager(board, move);
-                }
-            }
-        }
-    }
-
-    private static boolean enPassantPossibility(Chessboard board, Move move){
-        // determine if flag should be added to enable EP on next turn
-        long sourceSquare = newPieceOnSquare(move.getSourceAsPieceIndex());
-        long destinationSquare = newPieceOnSquare(move.destinationIndex);
-        long HOME_RANK = (board.isWhiteTurn()) ? BitBoards.RANK_TWO : BitBoards.RANK_SEVEN;
-        long MY_PAWNS = (board.isWhiteTurn()) ? board.WHITE_PAWNS : board.BLACK_PAWNS;
-        long enPassantPossibilityRank = (board.isWhiteTurn()) ? BitBoards.RANK_FOUR : BitBoards.RANK_FIVE;
-
-        if ((sourceSquare & HOME_RANK) == 0){
-            return false;
-        }
-
-        if ((sourceSquare & MY_PAWNS) == 0){
-            return false;
-        }
-        return (destinationSquare & enPassantPossibilityRank) != 0;
-    }
-
-
-    public static int whichPieceOnSquare(Chessboard board, long destinationPiece){
-
-        if ((destinationPiece & board.ALL_PIECES()) == 0){
-            return 0;
-        }
-
-        if ((destinationPiece & board.WHITE_PAWNS) != 0){
-            return 1;
-        }
-        else if ((destinationPiece & board.WHITE_KNIGHTS) != 0){
-            return 2;
-        }
-        else if ((destinationPiece & board.WHITE_BISHOPS) != 0){
-            return 3;
-        }
-        else if ((destinationPiece & board.WHITE_ROOKS) != 0){
-            return 4;
-        }
-        else if ((destinationPiece & board.WHITE_QUEEN) != 0){
-            return 5;
-        }
-        else if ((destinationPiece & board.WHITE_KING) != 0){
-            return 6;
-        }
-
-        else if ((destinationPiece & board.BLACK_PAWNS) != 0){
-            return 7;
-        }
-        else if ((destinationPiece & board.BLACK_KNIGHTS) != 0){
-            return 8;
-        }
-        else if ((destinationPiece & board.BLACK_BISHOPS) != 0){
-            return 9;
-        }
-        else if ((destinationPiece & board.BLACK_ROOKS) != 0){
-            return 10;
-        }
-        else if ((destinationPiece & board.BLACK_QUEEN) != 0){
-            return 11;
-        }
-        else if ((destinationPiece & board.BLACK_KING) != 0) {
-            return 12;
-        }
-        else {
-            throw new RuntimeException("false entry");
-        }
-    }
-
-}
Index: src/main/java/javacode/chessprogram/moveMaking/MoveParser.java
===================================================================
--- src/main/java/javacode/chessprogram/moveMaking/MoveParser.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/javacode/chessprogram/moveMaking/MoveParser.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
@@ -1,60 +0,0 @@
-package javacode.chessprogram.moveMaking;
-
-import javacode.chessprogram.chess.Move;
-
-public class MoveParser {
-
-    final public static int
-            sourceOffset = 6,
-            SOURCE_MASK = 0x00000fc0,
-            DESTINATION_MASK = 0x0000003f,
-
-            SPECIAL_MOVE_MASK = 0x00003000,
-            CASTLING_MASK = 0x00001000,
-            ENPASSANT_MASK = 0x00002000,
-            PROMOTION_MASK = 0x00003000,
-
-            WHICH_PROMOTION = 0x0000c000,
-            KNIGHT_PROMOTION_MASK = 0x00000000,
-            BISHOP_PROMOTION_MASK = 0x00004000,
-            ROOK_PROMOTION_MASK = 0x00008000,
-            QUEEN_PROMOTION_MASK = 0x0000c000;
-
-
-    public static boolean isSpecialMove (Move move){
-        return (move.move & SPECIAL_MOVE_MASK) != 0;
-    }
-
-    public static boolean isCastlingMove (Move move){
-        return (move.move & SPECIAL_MOVE_MASK) == CASTLING_MASK;
-    }
-
-    public static boolean isEnPassantMove (Move move){
-        return (move.move & SPECIAL_MOVE_MASK) == ENPASSANT_MASK;
-    }
-
-    public static boolean isPromotionMove (Move move){
-        return (move.move & SPECIAL_MOVE_MASK) == PROMOTION_MASK;
-    }
-
-    public static boolean isPromotionToKnight (Move move){
-        if (!((move.move & SPECIAL_MOVE_MASK) == PROMOTION_MASK)) return false;
-        return (move.move & WHICH_PROMOTION) == KNIGHT_PROMOTION_MASK;
-    }
-
-    public static boolean isPromotionToBishop(Move move){
-        if (!((move.move & SPECIAL_MOVE_MASK) == PROMOTION_MASK)) return false;
-        return (move.move & WHICH_PROMOTION) == BISHOP_PROMOTION_MASK;
-    }
-
-    public static boolean isPromotionToRook (Move move){
-        if (!((move.move & SPECIAL_MOVE_MASK) == PROMOTION_MASK)) return false;
-        return (move.move & WHICH_PROMOTION) == ROOK_PROMOTION_MASK;
-    }
-
-    public static boolean isPromotionToQueen (Move move){
-        if (!((move.move & SPECIAL_MOVE_MASK) == PROMOTION_MASK)) return false;
-        return (move.move & WHICH_PROMOTION) == QUEEN_PROMOTION_MASK;
-    }
-
-}
Index: src/main/java/javacode/chessprogram/miscAdmin/MoveParserFromAN.java
===================================================================
--- src/main/java/javacode/chessprogram/miscAdmin/MoveParserFromAN.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/javacode/chessprogram/miscAdmin/MoveParserFromAN.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
@@ -1,246 +0,0 @@
-package javacode.chessprogram.miscAdmin;
-
-import javacode.chessprogram.chess.BitManipulations;
-import javacode.chessprogram.chess.Chessboard;
-import javacode.chessprogram.chess.Move;
-import javacode.chessprogram.graphicsandui.Art;
-
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-
-public class MoveParserFromAN {
-
-    public static int destinationIndex(Chessboard board, String algebraicNotation){
-        return rankAndFile(board, algebraicNotation);
-    }
-    
-    private static Move makeMoveBasedOnAlgNotation(Chessboard board, String algebraicNotation){
-        System.out.println(algebraicNotation);
-        System.out.println();
-
-        long whichPieceCouldBeMoving = whichPieceIsMoving(board, algebraicNotation);
-        int x = rankAndFile(board, algebraicNotation);
-        
-        long destinationSquare = BitManipulations.newPieceOnSquare(x);
-
-        Piece piece = extractRealPieceFromLong(board, whichPieceCouldBeMoving, destinationSquare);
-
-//        findOriginalPiece(piece, destinationSquare);
-
-        Art.printLong(whichPieceCouldBeMoving);
-        Art.printLong(destinationSquare);
-
-        return null;
-    }
-    enum Piece {
-        WHITE_PAWN, WHITE_KNIGHT, WHITE_BISHOP, WHITE_ROOK, WHITE_QUEEN, WHITE_KING,
-        BLACK_PAWN, BLACK_KNIGHT, BLACK_BISHOP, BLACK_ROOK, BLACK_QUEEN, BLACK_KING
-    }
-
-//    private static long findOriginalPiece(Piece piece, long whichPieceCouldBeMoving, long destinationSquare){
-//        switch (piece) {
-//            case WHITE_PAWN: {
-//                return boa;
-//            }
-//            case WHITE_KNIGHT: {
-//                return 6;
-//            }
-//            case "c": {
-//                return 5;
-//            }
-//            case "d": {
-//                return 4;
-//            }
-//            case "e": {
-//                return 3;
-//            }
-//            case "f": {
-//                return 2;
-//            }
-//            case "g": {
-//                return 1;
-//            }
-//            case "h": {
-//                return 0;
-//            }
-//            default:
-//                System.out.println("problem with Piece identifier");
-//                return 0;
-//        }
-//    }
-    
-    
-    
-    
-    private static Piece extractRealPieceFromLong(Chessboard board, long whichPieceCouldBeMoving, long destinationSquare){
-        if ((whichPieceCouldBeMoving & board.WHITE_PAWNS) != 0){
-            return Piece.WHITE_PAWN;
-        }
-        else if ((whichPieceCouldBeMoving & board.WHITE_KNIGHTS) != 0){
-            return Piece.WHITE_KNIGHT;
-        }
-        else if ((whichPieceCouldBeMoving & board.WHITE_BISHOPS) != 0){
-            return Piece.WHITE_BISHOP;
-        }
-        else if ((whichPieceCouldBeMoving & board.WHITE_ROOKS) != 0){
-            return Piece.WHITE_ROOK;
-        }
-        else if ((whichPieceCouldBeMoving & board.WHITE_QUEEN) != 0){
-            return Piece.WHITE_QUEEN;
-        }
-        else if ((whichPieceCouldBeMoving & board.WHITE_KING) != 0){
-            return Piece.WHITE_KING;
-        }
-
-        else if ((whichPieceCouldBeMoving & board.BLACK_PAWNS) != 0){
-            return Piece.BLACK_PAWN;
-        }
-        else if ((whichPieceCouldBeMoving & board.BLACK_KNIGHTS) != 0){
-            return Piece.BLACK_KNIGHT;
-        }
-        else if ((whichPieceCouldBeMoving & board.BLACK_BISHOPS) != 0){
-            return Piece.BLACK_BISHOP;
-        }
-        else if ((whichPieceCouldBeMoving & board.BLACK_ROOKS) != 0){
-            return Piece.BLACK_ROOK;
-        }
-        else if ((whichPieceCouldBeMoving & board.BLACK_QUEEN) != 0){
-            return Piece.BLACK_QUEEN;
-        }
-        else if ((whichPieceCouldBeMoving & board.BLACK_KING) != 0){
-            return Piece.BLACK_KING;
-        }
-        else {
-            throw new RuntimeException("Could not retrieve Piece");
-        }
-    }
-
-    private static long whichPieceIsMoving(Chessboard board, String algebraicNotation){
-        String boardPattern = "[p|n|b|r|q|k|P|N|B|R|Q|K]?";
-        Pattern r = Pattern.compile(boardPattern);
-        Matcher m = r.matcher(algebraicNotation);
-
-        String pieceFromAN = "";
-
-        if (m.find()){
-            pieceFromAN = m.group();
-        }
-        if (pieceFromAN.length() == 0){
-            throw new RuntimeException("Could not parse Piece");
-        }
-
-        System.out.println(pieceFromAN);
-        
-        switch (pieceFromAN) {
-            case "p": {
-                return board.BLACK_PAWNS;
-            }
-            case "n": {
-                return board.BLACK_KNIGHTS;
-            }
-            case "b": {
-                return board.BLACK_BISHOPS;
-            }
-            case "r": {
-                return board.BLACK_ROOKS;
-            }
-            case "q": {
-                return board.BLACK_QUEEN;
-            }
-            case "k": {
-                return board.BLACK_KING;
-            }
-
-            case "P": {
-                return board.WHITE_PAWNS;
-            }
-            case "N": {
-                return board.WHITE_KNIGHTS;
-            }
-            case "B": {
-                return board.WHITE_BISHOPS;
-            }
-            case "R": {
-                return board.WHITE_ROOKS;
-            }
-            case "Q": {
-                return board.WHITE_QUEEN;
-            }
-            case "K": {
-                return board.WHITE_KING;
-            }
-            default:
-                System.out.println("problem with Piece identifier in which piece in moving()");
-                return 0;
-        }
-    }
-    
-    private static int rankAndFile(Chessboard board, String algebraicNotation){
-        int f = whichDestinationFile(board, algebraicNotation);
-        int r = whichDestinationRank(board, algebraicNotation);
-        return (r-1) * 8 + f;
-    }
-    private static int whichDestinationRank(Chessboard board, String algebraicNotation){
-        String boardPattern = ".?x?.x?(\\d)";
-        Pattern r = Pattern.compile(boardPattern);
-        Matcher m = r.matcher(algebraicNotation);
-
-        String pieceFromAN = "";
-
-        if (m.find()){
-            pieceFromAN = m.group(1);
-        }
-        if (pieceFromAN.length() == 0){
-            throw new RuntimeException("Could not parse file");
-        }
-        
-        return Integer.parseInt(pieceFromAN);
-    }
-    
-    private static int whichDestinationFile(Chessboard board, String algebraicNotation){
-        String boardPattern = "([a-h])(\\d)";
-        Pattern r = Pattern.compile(boardPattern);
-        Matcher m = r.matcher(algebraicNotation);
-
-        String pieceFromAN = "";
-
-        if (m.find()){
-            pieceFromAN = m.group(1);
-        }
-        if (pieceFromAN.length() == 0){
-            throw new RuntimeException("Could not parse file");
-        }
-
-        switch (pieceFromAN) {
-            case "a": {
-                return 7;
-            }
-            case "b": {
-                return 6;
-            }
-            case "c": {
-                return 5;
-            }
-            case "d": {
-                return 4;
-            }
-            case "e": {
-                return 3;
-            }
-            case "f": {
-                return 2;
-            }
-            case "g": {
-                return 1;
-            }
-            case "h": {
-                return 0;
-            }
-            default:
-                System.out.println("problem with Getting destinationIndex file");
-                return 0;
-        }
-    }
-    
-    
-}
Index: src/main/java/javacode/chessprogram/miscAdmin/MovePrettifier.java
===================================================================
--- src/main/java/javacode/chessprogram/miscAdmin/MovePrettifier.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/javacode/chessprogram/miscAdmin/MovePrettifier.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
@@ -1,79 +0,0 @@
-package javacode.chessprogram.miscAdmin;
-
-import javacode.chessprogram.chess.Move;
-import javacode.chessprogram.moveMaking.MoveParser;
-
-public class MovePrettifier {
-
-    public static String prettyMove(Move move){
-        int sourceAsPiece = move.getSourceAsPieceIndex();
-        String file = getFile(sourceAsPiece);
-        String rank = getRank(sourceAsPiece);
-        int destination = move.destinationIndex;
-        String destinationFile = getFile(destination);
-        String destinationRank = getRank(destination);
-        String m = ""+file+ rank+destinationFile+ destinationRank;
-
-        if (MoveParser.isCastlingMove(move)){
-            m += "";
-        }
-        else if (MoveParser.isEnPassantMove(move)){
-            m += "";
-        }
-
-        else if (MoveParser.isPromotionMove(move)){
-            m += "";
-
-            if (MoveParser.isPromotionToKnight(move)){
-                m += "N";
-            }
-            else if (MoveParser.isPromotionToBishop(move)){
-                m += "B";
-            }
-            else if (MoveParser.isPromotionToRook(move)){
-                m += "R";
-            }
-            else if (MoveParser.isPromotionToQueen(move)){
-                m += "Q";
-            }
-        }
-        return m;
-    }
-    
-    private static String getRank(int square){
-        return (square / 8 + 1) + "";
-    }
-
-
-    private static String getFile(int square){
-        int i = square % 8;
-        String file = "";
-        switch (i){
-            case 0: 
-                file = "h";
-                break;
-            case 1:
-                file = "g";
-                break;
-            case 2:
-                file = "f";
-                break;
-            case 3:
-                file = "e";
-                break;
-            case 4:
-                file = "d";
-                break;
-            case 5:
-                file = "c";
-                break;
-            case 6:
-                file = "b";
-                break;
-            case 7:
-                file = "a";
-                break;
-        }
-        return file;
-    }
-}
Index: src/main/java/javacode/chessprogram/moveMaking/MovePromotion.java
===================================================================
--- src/main/java/javacode/chessprogram/moveMaking/MovePromotion.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/javacode/chessprogram/moveMaking/MovePromotion.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
@@ -1,47 +0,0 @@
-package javacode.chessprogram.moveMaking;
-
-import javacode.chessprogram.chess.Chessboard;
-import javacode.chessprogram.chess.Move;
-
-import static javacode.chessprogram.chess.BitManipulations.newPieceOnSquare;
-
-class MovePromotion {
-
-    static void makePromotingMove(Chessboard board, Move move){
-        long sourcePiece = newPieceOnSquare(move.getSourceAsPieceIndex());
-        long destinationPiece = newPieceOnSquare(move.destinationIndex);
-
-        if ((sourcePiece & board.WHITE_PAWNS) != 0){
-            MoveMakingUtilities.removePieces(board, sourcePiece, destinationPiece);
-            if ((move.move & MoveParser.WHICH_PROMOTION) == MoveParser.KNIGHT_PROMOTION_MASK){
-                board.WHITE_KNIGHTS |= destinationPiece;
-            }
-            else if ((move.move & MoveParser.WHICH_PROMOTION) == MoveParser.BISHOP_PROMOTION_MASK){
-                board.WHITE_BISHOPS |= destinationPiece;
-            }
-            else if ((move.move & MoveParser.WHICH_PROMOTION) == MoveParser.ROOK_PROMOTION_MASK){
-                board.WHITE_ROOKS |= destinationPiece;
-            }
-            else if ((move.move & MoveParser.WHICH_PROMOTION) == MoveParser.QUEEN_PROMOTION_MASK){
-                board.WHITE_QUEEN |= destinationPiece;
-            }
-        }
-
-        else if ((sourcePiece & board.BLACK_PAWNS) != 0){
-            MoveMakingUtilities.removePieces(board, sourcePiece, destinationPiece);
-            if ((move.move & MoveParser.WHICH_PROMOTION) == MoveParser.KNIGHT_PROMOTION_MASK){
-                board.BLACK_KNIGHTS |= destinationPiece;
-            }
-            else if ((move.move & MoveParser.WHICH_PROMOTION) == MoveParser.BISHOP_PROMOTION_MASK){
-                board.BLACK_BISHOPS |= destinationPiece;
-            }
-            else if ((move.move & MoveParser.WHICH_PROMOTION) == MoveParser.ROOK_PROMOTION_MASK){
-                board.BLACK_ROOKS |= destinationPiece;
-            }
-            else if ((move.move & MoveParser.WHICH_PROMOTION) == MoveParser.QUEEN_PROMOTION_MASK){
-                board.BLACK_QUEEN |= destinationPiece;
-            }
-        }
-
-    }
-}
Index: src/main/java/javacode/chessprogram/moveMaking/MoveRegular.java
===================================================================
--- src/main/java/javacode/chessprogram/moveMaking/MoveRegular.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/javacode/chessprogram/moveMaking/MoveRegular.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
@@ -1,70 +0,0 @@
-package javacode.chessprogram.moveMaking;
-
-import javacode.chessprogram.chess.Chessboard;
-import javacode.chessprogram.chess.Move;
-
-import static javacode.chessprogram.chess.BitManipulations.newPieceOnSquare;
-
-class MoveRegular {
-
-    static void makeRegularMove(Chessboard board, Move move){
-        long sourcePiece = newPieceOnSquare(move.getSourceAsPieceIndex());
-        long destinationPiece = newPieceOnSquare(move.destinationIndex);
-
-        if ((sourcePiece & board.WHITE_PAWNS) != 0){
-            MoveMakingUtilities.removePieces(board, sourcePiece, destinationPiece);
-            board.WHITE_PAWNS |= destinationPiece;
-        }
-        else if ((sourcePiece & board.WHITE_KNIGHTS) != 0){
-            MoveMakingUtilities.removePieces(board, sourcePiece, destinationPiece);
-            board.WHITE_KNIGHTS |= destinationPiece;
-        }
-        else if ((sourcePiece & board.WHITE_BISHOPS) != 0){
-            MoveMakingUtilities.removePieces(board, sourcePiece, destinationPiece);
-            board.WHITE_BISHOPS |= destinationPiece;
-        }
-        else if  ((sourcePiece & board.WHITE_ROOKS) != 0){
-            MoveMakingUtilities.removePieces(board, sourcePiece, destinationPiece);
-            board.WHITE_ROOKS |= destinationPiece;
-        }
-        else if  ((sourcePiece & board.WHITE_QUEEN) != 0){
-            MoveMakingUtilities.removePieces(board, sourcePiece, destinationPiece);
-            board.WHITE_QUEEN |= destinationPiece;
-        }
-        else if  ((sourcePiece & board.WHITE_KING) != 0){
-            MoveMakingUtilities.removePieces(board, sourcePiece, destinationPiece);
-            board.WHITE_KING |= destinationPiece;
-        }
-
-        else if  ((sourcePiece & board.BLACK_PAWNS) != 0){
-            MoveMakingUtilities.removePieces(board, sourcePiece, destinationPiece);
-            board.BLACK_PAWNS |= destinationPiece;
-        }
-        else if  ((sourcePiece & board.BLACK_KNIGHTS) != 0){
-            MoveMakingUtilities.removePieces(board, sourcePiece, destinationPiece);
-            board.BLACK_KNIGHTS |= destinationPiece;
-        }
-        else if  ((sourcePiece & board.BLACK_BISHOPS) != 0){
-            MoveMakingUtilities.removePieces(board, sourcePiece, destinationPiece);
-            board.BLACK_BISHOPS |= destinationPiece;
-        }
-        else if  ((sourcePiece & board.BLACK_ROOKS) != 0){
-            MoveMakingUtilities.removePieces(board, sourcePiece, destinationPiece);
-            board.BLACK_ROOKS |= destinationPiece;
-        }
-        else if  ((sourcePiece & board.BLACK_QUEEN) != 0){
-            MoveMakingUtilities.removePieces(board, sourcePiece, destinationPiece);
-            board.BLACK_QUEEN |= destinationPiece;
-        }
-        else if  ((sourcePiece & board.BLACK_KING) != 0) {
-            MoveMakingUtilities.removePieces(board, sourcePiece, destinationPiece);
-            board.BLACK_KING |= destinationPiece;
-        }
-        else {
-            throw new RuntimeException("MoveRegular: false move "+ move);
-        }
-    }
-
-
-
-}
Index: src/main/java/javacode/chessprogram/moveMaking/MoveUnmaker.java
===================================================================
--- src/main/java/javacode/chessprogram/moveMaking/MoveUnmaker.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/javacode/chessprogram/moveMaking/MoveUnmaker.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
@@ -1,232 +0,0 @@
-package javacode.chessprogram.moveMaking;
-
-import javacode.chessprogram.chess.Chessboard;
-import javacode.chessprogram.chess.Move;
-
-import static javacode.chessprogram.chess.BitManipulations.newPieceOnSquare;
-import static javacode.chessprogram.moveMaking.StackMoveData.SpecialMove.*;
-
-public class MoveUnmaker {
-
-    public static void unMakeMoveMaster(Chessboard board) {
-        StackMoveData popSMD = board.moveStack.pop();
-        int pieceToMoveBack = popSMD.move.destinationIndex;
-        int squareToMoveBackTo = popSMD.move.getSourceAsPieceIndex();
-
-        if (popSMD.typeOfSpecialMove == BASICQUIETPUSH){
-            Move basicReversedMove = new Move(pieceToMoveBack, squareToMoveBackTo);
-            makeRegularMove(board, basicReversedMove);
-        }
-        
-        else if (popSMD.typeOfSpecialMove == BASICLOUDPUSH){
-            Move basicReversedMove = new Move(pieceToMoveBack, squareToMoveBackTo);
-            makeRegularMove(board, basicReversedMove);
-        }
-
-        else if (popSMD.typeOfSpecialMove == BASICCAPTURE){
-            Move basicReversedMove = new Move(pieceToMoveBack, squareToMoveBackTo);
-            makeRegularMove(board, basicReversedMove);
-            int takenPiece = popSMD.takenPiece;
-            if (takenPiece != 0){
-                addRelevantPieceToSquare(board, takenPiece, pieceToMoveBack);
-            }
-        }
-
-        //double pawn push
-        else if (popSMD.typeOfSpecialMove == ENPASSANTVICTIM){
-            Move basicReversedMove = new Move(pieceToMoveBack, squareToMoveBackTo);
-            makeRegularMove(board, basicReversedMove);
-        }
-
-        else if (popSMD.typeOfSpecialMove == ENPASSANTCAPTURE){
-            Move basicReversedMove = new Move(pieceToMoveBack, squareToMoveBackTo);
-            makeRegularMove(board, basicReversedMove);
-            int takenPiece = popSMD.takenPiece;
-            
-            if (popSMD.whiteTurn) {
-                addRelevantPieceToSquare(board, 7, pieceToMoveBack - 8);
-            }
-            else {
-                addRelevantPieceToSquare(board, 1, pieceToMoveBack + 8);
-            }
-        }
-        
-        else if (popSMD.typeOfSpecialMove == CASTLING){
-            Move basicReversedMove = new Move(pieceToMoveBack, squareToMoveBackTo);
-
-            if (pieceToMoveBack == 1){
-                long originalKing = newPieceOnSquare(squareToMoveBackTo);
-                long originalRook = newPieceOnSquare(0);
-                long newRook = newPieceOnSquare(pieceToMoveBack + 1);
-                long newKing = newPieceOnSquare(pieceToMoveBack);
-
-                MoveMakingUtilities.removePieces(board, newKing, newRook);
-                board.WHITE_KING |= originalKing;
-                board.WHITE_ROOKS |= originalRook;
-            }
-
-            else if (pieceToMoveBack == 5){
-                long originalKing = newPieceOnSquare(squareToMoveBackTo);
-                long originalRook = newPieceOnSquare(7);
-                long newRook = newPieceOnSquare(pieceToMoveBack - 1);
-                long newKing = newPieceOnSquare(pieceToMoveBack);
-
-                MoveMakingUtilities.removePieces(board, newKing, newRook);
-                board.WHITE_KING |= originalKing;
-                board.WHITE_ROOKS |= originalRook;
-            }
-
-            else if (pieceToMoveBack == 57){
-                long originalKing = newPieceOnSquare(squareToMoveBackTo);
-                long originalRook = newPieceOnSquare(56);
-                long newRook = newPieceOnSquare(pieceToMoveBack + 1);
-                long newKing = newPieceOnSquare(pieceToMoveBack);
-
-                MoveMakingUtilities.removePieces(board, newKing, newRook);
-                board.BLACK_KING |= originalKing;
-                board.BLACK_ROOKS |= originalRook;
-            }
-
-            else if (pieceToMoveBack == 61){
-                long originalKing = newPieceOnSquare(squareToMoveBackTo);
-                long originalRook = newPieceOnSquare(63);
-                long newRook = newPieceOnSquare(pieceToMoveBack - 1);
-                long newKing = newPieceOnSquare(pieceToMoveBack);
-
-                MoveMakingUtilities.removePieces(board, newKing, newRook);
-                board.BLACK_KING |= originalKing;
-                board.BLACK_ROOKS |= originalRook;
-            }
-            
-        }
-        
-        else if (popSMD.typeOfSpecialMove == PROMOTION){
-            long sourceSquare = newPieceOnSquare(pieceToMoveBack);
-            long destinationSquare = newPieceOnSquare(squareToMoveBackTo);
-            MoveMakingUtilities.removePieces(board, sourceSquare, destinationSquare);
-            if (popSMD.whiteTurn) {
-                addRelevantPieceToSquare(board, 1, squareToMoveBackTo);
-            }
-            else {
-                addRelevantPieceToSquare(board, 7, squareToMoveBackTo);
-            }
-            int takenPiece = popSMD.takenPiece;
-            if (takenPiece > 0){
-                addRelevantPieceToSquare(board, takenPiece, pieceToMoveBack);
-            }
-        }
-
-        board.whiteCanCastleK = popSMD.whiteCanCastleK;
-        board.whiteCanCastleQ = popSMD.whiteCanCastleQ;
-        board.blackCanCastleK = popSMD.blackCanCastleK;
-        board.blackCanCastleQ = popSMD.blackCanCastleQ;
-
-        board.setWhiteTurn(popSMD.whiteTurn);
-    }
-
-
-    private static void addRelevantPieceToSquare(Chessboard board, int pieceToAdd, int placeToAddIt){
-        long placeToAddPiece = newPieceOnSquare(placeToAddIt);
-
-        if (pieceToAdd == 1){
-            board.WHITE_PAWNS |= placeToAddPiece;
-        }
-        else if (pieceToAdd == 2){
-            board.WHITE_KNIGHTS |= placeToAddPiece;
-        }
-        else if (pieceToAdd == 3){
-            board.WHITE_BISHOPS |= placeToAddPiece;
-        }
-        else if (pieceToAdd == 4){
-            board.WHITE_ROOKS |= placeToAddPiece;
-        }
-        else if (pieceToAdd == 5){
-            board.WHITE_QUEEN |= placeToAddPiece;
-        }
-        else if (pieceToAdd == 6){
-            board.WHITE_KING |= placeToAddPiece;
-        }
-
-        else if (pieceToAdd == 7){
-            board.BLACK_PAWNS |= placeToAddPiece;
-        }
-        else if (pieceToAdd == 8){
-            board.BLACK_KNIGHTS |= placeToAddPiece;
-        }
-        else if (pieceToAdd == 9){
-            board.BLACK_BISHOPS |= placeToAddPiece;
-        }
-        else if (pieceToAdd == 10){
-            board.BLACK_ROOKS |= placeToAddPiece;
-        }
-        else if (pieceToAdd == 11){
-            board.BLACK_QUEEN |= placeToAddPiece;
-        }
-        else if (pieceToAdd == 12){
-            board.BLACK_KING |= placeToAddPiece;
-        }
-        else {
-            throw new RuntimeException("problem with putting back a captured piece");
-        }
-    }
-
-
-    private static void makeRegularMove(Chessboard board, Move move){
-        long sourcePiece = newPieceOnSquare(move.getSourceAsPieceIndex());
-        long destinationPiece = newPieceOnSquare(move.destinationIndex);
-
-        if ((sourcePiece & board.WHITE_PAWNS) != 0){
-            MoveMakingUtilities.removePieces(board, sourcePiece, destinationPiece);
-            board.WHITE_PAWNS |= destinationPiece;
-        }
-        else if ((sourcePiece & board.WHITE_KNIGHTS) != 0){
-            MoveMakingUtilities.removePieces(board, sourcePiece, destinationPiece);
-            board.WHITE_KNIGHTS |= destinationPiece;
-        }
-        else if ((sourcePiece & board.WHITE_BISHOPS) != 0){
-            MoveMakingUtilities.removePieces(board, sourcePiece, destinationPiece);
-            board.WHITE_BISHOPS |= destinationPiece;
-        }
-        else if ((sourcePiece & board.WHITE_ROOKS) != 0){
-            MoveMakingUtilities.removePieces(board, sourcePiece, destinationPiece);
-            board.WHITE_ROOKS |= destinationPiece;
-        }
-        else if ((sourcePiece & board.WHITE_QUEEN) != 0){
-            MoveMakingUtilities.removePieces(board, sourcePiece, destinationPiece);
-            board.WHITE_QUEEN |= destinationPiece;
-        }
-        else if ((sourcePiece & board.WHITE_KING) != 0){
-            MoveMakingUtilities.removePieces(board, sourcePiece, destinationPiece);
-            board.WHITE_KING |= destinationPiece;
-        }
-
-        else if ((sourcePiece & board.BLACK_PAWNS) != 0){
-            MoveMakingUtilities.removePieces(board, sourcePiece, destinationPiece);
-            board.BLACK_PAWNS |= destinationPiece;
-        }
-        else if ((sourcePiece & board.BLACK_KNIGHTS) != 0){
-            MoveMakingUtilities.removePieces(board, sourcePiece, destinationPiece);
-            board.BLACK_KNIGHTS |= destinationPiece;
-        }
-        else if ((sourcePiece & board.BLACK_BISHOPS) != 0){
-            MoveMakingUtilities.removePieces(board, sourcePiece, destinationPiece);
-            board.BLACK_BISHOPS |= destinationPiece;
-        }
-        else if ((sourcePiece & board.BLACK_ROOKS) != 0){
-            MoveMakingUtilities.removePieces(board, sourcePiece, destinationPiece);
-            board.BLACK_ROOKS |= destinationPiece;
-        }
-        else if ((sourcePiece & board.BLACK_QUEEN) != 0){
-            MoveMakingUtilities.removePieces(board, sourcePiece, destinationPiece);
-            board.BLACK_QUEEN |= destinationPiece;
-        }
-        else if ((sourcePiece & board.BLACK_KING) != 0) {
-            MoveMakingUtilities.removePieces(board, sourcePiece, destinationPiece);
-            board.BLACK_KING |= destinationPiece;
-        }
-        else {
-            throw new RuntimeException("unMakeMoveMaster: false move " + move);
-        }
-    }
-
-}
Index: src/main/java/tests/programtests/MoveUnmakerTest.java
===================================================================
--- src/main/java/tests/programtests/MoveUnmakerTest.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/tests/programtests/MoveUnmakerTest.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
@@ -1,264 +0,0 @@
-package tests.programtests;
-
-import javacode.chessprogram.bitboards.RandomBoard;
-import javacode.chessprogram.check.CheckChecker;
-import javacode.chessprogram.chess.Chessboard;
-import javacode.chessprogram.chess.Copier;
-import javacode.chessprogram.chess.Move;
-import javacode.chessprogram.graphicsandui.Art;
-import javacode.chessprogram.moveGeneration.MoveGeneratorMaster;
-import javacode.chessprogram.moveMaking.MoveOrganiser;
-import javacode.chessprogram.moveMaking.MoveUnmaker;
-import javacode.chessprogram.moveMaking.StackMoveData;
-import org.junit.Assert;
-import org.junit.jupiter.api.BeforeEach;
-import org.junit.jupiter.api.Test;
-
-import java.util.List;
-import java.util.Random;
-
-class MoveUnmakerTest {
-
-    private static Chessboard[] bs;
-
-    @BeforeEach
-    void setUp() {
-        bs = RandomBoard.boardForTests();
-//        RandomBoard.printBoards(bs);
-    }
-
-
-    @Test
-    void unMakeMoveMaster() {
-        int totalWhites = 0;
-
-        boolean debug = false;
-
-        System.out.println("------- Single Takebacks, starting white");
-        for (int i = 0; i < bs.length; i++) {
-            
-            Chessboard b = bs[i];
-            Chessboard copy = Copier.copyBoard(b, b.isWhiteTurn(), false);
-            
-            
-            if (CheckChecker.boardInCheck(b, !b.isWhiteTurn())){
-                continue;
-            }
-            
-            
-            if (debug) {
-                System.out.println("----------------- " + i + " -------------------");
-                System.out.println("White's turn: " + b.isWhiteTurn());
-            }
-            if (debug) {
-                System.out.println(Art.boardArt(b));
-            }
-            List<Move> moves = MoveGeneratorMaster.generateLegalMoves(b, b.isWhiteTurn());
-            for (int m = 0; m < moves.size(); m++) {
-                totalWhites++;
-                if (debug) {
-                    System.out.println("Move Number " + m + ", " + moves.get(m));
-                    System.out.println(Art.boardArt(b));
-                }
-                Move move = moves.get(m);
-                if (debug) {
-                    System.out.println(move);
-                }
-                MoveOrganiser.makeMoveMaster(b, move);
-                MoveOrganiser.flipTurn(b);
-                if (debug) {
-                    System.out.println(Art.boardArt(b));
-                }
-                MoveUnmaker.unMakeMoveMaster(b);
-                if (debug) {
-                    System.out.println(Art.boardArt(b));
-                }
-                Assert.assertEquals(b, copy);
-            }
-        }
-        System.out.println("total white single tests: " + totalWhites);
-
-
-        System.out.println("------- Single Takebacks, starting at black");
-        int totalBlacks = 0;
-        for (int i = 0; i < bs.length; i++) {
-            MoveOrganiser.flipTurn(bs[i]);
-            Chessboard b = bs[i];
-            Chessboard copy = Copier.copyBoard(b, b.isWhiteTurn(), false);
-
-            if (CheckChecker.boardInCheck(b, !b.isWhiteTurn())){
-                continue;
-            }
-            
-            
-            
-            if (debug) {
-                System.out.println("----------------- " + i + " -------------------");
-                System.out.println("Whites's turn: " + b.isWhiteTurn());
-            }
-            if (debug) {
-                System.out.println("Board number " + i + ":");
-                System.out.println(Art.boardArt(b));
-            }
-            List<Move> moves = MoveGeneratorMaster.generateLegalMoves(b, b.isWhiteTurn());
-            for (int m = 0; m < moves.size(); m++) {
-                totalBlacks++;
-                if (debug) {
-                    System.out.println("Move Number " + m + ", " + moves.get(m));
-                    System.out.println(Art.boardArt(b));
-                }
-                Move move = moves.get(m);
-                if (debug) {
-                    System.out.println(move);
-                }
-                MoveOrganiser.makeMoveMaster(b, move);
-                MoveOrganiser.flipTurn(b);
-                if (debug) {
-                    System.out.println(Art.boardArt(b));
-                }
-                MoveUnmaker.unMakeMoveMaster(b);
-                if (debug) {
-                    System.out.println(Art.boardArt(b));
-                }
-                Assert.assertEquals(b, copy);
-            }
-        }
-        System.out.println("total black single tests: " + totalBlacks);
-
-
-        int total = 0;
-        System.out.println("------- Multiple Takebacks, starting white");
-        for (int i = 0; i < bs.length; i++) {
-            
-            Chessboard b = bs[i];
-            b.setWhiteTurn(true);
-            Chessboard copy = Copier.copyBoard(b, b.isWhiteTurn(), false);
-
-            if (CheckChecker.boardInCheck(b, !b.isWhiteTurn())){
-                continue;
-            }
-            
-            
-            if (debug) {
-                System.out.println("----------------- " + i + " -------------------");
-                System.out.println("Whites's turn: " + b.isWhiteTurn());
-            }
-            if (debug) {
-                System.out.println(Art.boardArt(b));
-            }
-
-            List<Move> moves = MoveGeneratorMaster.generateLegalMoves(b, b.isWhiteTurn());
-            for (int m = 0; m < moves.size(); m++) {
-                if (debug) {
-                    System.out.println("Move Number " + m + ", " + moves.get(m));
-                    System.out.println(Art.boardArt(b));
-                }
-                Move move = moves.get(m);
-                if (debug) {
-                    System.out.println(move);
-                }
-                MoveOrganiser.makeMoveMaster(b, move);
-                if (debug) {
-                    System.out.println("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
-                }
-                MoveOrganiser.flipTurn(b);
-
-                List<Move> movesss = MoveGeneratorMaster.generateLegalMoves(b, b.isWhiteTurn());
-                for (int mm = 0; mm < movesss.size(); mm++) {
-                    total++;
-                    if (debug) {
-                        System.out.println("Move Number " + mm + ", " + movesss.get(mm));
-                        System.out.println(Art.boardArt(b));
-                    }
-                    
-                    
-                    Move moveX = movesss.get(mm);
-                    if (debug) {
-                        System.out.println(moveX);
-                    }
-                    MoveOrganiser.makeMoveMaster(b, moveX);
-                    MoveOrganiser.flipTurn(b);
-                    if (debug) {
-                        System.out.println(Art.boardArt(b));
-                    }
-                    MoveUnmaker.unMakeMoveMaster(b);
-                    if (debug) {
-                        System.out.println(Art.boardArt(b));
-                    }
-                }
-
-
-                if (debug) {
-                    System.out.println(Art.boardArt(b));
-                }
-                if (debug) {
-                    System.out.println("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
-                }
-                MoveUnmaker.unMakeMoveMaster(b);
-                if (debug) {
-                    System.out.println(Art.boardArt(b));
-                }
-                Assert.assertEquals(b, copy);
-            }
-        }
-        System.out.println("total multi level tests: " + total);
-
-
-
-
-        Chessboard board = new Chessboard();
-        int num = 1000;
-        System.out.println("------- Random high depth, starting white");
-        Chessboard copy1 = Copier.copyBoard(board, board.isWhiteTurn(), false);
-        moveNStuffRandom(board, num);
-        System.out.println(Art.boardArt(board));
-        unMoveNStuff(board);
-
-        System.out.println("Same as before ? " + board.equals(copy1));
-        System.out.println();
-        Assert.assertEquals(board, copy1);        
-    }
-
-
-
-    private static void unMoveNStuff(Chessboard board){
-
-        int size = board.moveStack.size();
-        System.out.println(size);
-
-        for (int undo = 0; undo < size; undo++) {
-            MoveUnmaker.unMakeMoveMaster(board);
-            if (false) {
-                System.out.println(Art.boardArt(board));
-            }
-        }
-    }
-
-    private static void moveNStuffRandom(Chessboard board, int totalRandoms){
-        for (int r = 0; r < totalRandoms; r++) {
-            List<Move> moves = MoveGeneratorMaster.generateLegalMoves(board, board.isWhiteTurn());
-            Random rand = new Random();
-            
-            if (moves.size() == 0){
-                System.out.println("Checkmate");
-                return;
-            }
-
-            Move move = moves.get(rand.nextInt(moves.size()));
-
-            boolean DEBUG = false;
-            if (DEBUG) {
-                System.out.println(moves + " " + moves.size());
-                System.out.println(move);
-            }
-            MoveOrganiser.makeMoveMaster(board, move);
-            MoveOrganiser.flipTurn(board);
-            if (DEBUG) {
-                System.out.println(Art.boardArt(board));
-                StackMoveData peek = board.moveStack.peek();
-                System.out.println(peek);
-//            System.out.println("Peek turn white : " + peek.whiteTurn);
-            }
-        }
-    }
-}
\ No newline at end of file
Index: src/main/java/javacode/chessprogram/bitboards/PawnCaptures.java
===================================================================
--- src/main/java/javacode/chessprogram/bitboards/PawnCaptures.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/javacode/chessprogram/bitboards/PawnCaptures.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
@@ -1,139 +0,0 @@
-package javacode.chessprogram.bitboards;
-
-public class PawnCaptures {
-
-    public static final long[] PAWN_CAPTURE_TABLE_WHITE = {
-            0x200L,
-            0x500L,
-            0xa00L,
-            0x1400L,
-            0x2800L,
-            0x5000L,
-            0xa000L,
-            0x4000L,
-            0x20000L,
-            0x50000L,
-            0xa0000L,
-            0x140000L,
-            0x280000L,
-            0x500000L,
-            0xa00000L,
-            0x400000L,
-            0x2000000L,
-            0x5000000L,
-            0xa000000L,
-            0x14000000L,
-            0x28000000L,
-            0x50000000L,
-            0xa0000000L,
-            0x40000000L,
-            0x200000000L,
-            0x500000000L,
-            0xa00000000L,
-            0x1400000000L,
-            0x2800000000L,
-            0x5000000000L,
-            0xa000000000L,
-            0x4000000000L,
-            0x20000000000L,
-            0x50000000000L,
-            0xa0000000000L,
-            0x140000000000L,
-            0x280000000000L,
-            0x500000000000L,
-            0xa00000000000L,
-            0x400000000000L,
-            0x2000000000000L,
-            0x5000000000000L,
-            0xa000000000000L,
-            0x14000000000000L,
-            0x28000000000000L,
-            0x50000000000000L,
-            0xa0000000000000L,
-            0x40000000000000L,
-            0x200000000000000L,
-            0x500000000000000L,
-            0xa00000000000000L,
-            0x1400000000000000L,
-            0x2800000000000000L,
-            0x5000000000000000L,
-            0xa000000000000000L,
-            0x4000000000000000L,
-            0x0L,
-            0x0L,
-            0x0L,
-            0x0L,
-            0x0L,
-            0x0L,
-            0x0L,
-            0x0L,
-    };
-
-    public static final long[] PAWN_CAPTURE_TABLE_BLACK = {
-            0x0L,
-            0x0L,
-            0x0L,
-            0x0L,
-            0x0L,
-            0x0L,
-            0x0L,
-            0x0L,
-            0x2L,
-            0x5L,
-            0xaL,
-            0x14L,
-            0x28L,
-            0x50L,
-            0xa0L,
-            0x40L,
-            0x200L,
-            0x500L,
-            0xa00L,
-            0x1400L,
-            0x2800L,
-            0x5000L,
-            0xa000L,
-            0x4000L,
-            0x20000L,
-            0x50000L,
-            0xa0000L,
-            0x140000L,
-            0x280000L,
-            0x500000L,
-            0xa00000L,
-            0x400000L,
-            0x2000000L,
-            0x5000000L,
-            0xa000000L,
-            0x14000000L,
-            0x28000000L,
-            0x50000000L,
-            0xa0000000L,
-            0x40000000L,
-            0x200000000L,
-            0x500000000L,
-            0xa00000000L,
-            0x1400000000L,
-            0x2800000000L,
-            0x5000000000L,
-            0xa000000000L,
-            0x4000000000L,
-            0x20000000000L,
-            0x50000000000L,
-            0xa0000000000L,
-            0x140000000000L,
-            0x280000000000L,
-            0x500000000000L,
-            0xa00000000000L,
-            0x400000000000L,
-            0x2000000000000L,
-            0x5000000000000L,
-            0xa000000000000L,
-            0x14000000000000L,
-            0x28000000000000L,
-            0x50000000000000L,
-            0xa0000000000000L,
-            0x40000000000000L,
-    };
-
-}
Index: src/main/java/tests/programtests/PerftSuiteTwo.java
===================================================================
--- src/main/java/tests/programtests/PerftSuiteTwo.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/tests/programtests/PerftSuiteTwo.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
@@ -1,135 +0,0 @@
-package tests.programtests;
-
-class PerftSuiteTwo {
-}
-
-/*
-https://raw.githubusercontent.com/MJoergen/mchess2/master/tests/perftsuite.epd
-
-rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1 ;D1 20 ;D2 400 ;D3 8902 ;D4 197281 ;D5 4865609 ;D6 119060324
-r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq - 0 1 ;D1 48 ;D2 2039 ;D3 97862 ;D4 4085603 ;D5 193690690
-4k3/8/8/8/8/8/8/4K2R w K - 0 1 ;D1 15 ;D2 66 ;D3 1197 ;D4 7059 ;D5 133987 ;D6 764643
-4k3/8/8/8/8/8/8/R3K3 w Q - 0 1 ;D1 16 ;D2 71 ;D3 1287 ;D4 7626 ;D5 145232 ;D6 846648
-4k2r/8/8/8/8/8/8/4K3 w k - 0 1 ;D1 5 ;D2 75 ;D3 459 ;D4 8290 ;D5 47635 ;D6 899442
-r3k3/8/8/8/8/8/8/4K3 w q - 0 1 ;D1 5 ;D2 80 ;D3 493 ;D4 8897 ;D5 52710 ;D6 1001523
-4k3/8/8/8/8/8/8/R3K2R w KQ - 0 1 ;D1 26 ;D2 112 ;D3 3189 ;D4 17945 ;D5 532933 ;D6 2788982
-r3k2r/8/8/8/8/8/8/4K3 w kq - 0 1 ;D1 5 ;D2 130 ;D3 782 ;D4 22180 ;D5 118882 ;D6 3517770
-8/8/8/8/8/8/6k1/4K2R w K - 0 1 ;D1 12 ;D2 38 ;D3 564 ;D4 2219 ;D5 37735 ;D6 185867
-8/8/8/8/8/8/1k6/R3K3 w Q - 0 1 ;D1 15 ;D2 65 ;D3 1018 ;D4 4573 ;D5 80619 ;D6 413018
-4k2r/6K1/8/8/8/8/8/8 w k - 0 1 ;D1 3 ;D2 32 ;D3 134 ;D4 2073 ;D5 10485 ;D6 179869
-r3k3/1K6/8/8/8/8/8/8 w q - 0 1 ;D1 4 ;D2 49 ;D3 243 ;D4 3991 ;D5 20780 ;D6 367724
-r3k2r/8/8/8/8/8/8/R3K2R w KQkq - 0 1 ;D1 26 ;D2 568 ;D3 13744 ;D4 314346 ;D5 7594526 ;D6 179862938
-r3k2r/8/8/8/8/8/8/1R2K2R w Kkq - 0 1 ;D1 25 ;D2 567 ;D3 14095 ;D4 328965 ;D5 8153719 ;D6 195629489
-r3k2r/8/8/8/8/8/8/2R1K2R w Kkq - 0 1 ;D1 25 ;D2 548 ;D3 13502 ;D4 312835 ;D5 7736373 ;D6 184411439
-r3k2r/8/8/8/8/8/8/R3K1R1 w Qkq - 0 1 ;D1 25 ;D2 547 ;D3 13579 ;D4 316214 ;D5 7878456 ;D6 189224276
-1r2k2r/8/8/8/8/8/8/R3K2R w KQk - 0 1 ;D1 26 ;D2 583 ;D3 14252 ;D4 334705 ;D5 8198901 ;D6 198328929
-2r1k2r/8/8/8/8/8/8/R3K2R w KQk - 0 1 ;D1 25 ;D2 560 ;D3 13592 ;D4 317324 ;D5 7710115 ;D6 185959088
-r3k1r1/8/8/8/8/8/8/R3K2R w KQq - 0 1 ;D1 25 ;D2 560 ;D3 13607 ;D4 320792 ;D5 7848606 ;D6 190755813
-4k3/8/8/8/8/8/8/4K2R b K - 0 1 ;D1 5 ;D2 75 ;D3 459 ;D4 8290 ;D5 47635 ;D6 899442
-4k3/8/8/8/8/8/8/R3K3 b Q - 0 1 ;D1 5 ;D2 80 ;D3 493 ;D4 8897 ;D5 52710 ;D6 1001523
-4k2r/8/8/8/8/8/8/4K3 b k - 0 1 ;D1 15 ;D2 66 ;D3 1197 ;D4 7059 ;D5 133987 ;D6 764643
-r3k3/8/8/8/8/8/8/4K3 b q - 0 1 ;D1 16 ;D2 71 ;D3 1287 ;D4 7626 ;D5 145232 ;D6 846648
-4k3/8/8/8/8/8/8/R3K2R b KQ - 0 1 ;D1 5 ;D2 130 ;D3 782 ;D4 22180 ;D5 118882 ;D6 3517770
-r3k2r/8/8/8/8/8/8/4K3 b kq - 0 1 ;D1 26 ;D2 112 ;D3 3189 ;D4 17945 ;D5 532933 ;D6 2788982
-8/8/8/8/8/8/6k1/4K2R b K - 0 1 ;D1 3 ;D2 32 ;D3 134 ;D4 2073 ;D5 10485 ;D6 179869
-8/8/8/8/8/8/1k6/R3K3 b Q - 0 1 ;D1 4 ;D2 49 ;D3 243 ;D4 3991 ;D5 20780 ;D6 367724
-4k2r/6K1/8/8/8/8/8/8 b k - 0 1 ;D1 12 ;D2 38 ;D3 564 ;D4 2219 ;D5 37735 ;D6 185867
-r3k3/1K6/8/8/8/8/8/8 b q - 0 1 ;D1 15 ;D2 65 ;D3 1018 ;D4 4573 ;D5 80619 ;D6 413018
-r3k2r/8/8/8/8/8/8/R3K2R b KQkq - 0 1 ;D1 26 ;D2 568 ;D3 13744 ;D4 314346 ;D5 7594526 ;D6 179862938
-r3k2r/8/8/8/8/8/8/1R2K2R b Kkq - 0 1 ;D1 26 ;D2 583 ;D3 14252 ;D4 334705 ;D5 8198901 ;D6 198328929
-r3k2r/8/8/8/8/8/8/2R1K2R b Kkq - 0 1 ;D1 25 ;D2 560 ;D3 13592 ;D4 317324 ;D5 7710115 ;D6 185959088
-r3k2r/8/8/8/8/8/8/R3K1R1 b Qkq - 0 1 ;D1 25 ;D2 560 ;D3 13607 ;D4 320792 ;D5 7848606 ;D6 190755813
-1r2k2r/8/8/8/8/8/8/R3K2R b KQk - 0 1 ;D1 25 ;D2 567 ;D3 14095 ;D4 328965 ;D5 8153719 ;D6 195629489
-2r1k2r/8/8/8/8/8/8/R3K2R b KQk - 0 1 ;D1 25 ;D2 548 ;D3 13502 ;D4 312835 ;D5 7736373 ;D6 184411439
-r3k1r1/8/8/8/8/8/8/R3K2R b KQq - 0 1 ;D1 25 ;D2 547 ;D3 13579 ;D4 316214 ;D5 7878456 ;D6 189224276
-8/1n4N1/2k5/8/8/5K2/1N4n1/8 w - - 0 1 ;D1 14 ;D2 195 ;D3 2760 ;D4 38675 ;D5 570726 ;D6 8107539
-8/1k6/8/5N2/8/4n3/8/2K5 w - - 0 1 ;D1 11 ;D2 156 ;D3 1636 ;D4 20534 ;D5 223507 ;D6 2594412
-8/8/4k3/3Nn3/3nN3/4K3/8/8 w - - 0 1 ;D1 19 ;D2 289 ;D3 4442 ;D4 73584 ;D5 1198299 ;D6 19870403
-K7/8/2n5/1n6/8/8/8/k6N w - - 0 1 ;D1 3 ;D2 51 ;D3 345 ;D4 5301 ;D5 38348 ;D6 588695
-k7/8/2N5/1N6/8/8/8/K6n w - - 0 1 ;D1 17 ;D2 54 ;D3 835 ;D4 5910 ;D5 92250 ;D6 688780
-8/1n4N1/2k5/8/8/5K2/1N4n1/8 b - - 0 1 ;D1 15 ;D2 193 ;D3 2816 ;D4 40039 ;D5 582642 ;D6 8503277
-8/1k6/8/5N2/8/4n3/8/2K5 b - - 0 1 ;D1 16 ;D2 180 ;D3 2290 ;D4 24640 ;D5 288141 ;D6 3147566
-8/8/3K4/3Nn3/3nN3/4k3/8/8 b - - 0 1 ;D1 4 ;D2 68 ;D3 1118 ;D4 16199 ;D5 281190 ;D6 4405103
-K7/8/2n5/1n6/8/8/8/k6N b - - 0 1 ;D1 17 ;D2 54 ;D3 835 ;D4 5910 ;D5 92250 ;D6 688780
-k7/8/2N5/1N6/8/8/8/K6n b - - 0 1 ;D1 3 ;D2 51 ;D3 345 ;D4 5301 ;D5 38348 ;D6 588695
-B6b/8/8/8/2K5/4k3/8/b6B w - - 0 1 ;D1 17 ;D2 278 ;D3 4607 ;D4 76778 ;D5 1320507 ;D6 22823890
-8/8/1B6/7b/7k/8/2B1b3/7K w - - 0 1 ;D1 21 ;D2 316 ;D3 5744 ;D4 93338 ;D5 1713368 ;D6 28861171
-k7/B7/1B6/1B6/8/8/8/K6b w - - 0 1 ;D1 21 ;D2 144 ;D3 3242 ;D4 32955 ;D5 787524 ;D6 7881673
-K7/b7/1b6/1b6/8/8/8/k6B w - - 0 1 ;D1 7 ;D2 143 ;D3 1416 ;D4 31787 ;D5 310862 ;D6 7382896
-B6b/8/8/8/2K5/5k2/8/b6B b - - 0 1 ;D1 6 ;D2 106 ;D3 1829 ;D4 31151 ;D5 530585 ;D6 9250746
-8/8/1B6/7b/7k/8/2B1b3/7K b - - 0 1 ;D1 17 ;D2 309 ;D3 5133 ;D4 93603 ;D5 1591064 ;D6 29027891
-k7/B7/1B6/1B6/8/8/8/K6b b - - 0 1 ;D1 7 ;D2 143 ;D3 1416 ;D4 31787 ;D5 310862 ;D6 7382896
-K7/b7/1b6/1b6/8/8/8/k6B b - - 0 1 ;D1 21 ;D2 144 ;D3 3242 ;D4 32955 ;D5 787524 ;D6 7881673
-7k/RR6/8/8/8/8/rr6/7K w - - 0 1 ;D1 19 ;D2 275 ;D3 5300 ;D4 104342 ;D5 2161211 ;D6 44956585
-R6r/8/8/2K5/5k2/8/8/r6R w - - 0 1 ;D1 36 ;D2 1027 ;D3 29215 ;D4 771461 ;D5 20506480 ;D6 525169084
-7k/RR6/8/8/8/8/rr6/7K b - - 0 1 ;D1 19 ;D2 275 ;D3 5300 ;D4 104342 ;D5 2161211 ;D6 44956585
-R6r/8/8/2K5/5k2/8/8/r6R b - - 0 1 ;D1 36 ;D2 1027 ;D3 29227 ;D4 771368 ;D5 20521342 ;D6 524966748
-6kq/8/8/8/8/8/8/7K w - - 0 1 ;D1 2 ;D2 36 ;D3 143 ;D4 3637 ;D5 14893 ;D6 391507
-6KQ/8/8/8/8/8/8/7k b - - 0 1 ;D1 2 ;D2 36 ;D3 143 ;D4 3637 ;D5 14893 ;D6 391507
-K7/8/8/3Q4/4q3/8/8/7k w - - 0 1 ;D1 6 ;D2 35 ;D3 495 ;D4 8349 ;D5 166741 ;D6 3370175
-6qk/8/8/8/8/8/8/7K b - - 0 1 ;D1 22 ;D2 43 ;D3 1015 ;D4 4167 ;D5 105749 ;D6 419369
-6KQ/8/8/8/8/8/8/7k b - - 0 1 ;D1 2 ;D2 36 ;D3 143 ;D4 3637 ;D5 14893 ;D6 391507
-K7/8/8/3Q4/4q3/8/8/7k b - - 0 1 ;D1 6 ;D2 35 ;D3 495 ;D4 8349 ;D5 166741 ;D6 3370175
-8/8/8/8/8/K7/P7/k7 w - - 0 1 ;D1 3 ;D2 7 ;D3 43 ;D4 199 ;D5 1347 ;D6 6249
-8/8/8/8/8/7K/7P/7k w - - 0 1 ;D1 3 ;D2 7 ;D3 43 ;D4 199 ;D5 1347 ;D6 6249
-K7/p7/k7/8/8/8/8/8 w - - 0 1 ;D1 1 ;D2 3 ;D3 12 ;D4 80 ;D5 342 ;D6 2343
-7K/7p/7k/8/8/8/8/8 w - - 0 1 ;D1 1 ;D2 3 ;D3 12 ;D4 80 ;D5 342 ;D6 2343
-8/2k1p3/3pP3/3P2K1/8/8/8/8 w - - 0 1 ;D1 7 ;D2 35 ;D3 210 ;D4 1091 ;D5 7028 ;D6 34834
-8/8/8/8/8/K7/P7/k7 b - - 0 1 ;D1 1 ;D2 3 ;D3 12 ;D4 80 ;D5 342 ;D6 2343
-8/8/8/8/8/7K/7P/7k b - - 0 1 ;D1 1 ;D2 3 ;D3 12 ;D4 80 ;D5 342 ;D6 2343
-K7/p7/k7/8/8/8/8/8 b - - 0 1 ;D1 3 ;D2 7 ;D3 43 ;D4 199 ;D5 1347 ;D6 6249
-7K/7p/7k/8/8/8/8/8 b - - 0 1 ;D1 3 ;D2 7 ;D3 43 ;D4 199 ;D5 1347 ;D6 6249
-8/2k1p3/3pP3/3P2K1/8/8/8/8 b - - 0 1 ;D1 5 ;D2 35 ;D3 182 ;D4 1091 ;D5 5408 ;D6 34822
-8/8/8/8/8/4k3/4P3/4K3 w - - 0 1 ;D1 2 ;D2 8 ;D3 44 ;D4 282 ;D5 1814 ;D6 11848
-4k3/4p3/4K3/8/8/8/8/8 b - - 0 1 ;D1 2 ;D2 8 ;D3 44 ;D4 282 ;D5 1814 ;D6 11848
-8/8/7k/7p/7P/7K/8/8 w - - 0 1 ;D1 3 ;D2 9 ;D3 57 ;D4 360 ;D5 1969 ;D6 10724
-8/8/k7/p7/P7/K7/8/8 w - - 0 1 ;D1 3 ;D2 9 ;D3 57 ;D4 360 ;D5 1969 ;D6 10724
-8/8/3k4/3p4/3P4/3K4/8/8 w - - 0 1 ;D1 5 ;D2 25 ;D3 180 ;D4 1294 ;D5 8296 ;D6 53138
-8/3k4/3p4/8/3P4/3K4/8/8 w - - 0 1 ;D1 8 ;D2 61 ;D3 483 ;D4 3213 ;D5 23599 ;D6 157093
-8/8/3k4/3p4/8/3P4/3K4/8 w - - 0 1 ;D1 8 ;D2 61 ;D3 411 ;D4 3213 ;D5 21637 ;D6 158065
-k7/8/3p4/8/3P4/8/8/7K w - - 0 1 ;D1 4 ;D2 15 ;D3 90 ;D4 534 ;D5 3450 ;D6 20960
-8/8/7k/7p/7P/7K/8/8 b - - 0 1 ;D1 3 ;D2 9 ;D3 57 ;D4 360 ;D5 1969 ;D6 10724
-8/8/k7/p7/P7/K7/8/8 b - - 0 1 ;D1 3 ;D2 9 ;D3 57 ;D4 360 ;D5 1969 ;D6 10724
-8/8/3k4/3p4/3P4/3K4/8/8 b - - 0 1 ;D1 5 ;D2 25 ;D3 180 ;D4 1294 ;D5 8296 ;D6 53138
-8/3k4/3p4/8/3P4/3K4/8/8 b - - 0 1 ;D1 8 ;D2 61 ;D3 411 ;D4 3213 ;D5 21637 ;D6 158065
-8/8/3k4/3p4/8/3P4/3K4/8 b - - 0 1 ;D1 8 ;D2 61 ;D3 483 ;D4 3213 ;D5 23599 ;D6 157093
-k7/8/3p4/8/3P4/8/8/7K b - - 0 1 ;D1 4 ;D2 15 ;D3 89 ;D4 537 ;D5 3309 ;D6 21104
-7k/3p4/8/8/3P4/8/8/K7 w - - 0 1 ;D1 4 ;D2 19 ;D3 117 ;D4 720 ;D5 4661 ;D6 32191
-7k/8/8/3p4/8/8/3P4/K7 w - - 0 1 ;D1 5 ;D2 19 ;D3 116 ;D4 716 ;D5 4786 ;D6 30980
-k7/8/8/7p/6P1/8/8/K7 w - - 0 1 ;D1 5 ;D2 22 ;D3 139 ;D4 877 ;D5 6112 ;D6 41874
-k7/8/7p/8/8/6P1/8/K7 w - - 0 1 ;D1 4 ;D2 16 ;D3 101 ;D4 637 ;D5 4354 ;D6 29679
-k7/8/8/6p1/7P/8/8/K7 w - - 0 1 ;D1 5 ;D2 22 ;D3 139 ;D4 877 ;D5 6112 ;D6 41874
-k7/8/6p1/8/8/7P/8/K7 w - - 0 1 ;D1 4 ;D2 16 ;D3 101 ;D4 637 ;D5 4354 ;D6 29679
-k7/8/8/3p4/4p3/8/8/7K w - - 0 1 ;D1 3 ;D2 15 ;D3 84 ;D4 573 ;D5 3013 ;D6 22886
-k7/8/3p4/8/8/4P3/8/7K w - - 0 1 ;D1 4 ;D2 16 ;D3 101 ;D4 637 ;D5 4271 ;D6 28662
-7k/3p4/8/8/3P4/8/8/K7 b - - 0 1 ;D1 5 ;D2 19 ;D3 117 ;D4 720 ;D5 5014 ;D6 32167
-7k/8/8/3p4/8/8/3P4/K7 b - - 0 1 ;D1 4 ;D2 19 ;D3 117 ;D4 712 ;D5 4658 ;D6 30749
-k7/8/8/7p/6P1/8/8/K7 b - - 0 1 ;D1 5 ;D2 22 ;D3 139 ;D4 877 ;D5 6112 ;D6 41874
-k7/8/7p/8/8/6P1/8/K7 b - - 0 1 ;D1 4 ;D2 16 ;D3 101 ;D4 637 ;D5 4354 ;D6 29679
-k7/8/8/6p1/7P/8/8/K7 b - - 0 1 ;D1 5 ;D2 22 ;D3 139 ;D4 877 ;D5 6112 ;D6 41874
-k7/8/6p1/8/8/7P/8/K7 b - - 0 1 ;D1 4 ;D2 16 ;D3 101 ;D4 637 ;D5 4354 ;D6 29679
-k7/8/8/3p4/4p3/8/8/7K b - - 0 1 ;D1 5 ;D2 15 ;D3 102 ;D4 569 ;D5 4337 ;D6 22579
-k7/8/3p4/8/8/4P3/8/7K b - - 0 1 ;D1 4 ;D2 16 ;D3 101 ;D4 637 ;D5 4271 ;D6 28662
-7k/8/8/p7/1P6/8/8/7K w - - 0 1 ;D1 5 ;D2 22 ;D3 139 ;D4 877 ;D5 6112 ;D6 41874
-7k/8/p7/8/8/1P6/8/7K w - - 0 1 ;D1 4 ;D2 16 ;D3 101 ;D4 637 ;D5 4354 ;D6 29679
-7k/8/8/1p6/P7/8/8/7K w - - 0 1 ;D1 5 ;D2 22 ;D3 139 ;D4 877 ;D5 6112 ;D6 41874
-7k/8/1p6/8/8/P7/8/7K w - - 0 1 ;D1 4 ;D2 16 ;D3 101 ;D4 637 ;D5 4354 ;D6 29679
-k7/7p/8/8/8/8/6P1/K7 w - - 0 1 ;D1 5 ;D2 25 ;D3 161 ;D4 1035 ;D5 7574 ;D6 55338
-k7/6p1/8/8/8/8/7P/K7 w - - 0 1 ;D1 5 ;D2 25 ;D3 161 ;D4 1035 ;D5 7574 ;D6 55338
-3k4/3pp3/8/8/8/8/3PP3/3K4 w - - 0 1 ;D1 7 ;D2 49 ;D3 378 ;D4 2902 ;D5 24122 ;D6 199002
-7k/8/8/p7/1P6/8/8/7K b - - 0 1 ;D1 5 ;D2 22 ;D3 139 ;D4 877 ;D5 6112 ;D6 41874
-7k/8/p7/8/8/1P6/8/7K b - - 0 1 ;D1 4 ;D2 16 ;D3 101 ;D4 637 ;D5 4354 ;D6 29679
-7k/8/8/1p6/P7/8/8/7K b - - 0 1 ;D1 5 ;D2 22 ;D3 139 ;D4 877 ;D5 6112 ;D6 41874
-7k/8/1p6/8/8/P7/8/7K b - - 0 1 ;D1 4 ;D2 16 ;D3 101 ;D4 637 ;D5 4354 ;D6 29679
-k7/7p/8/8/8/8/6P1/K7 b - - 0 1 ;D1 5 ;D2 25 ;D3 161 ;D4 1035 ;D5 7574 ;D6 55338
-k7/6p1/8/8/8/8/7P/K7 b - - 0 1 ;D1 5 ;D2 25 ;D3 161 ;D4 1035 ;D5 7574 ;D6 55338
-3k4/3pp3/8/8/8/8/3PP3/3K4 b - - 0 1 ;D1 7 ;D2 49 ;D3 378 ;D4 2902 ;D5 24122 ;D6 199002
-8/Pk6/8/8/8/8/6Kp/8 w - - 0 1 ;D1 11 ;D2 97 ;D3 887 ;D4 8048 ;D5 90606 ;D6 1030499
-n1n5/1Pk5/8/8/8/8/5Kp1/5N1N w - - 0 1 ;D1 24 ;D2 421 ;D3 7421 ;D4 124608 ;D5 2193768 ;D6 37665329
-8/PPPk4/8/8/8/8/4Kppp/8 w - - 0 1 ;D1 18 ;D2 270 ;D3 4699 ;D4 79355 ;D5 1533145 ;D6 28859283
-n1n5/PPPk4/8/8/8/8/4Kppp/5N1N w - - 0 1 ;D1 24 ;D2 496 ;D3 9483 ;D4 182838 ;D5 3605103 ;D6 71179139
-8/Pk6/8/8/8/8/6Kp/8 b - - 0 1 ;D1 11 ;D2 97 ;D3 887 ;D4 8048 ;D5 90606 ;D6 1030499
-n1n5/1Pk5/8/8/8/8/5Kp1/5N1N b - - 0 1 ;D1 24 ;D2 421 ;D3 7421 ;D4 124608 ;D5 2193768 ;D6 37665329
-8/PPPk4/8/8/8/8/4Kppp/8 b - - 0 1 ;D1 18 ;D2 270 ;D3 4699 ;D4 79355 ;D5 1533145 ;D6 28859283
-n1n5/PPPk4/8/8/8/8/4Kppp/5N1N b - - 0 1 ;D1 24 ;D2 496 ;D3 9483 ;D4 182838 ;D5 3605103 ;D6 71179139
- */
Index: src/main/java/javacode/chessprogram/moveGeneration/PieceMoveKing.java
===================================================================
--- src/main/java/javacode/chessprogram/moveGeneration/PieceMoveKing.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/javacode/chessprogram/moveGeneration/PieceMoveKing.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
@@ -1,50 +0,0 @@
-package javacode.chessprogram.moveGeneration;
-
-import javacode.chessprogram.bitboards.King;
-import javacode.chessprogram.chess.BitIndexing;
-import javacode.chessprogram.chess.Chessboard;
-
-import java.util.List;
-
-import static javacode.chessprogram.chess.BitExtractor.getAllPieces;
-
-public class PieceMoveKing {
-
-    public static long singleKingPushes(Chessboard board, long piece, boolean white, long legalPushes){
-        return singleKingAllMoves(board, piece, white, legalPushes, 0);
-    }
-
-    public static long singleKingCaptures(Chessboard board, long piece, boolean white, long legalCaptures){
-        return singleKingAllMoves(board, piece, white, 0, legalCaptures);
-    }
-
-    private static long singleKingAllMoves(Chessboard board, long piece, boolean white, long legalPushes, long legalCaptures){
-        if (piece == 0) return 0;
-        long table = 0;
-        int index = BitIndexing.getIndexOfFirstPiece(piece);
-
-        long l1 = King.KING_MOVE_TABLE[index];
-        table |= l1;
-       
-        return table & (legalPushes | legalCaptures);
-    }
-
-    static long masterAttackTableKing(Chessboard board, boolean white,
-                                             long ignoreThesePieces, long legalPushes, long legalCaptures){
-        long ans = 0, king;
-        if (white){
-            king = board.WHITE_KING;
-        }
-        else {
-            king = board.BLACK_KING;
-        }
-
-        List<Long> allKings = getAllPieces(king, ignoreThesePieces);
-        for (Long piece : allKings){
-            ans |= singleKingAllMoves(board, piece, white, legalPushes, legalCaptures);
-        }
-        return ans;
-    }
-
-
-}
Index: src/main/java/javacode/chessprogram/moveGeneration/PieceMoveKnight.java
===================================================================
--- src/main/java/javacode/chessprogram/moveGeneration/PieceMoveKnight.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/javacode/chessprogram/moveGeneration/PieceMoveKnight.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
@@ -1,35 +0,0 @@
-package javacode.chessprogram.moveGeneration;
-
-import javacode.chessprogram.chess.Chessboard;
-
-import java.util.List;
-
-import static javacode.chessprogram.bitboards.Knight.*;
-import static javacode.chessprogram.chess.BitExtractor.getAllPieces;
-import static javacode.chessprogram.chess.BitIndexing.*;
-
-public class PieceMoveKnight {
-
-    public static long singleKnightTable(Chessboard board, long piece, boolean white, long mask){
-        return KNIGHT_MOVE_TABLE[getIndexOfFirstPiece(piece)] & mask;
-    }
-
-    static long masterAttackTableKnights(Chessboard board, boolean white,
-                                                long ignoreThesePieces, long legalPushes, long legalCaptures){
-        long ans = 0, knights;
-        if (white){
-            knights = board.WHITE_KNIGHTS;
-        }
-        else {
-            knights = board.BLACK_KNIGHTS;
-        }
-
-        List<Long> allKnights = getAllPieces(knights, ignoreThesePieces);
-        for (Long piece : allKnights){
-            ans |= singleKnightTable(board, piece, white, legalPushes | legalCaptures);
-        }
-
-        return ans;
-    }
-
-}
Index: src/main/java/javacode/chessprogram/moveGeneration/PieceMovePawns.java
===================================================================
--- src/main/java/javacode/chessprogram/moveGeneration/PieceMovePawns.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/javacode/chessprogram/moveGeneration/PieceMovePawns.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
@@ -1,78 +0,0 @@
-package javacode.chessprogram.moveGeneration;
-
-import javacode.chessprogram.bitboards.BitBoards;
-import javacode.chessprogram.bitboards.PawnCaptures;
-import javacode.chessprogram.chess.BitIndexing;
-import javacode.chessprogram.chess.Chessboard;
-
-import java.util.List;
-
-import static javacode.chessprogram.chess.BitExtractor.getAllPieces;
-
-public class PieceMovePawns {
-
-    static long singlePawnPushes(Chessboard board, long piece, boolean white, long legalPushes) {
-        long allPieces = board.ALL_WHITE_PIECES() | board.ALL_BLACK_PIECES();
-        long HOME_RANK = (white) ? BitBoards.RANK_TWO : BitBoards.RANK_SEVEN;
-        long answer = 0;
-        long temp = piece;
-
-        // promotion moves are handled elsewhere
-        if (white) {
-            do {
-                if ((temp & BitBoards.RANK_EIGHT) != 0) break;
-                temp <<= 8;
-                if ((temp & allPieces) != 0) break;
-                answer |= temp;
-            } while (((temp & BitBoards.RANK_THREE) != 0));
-        }
-        else {
-            do {
-                if ((temp & BitBoards.RANK_ONE) != 0) break;
-                temp >>>= 8;
-                if ((temp & allPieces) != 0) break;
-                answer |= temp;
-            } while (((temp & BitBoards.RANK_SIX) != 0));
-        }
-        return answer & legalPushes;
-    }
-
-    public static long singlePawnCaptures(Chessboard board, long piece, boolean white, long legalCaptures) {
-        long allPieces = board.ALL_WHITE_PIECES() | board.ALL_BLACK_PIECES();
-        long answer = 0;
-
-        if (piece == 0) {
-            return 0;
-        }
-        if (white){
-            int index = BitIndexing.getIndexOfFirstPiece(piece);
-            long l = PawnCaptures.PAWN_CAPTURE_TABLE_WHITE[index];
-            answer |= l;
-        }
-        else{
-            long table = 0;
-            int index = BitIndexing.getIndexOfFirstPiece(piece);
-            long l = PawnCaptures.PAWN_CAPTURE_TABLE_BLACK[index];
-            answer |= l;
-        }
-
-        return answer & legalCaptures;
-    }
-
-    public static long masterPawnCapturesTable(Chessboard board, boolean white,
-                                               long ignoreThesePieces, long legalCaptures){
-        long ans = 0, pawns;
-        if (white){
-            pawns = board.WHITE_PAWNS;
-        }
-        else {
-            pawns = board.BLACK_PAWNS;
-        }
-        List<Long> allPawns = getAllPieces(pawns, ignoreThesePieces);
-        for (Long piece : allPawns){
-            ans |= singlePawnCaptures(board, piece, white, legalCaptures);
-        }
-        return ans;
-    }
-
-}
Index: src/main/java/javacode/chessprogram/moveGeneration/PieceMoveSliding.java
===================================================================
--- src/main/java/javacode/chessprogram/moveGeneration/PieceMoveSliding.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/javacode/chessprogram/moveGeneration/PieceMoveSliding.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
@@ -1,147 +0,0 @@
-package javacode.chessprogram.moveGeneration;
-
-import javacode.chessprogram.bitboards.BitBoards;
-import javacode.chessprogram.chess.BitExtractor;
-import javacode.chessprogram.chess.Chessboard;
-
-import java.util.List;
-
-public class PieceMoveSliding {
-
-    public static long singleBishopPushes(Chessboard board, long piece, boolean white, long legalPushes){
-        return singleBishopAllMoves(board, piece, white, legalPushes, 0);
-    }
-
-    public static long singleBishopCaptures(Chessboard board, long piece, boolean white, long legalCaptures){
-        return singleBishopAllMoves(board, piece, white, 0, legalCaptures);
-    }
-
-    private static long singleBishopAllMoves(Chessboard board, long piece, boolean white, long legalPushes, long legalCaptures){
-        long ALL_PIECES = board.ALL_WHITE_PIECES() | board.ALL_BLACK_PIECES(),
-                NORTH_WEST = BitBoards.FILE_A | BitBoards.RANK_EIGHT,
-                NORTH_EAST = BitBoards.FILE_H | BitBoards.RANK_EIGHT,
-                SOUTH_WEST = BitBoards.FILE_A | BitBoards.RANK_ONE,
-                SOUTH_EAST = BitBoards.FILE_H | BitBoards.RANK_ONE;
-
-        long answer = 0;
-        long temp = piece;
-
-        while (true) {
-            if ((temp & NORTH_WEST) != 0) break;
-            temp <<= 9;
-            answer |= temp;
-            if ((temp & ALL_PIECES) != 0) break;
-        }
-        temp = piece;
-        while (true) {
-            if ((temp & NORTH_EAST) != 0) break;
-            temp <<= 7;
-            answer |= temp;
-            if ((temp & ALL_PIECES) != 0) break;
-        }
-        temp = piece;
-        while (true) {
-            if ((temp & SOUTH_WEST) != 0) break;
-            temp >>>= 7;
-            answer |= temp;
-            if ((temp & ALL_PIECES) != 0) break;
-        }
-        temp = piece;
-        while (true) {
-            if ((temp & SOUTH_EAST) != 0) break;
-            temp >>>= 9;
-            answer |= temp;
-            if ((temp & ALL_PIECES) != 0) break;
-        }
-        return answer & (legalPushes | legalCaptures);
-    }
-
-
-    public static long singleRookPushes(Chessboard board, long piece, boolean white, long legalPushes){
-        return singleRookAllMoves(board, piece, white, legalPushes, 0);
-    }
-
-    public static long singleRookCaptures(Chessboard board, long piece, boolean white, long legalCaptures){
-        return singleRookAllMoves(board, piece, white, 0, legalCaptures);
-    }
-    
-    private static long singleRookAllMoves(Chessboard board, long piece, boolean white, long legalPushes, long legalCaptures){
-        long allPieces = board.ALL_WHITE_PIECES() | board.ALL_BLACK_PIECES();
-        long answer = 0;
-        long temp = piece;
-        while (true) {
-            if ((temp & BitBoards.FILE_A) != 0) break;
-            temp <<= 1;
-            answer |= temp;
-            if ((temp & allPieces) != 0) break;
-        }
-        temp = piece;
-        while (true) {
-            if ((temp & BitBoards.FILE_H) != 0) break;
-            temp >>>= 1;
-            answer |= temp;
-            if ((temp & allPieces) != 0) break;
-        }
-        temp = piece;
-        while (true) {
-            if ((temp & BitBoards.RANK_EIGHT) != 0) break;
-            temp <<= 8;
-            answer |= temp;
-            if ((temp & allPieces) != 0) break;
-        }
-        temp = piece;
-        while (true) {
-            if ((temp & BitBoards.RANK_ONE) != 0) break;
-            temp >>>= 8;
-            answer |= temp;
-            if ((temp & allPieces) != 0) break;
-        }
-        return answer & (legalPushes | legalCaptures);
-    }
-
-    public static long singleQueenPushes(Chessboard board, long piece, boolean white, long legalPushes){
-        return singleQueenAllMoves(board, piece, white, legalPushes, 0);
-    }
-
-    public static long singleQueenCaptures(Chessboard board, long piece, boolean white, long legalCaptures){
-        return singleQueenAllMoves(board, piece, white, 0, legalCaptures);
-    }
-
-    private static long singleQueenAllMoves(Chessboard board, long piece, boolean white, long legalPushes, long legalCaptures){
-        return singleBishopAllMoves(board, piece, white, legalPushes, legalCaptures) | singleRookAllMoves(board, piece, white, legalPushes, legalCaptures);
-    }
-
-    static long masterAttackTableSliding(Chessboard board, boolean white,
-                                                long ignoreThesePieces, long legalPushes, long legalCaptures){
-        long ans = 0, bishops, rooks, queens;
-        if (white){
-            bishops = board.WHITE_BISHOPS;
-            rooks = board.WHITE_ROOKS;
-            queens = board.WHITE_QUEEN;
-        }
-        else {
-            bishops = board.BLACK_BISHOPS;
-            rooks = board.BLACK_ROOKS;
-            queens = board.BLACK_QUEEN;
-        }
-
-        List<Long> allBishops = BitExtractor.getAllPieces(bishops, ignoreThesePieces);
-        for (Long piece : allBishops){
-            ans |= singleBishopPushes(board, piece, white, legalPushes);
-            ans |= singleBishopCaptures(board, piece, white, legalCaptures);
-        }
-
-        List<Long> allRooks = BitExtractor.getAllPieces(rooks, ignoreThesePieces);
-        for (Long piece : allRooks){
-            ans |= singleRookPushes(board, piece, white, legalPushes);
-            ans |= singleRookCaptures(board, piece, white, legalCaptures);
-        }
-
-        List<Long> allQueens = BitExtractor.getAllPieces(queens, ignoreThesePieces);
-        for (Long piece : allQueens){
-            ans |= singleQueenPushes(board, piece, white, legalPushes);
-            ans |= singleQueenCaptures(board, piece, white, legalCaptures);
-        }
-        return ans;
-    }
-}
Index: src/main/java/javacode/chessprogram/moveGeneration/PinnedManager.java
===================================================================
--- src/main/java/javacode/chessprogram/moveGeneration/PinnedManager.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/javacode/chessprogram/moveGeneration/PinnedManager.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
@@ -1,269 +0,0 @@
-package javacode.chessprogram.moveGeneration;
-
-import javacode.chessprogram.chess.Chessboard;
-
-import static javacode.chessprogram.bitboards.BitBoards.*;
-
-public class PinnedManager {
-
-    public static long whichPiecesArePinned(Chessboard board, boolean white, long squareOfInterest){
-        if (squareOfInterest == 0) {
-            return 0;
-        }
-        long pinnedPieces = 0;
-        pinnedPieces |= diagonalPins(board, white, squareOfInterest);
-        pinnedPieces |= cardinalPins(board, white, squareOfInterest);
-        return pinnedPieces;
-    }
-
-    private static long diagonalPins(Chessboard board, boolean white, long squareOfInterest) {
-        long ALL_PIECES = board.ALL_WHITE_PIECES() | board.ALL_BLACK_PIECES();
-        long myPieces = (white) ? board.ALL_WHITE_PIECES() : board.ALL_BLACK_PIECES();
-        long enemyPieces = (!white) ? board.ALL_WHITE_PIECES() : board.ALL_BLACK_PIECES();
-        long diagonalThreats = (white) ? (board.BLACK_BISHOPS | board.BLACK_QUEEN) : (board.WHITE_BISHOPS | board.WHITE_QUEEN);
-        long diagonalPinnedPieces = 0;
-
-        long temp = squareOfInterest;
-        thisDirection:
-        while (true) {
-            if ((temp & NORTH_WEST) != 0) {
-                break;
-            }
-            temp <<= 9;
-            if ((temp & myPieces) != 0) {
-                long possiblePin = temp;
-                while ((temp & NORTH_WEST) == 0) {
-                    temp <<= 9;
-                    if ((temp & diagonalThreats) != 0) {
-                        diagonalPinnedPieces |= possiblePin;
-                        break thisDirection;
-                    }
-                    // end loop if encounter a non diagonal / cardinal pinner piece, or Another friendly piece
-                    if ((temp & enemyPieces) != 0) { // these two can be combined
-                        break thisDirection;
-                    }
-                    if ((temp & myPieces) != 0) {
-                        break thisDirection;
-                    }
-                }
-            }
-            // end loop if encounter a non diagonal / cardinal pinner piece
-            if ((temp & enemyPieces) != 0) {
-                break;
-            }
-        }
-
-        temp = squareOfInterest;
-        thisDirection:
-        while (true) {
-            if ((temp & NORTH_EAST) != 0) {
-                break;
-            }
-            temp <<= 7;
-            if ((temp & myPieces) != 0) {
-                long possiblePin = temp;
-                while ((temp & NORTH_EAST) == 0) {
-                    temp <<= 7;
-                    if ((temp & diagonalThreats) != 0) {
-                        diagonalPinnedPieces |= possiblePin;
-                        break thisDirection;
-                    }
-                    if ((temp & enemyPieces) != 0) {
-                        break thisDirection;
-                    }
-                    if ((temp & myPieces) != 0) {
-                        break thisDirection;
-                    }
-                }
-            }
-            if ((temp & enemyPieces) != 0) {
-                break;
-            }
-        }
-
-        temp = squareOfInterest;
-        thisDirection:
-        while (true) {
-            if ((temp & SOUTH_WEST) != 0) {
-                break;
-            }
-            temp >>>= 7;
-            if ((temp & myPieces) != 0) {
-                long possiblePin = temp;
-                while ((temp & SOUTH_WEST) == 0) {
-                    temp >>>= 7;
-                    if ((temp & diagonalThreats) != 0) {
-                        diagonalPinnedPieces |= possiblePin;
-                        break thisDirection;
-                    }
-                    if ((temp & enemyPieces) != 0) {
-                        break thisDirection;
-                    }
-                    if ((temp & myPieces) != 0) {
-                        break thisDirection;
-                    }
-                }
-            }
-            if ((temp & enemyPieces) != 0) {
-                break;
-            }
-        }
-
-
-        temp = squareOfInterest;
-        thisDirection:
-        while (true) {
-            if ((temp & SOUTH_EAST) != 0) {
-                break;
-            }
-            temp >>>= 9;
-            if ((temp & myPieces) != 0) {
-                long possiblePin = temp;
-                while ((temp & SOUTH_EAST) == 0) {
-                    temp >>>= 9;
-                    if ((temp & diagonalThreats) != 0) {
-                        diagonalPinnedPieces |= possiblePin;
-                        break thisDirection;
-                    }
-                    if ((temp & enemyPieces) != 0) {
-                        break thisDirection;
-                    }
-                    if ((temp & myPieces) != 0) {
-                        break thisDirection;
-                    }
-                }
-            }
-            if ((temp & enemyPieces) != 0) {
-                break;
-            }
-        }
-
-        return diagonalPinnedPieces;
-    }
-
-    private static long cardinalPins(Chessboard board, boolean white, long squareOfInterest) {
-        long ALL_PIECES = board.ALL_WHITE_PIECES() | board.ALL_BLACK_PIECES();
-        long myPieces = (white) ? board.ALL_WHITE_PIECES() : board.ALL_BLACK_PIECES();
-        long enemyPieces = (!white) ? board.ALL_WHITE_PIECES() : board.ALL_BLACK_PIECES();
-        long cardinalThreats = (white) ? (board.BLACK_ROOKS | board.BLACK_QUEEN) : (board.WHITE_ROOKS | board.WHITE_QUEEN);
-
-        long cardinalPinnedPieces = 0;
-
-        long temp = squareOfInterest;
-        thisDirection:
-        while (true) {
-            if ((temp & FILE_A) != 0) {
-                break;
-            }
-            temp <<= 1;
-            if ((temp & myPieces) != 0) {
-                long possiblePin = temp;
-                while ((temp & FILE_A) == 0) {
-                    temp <<= 1;
-                    if ((temp & cardinalThreats) != 0) {
-                        cardinalPinnedPieces |= possiblePin;
-                        break thisDirection;
-                    }
-                    if ((temp & enemyPieces) != 0) {
-                        break thisDirection;
-                    }
-                    if ((temp & myPieces) != 0) {
-                        break thisDirection;
-                    }
-                }
-            }
-            if ((temp & enemyPieces) != 0) {
-                break;
-            }
-        }
-
-        temp = squareOfInterest;
-        thisDirection:
-        while (true) {
-            if ((temp & RANK_EIGHT) != 0) {
-                break;
-            }
-            temp <<= 8;
-            if ((temp & myPieces) != 0) {
-                long possiblePin = temp;
-                while ((temp & RANK_EIGHT) == 0) {
-                    temp <<= 8;
-                    if ((temp & cardinalThreats) != 0) {
-                        cardinalPinnedPieces |= possiblePin;
-                        break thisDirection;
-                    }
-                    if ((temp & enemyPieces) != 0) {
-                        break thisDirection;
-                    }
-                    if ((temp & myPieces) != 0) {
-                        break thisDirection;
-                    }
-                }
-            }
-            if ((temp & enemyPieces) != 0) {
-                break;
-            }
-        }
-
-        temp = squareOfInterest;
-        thisDirection:
-        while (true) {
-            if ((temp & FILE_H) != 0) {
-                break;
-            }
-            temp >>>= 1;
-            if ((temp & myPieces) != 0) {
-                long possiblePin = temp;
-                while ((temp & FILE_H) == 0) {
-                    temp >>>= 1;
-                    if ((temp & cardinalThreats) != 0) {
-                        cardinalPinnedPieces |= possiblePin;
-                        break thisDirection;
-                    }
-                    if ((temp & enemyPieces) != 0) {
-                        break thisDirection;
-                    }
-                    if ((temp & myPieces) != 0) {
-                        break thisDirection;
-                    }
-                }
-            }
-            if ((temp & enemyPieces) != 0){
-                break;
-            }
-        }
-
-
-        temp = squareOfInterest;
-        thisDirection:
-        while (true) {
-            if ((temp & RANK_ONE) != 0) {
-                break;
-            }
-            temp >>>= 8;
-            if ((temp & myPieces) != 0) {
-                long possiblePin = temp;
-                while ((temp & RANK_ONE) == 0) {
-                    temp >>>= 8;
-                    if ((temp & cardinalThreats) != 0) {
-                        cardinalPinnedPieces |= possiblePin;
-                        break thisDirection;
-                    }
-                    if ((temp & enemyPieces) != 0) {
-                        break thisDirection;
-                    }
-                    if ((temp & myPieces) != 0) {
-                        break thisDirection;
-                    }
-                }
-            }
-            if ((temp & enemyPieces) != 0) {
-                break;
-            }
-        }
-
-        return cardinalPinnedPieces;
-    }
-
-
-}
Index: src/main/java/javacode/chessprogram/bitboards/RandomBoard.java
===================================================================
--- src/main/java/javacode/chessprogram/bitboards/RandomBoard.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/javacode/chessprogram/bitboards/RandomBoard.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
@@ -1,77 +0,0 @@
-package javacode.chessprogram.bitboards;
-
-import javacode.chessprogram.chess.Chessboard;
-import javacode.chessprogram.graphicsandui.Art;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Random;
-
-public class RandomBoard {
-
-    public static void printBoards (Chessboard[] bs){
-        for (int i = 0; i < bs.length; i++) {
-            Chessboard b = bs[i];
-            System.out.println("--------- " + i + " -------------");
-            System.out.println("\n--- " + i + " ---");
-            String s = Art.boardArt(bs[i]);
-            System.out.println(s);
-        }
-    }
-    
-    public static Chessboard[] boardForTests (){
-        int num = 18;
-        Chessboard[] bs = new Chessboard[num];
-        for (int i = 0; i < num; i ++) {
-            if (i > 0 && i % 3 == 0) {
-                bs[i] = RandomBoard.makeRandomBoard(i * 100);
-            }
-            else {
-                bs[i] = RandomBoard.makeRandomBoard(i);
-            }
-        }
-        return bs;
-    }
-    
-    private static List<Long> randomLongs(Random r, int num){
-        List<Long> ans = new ArrayList<>();
-        int i = 0;
-        while (i < 12){
-            int j = r.nextInt(63);
-            double pow = Math.pow(2, j);
-            long l = (long) pow;
-
-            if (ans.contains(l)) {
-                continue;
-            }
-            ans.add(l);
-            i++;
-        }
-        return ans;
-    }
-
-    private static Chessboard makeRandomBoard(long seed){
-        Chessboard board = new Chessboard();
-        Random r = new Random(seed);
-        int ii = 12;
-        List<Long> longs = randomLongs(r, ii);
-
-        board.WHITE_PAWNS = longs.get(0);
-        board.WHITE_KNIGHTS = longs.get(1);
-        board.WHITE_BISHOPS = longs.get(2);
-        board.WHITE_ROOKS = longs.get(3);
-        board.WHITE_QUEEN = longs.get(4);
-        board.WHITE_KING = longs.get(5);
-
-        board.BLACK_PAWNS = longs.get(6);
-        board.BLACK_KNIGHTS = longs.get(7);
-        board.BLACK_BISHOPS = longs.get(8);
-        board.BLACK_ROOKS = longs.get(9);
-        board.BLACK_QUEEN = longs.get(10);
-        board.BLACK_KING = longs.get(11);
-
-        return board;
-    }
-
-
-}
Index: src/main/java/javacode/chessprogram/moveMaking/StackMoveData.java
===================================================================
--- src/main/java/javacode/chessprogram/moveMaking/StackMoveData.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/javacode/chessprogram/moveMaking/StackMoveData.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
@@ -1,86 +0,0 @@
-package javacode.chessprogram.moveMaking;
-
-import javacode.chessprogram.chess.Chessboard;
-import javacode.chessprogram.chess.Move;
-
-@SuppressWarnings("CanBeFinal")
-public class StackMoveData {
-    
-    public Move move;
-    public int takenPiece = 0;
-    private int fiftyMoveCounter;
-    public boolean whiteTurn;
-    
-    public enum SpecialMove {
-        BASICQUIETPUSH, BASICLOUDPUSH, BASICCAPTURE, ENPASSANTVICTIM, ENPASSANTCAPTURE, CASTLING, PROMOTION,
-    }
-    public SpecialMove typeOfSpecialMove;
-    
-    // file one : FILE_A 
-    public int enPassantFile = -1;
-    public boolean whiteCanCastleK, whiteCanCastleQ, blackCanCastleK, blackCanCastleQ;
-
-
-    public StackMoveData(Move move, Chessboard board, int fiftyMoveCounter, SpecialMove typeOfSpecialMove) {
-        this.move = move;
-        this.fiftyMoveCounter = fiftyMoveCounter;
-        this.typeOfSpecialMove = typeOfSpecialMove;
-
-        this.whiteTurn = board.isWhiteTurn();
-        
-        this.whiteCanCastleK = board.whiteCanCastleK;
-        this.whiteCanCastleQ = board.whiteCanCastleQ;
-        this.blackCanCastleK = board.blackCanCastleK;
-        this.blackCanCastleQ = board.blackCanCastleQ;
-    }
-
-    
-    public StackMoveData(Move move, Chessboard board, int fiftyMoveCounter, SpecialMove typeOfSpecialMove, int takenPiece) {
-        this.move = move;
-        this.fiftyMoveCounter = fiftyMoveCounter;
-        this.typeOfSpecialMove = typeOfSpecialMove;
-        this.takenPiece = takenPiece;
-
-        this.whiteTurn = board.isWhiteTurn();
-
-        this.whiteCanCastleK = board.whiteCanCastleK;
-        this.whiteCanCastleQ = board.whiteCanCastleQ;
-        this.blackCanCastleK = board.blackCanCastleK;
-        this.blackCanCastleQ = board.blackCanCastleQ;
-    }
-
-
-    public StackMoveData(Move move, Chessboard board, int fiftyMoveCounter, int enPassantFile, SpecialMove typeOfSpecialMove) {
-        this.move = move;
-        this.fiftyMoveCounter = fiftyMoveCounter;
-        this.typeOfSpecialMove = typeOfSpecialMove;
-        
-        if (this.typeOfSpecialMove == SpecialMove.ENPASSANTVICTIM){
-            this.enPassantFile = enPassantFile;
-        }
-
-        this.whiteTurn = board.isWhiteTurn();
-
-        this.whiteCanCastleK = board.whiteCanCastleK;
-        this.whiteCanCastleQ = board.whiteCanCastleQ;
-        this.blackCanCastleK = board.blackCanCastleK;
-        this.blackCanCastleQ = board.blackCanCastleQ;
-    }
-
-
-    @Override
-    public String toString() {
-        return "StackMoveData{" +
-                "move=" + move +
-                ", takenPiece=" + takenPiece +
-                ", fiftyMoveCounter=" + fiftyMoveCounter +
-                ", whiteTurn=" + whiteTurn +
-                ", typeOfSpecialMove=" + typeOfSpecialMove +
-                ", enPassantFile=" + enPassantFile +
-                ", whiteCanCastleK=" + whiteCanCastleK +
-                ", whiteCanCastleQ=" + whiteCanCastleQ +
-                ", blackCanCastleK=" + blackCanCastleK +
-                ", blackCanCastleQ=" + blackCanCastleQ +
-                '}';
-    }
-}
\ No newline at end of file
Index: src/main/java/javacode/chessengine/transpositiontable/ZobristHash.java
===================================================================
--- src/main/java/javacode/chessengine/transpositiontable/ZobristHash.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/javacode/chessengine/transpositiontable/ZobristHash.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
@@ -1,378 +0,0 @@
-package javacode.chessengine.transpositiontable;
-
-import javacode.chessprogram.chess.BitIndexing;
-import javacode.chessprogram.chess.Chessboard;
-import javacode.chessprogram.chess.Move;
-import javacode.chessprogram.moveMaking.StackMoveData;
-import org.junit.Assert;
-
-import java.util.Objects;
-import java.util.Random;
-import java.util.Stack;
-
-import static javacode.chessprogram.bitboards.BitBoards.BLACK_KING;
-import static javacode.chessprogram.bitboards.BitBoards.WHITE_KING;
-import static javacode.chessprogram.chess.BitManipulations.newPieceOnSquare;
-import static javacode.chessprogram.moveMaking.MoveOrganiser.whichPieceOnSquare;
-import static javacode.chessprogram.moveMaking.MoveParser.*;
-import static javacode.chessprogram.moveMaking.StackMoveData.SpecialMove.ENPASSANTVICTIM;
-
-public class ZobristHash {
-    private static final long initHashSeed = 100;
-    final Stack<Long> zobristStack = new Stack<>();
-    private static final long[][] zobristHashPieces = initPieceHash();
-    private static final long[] zobristHashCastlingRights = initCastlingHash();
-    private static final long[] zobristHashEPFiles = initEPHash();
-    static final long zobristHashColourBlack = initColourHash();
-    private long boardHash;
-
-    public ZobristHash(Chessboard board) {
-        this.boardHash = boardToHash(board);
-    }
-
-    long updateWithEPFlags(Chessboard board){
-        Assert.assertTrue(board.moveStack.size() > 0);
-        long hash = 0;
-        StackMoveData peek = board.moveStack.peek();
-        if (peek.typeOfSpecialMove == ENPASSANTVICTIM) {
-            // file one = FILE_A
-            hash ^= zobristHashEPFiles[peek.enPassantFile - 1];
-        }
-        
-        return hash;
-    }
-
-    void updateHashPostMove(Chessboard board, Move move){
-        /*
-        invert colour
-        */
-        boardHash ^= zobristHashColourBlack;
-
-        Assert.assertTrue(board.moveStack.size() > 0);
-        
-        /*
-        if move we just made raised EP flag, update hash
-        */
-        boardHash ^= updateWithEPFlags(board);
-
-        /*
-        if castling rights changed, update hash
-        */
-        boardHash ^= postMoveCastlingRights(board);
-
-    }
-
-    private long postMoveCastlingRights(Chessboard board){
-        long updatedHashValue = 0;
-        StackMoveData peek = board.moveStack.peek();
-        /*
-        undo previous castling rights
-        */
-        int numTo15Undo = 0;
-        if (peek.whiteCanCastleK){
-            numTo15Undo += 1;
-        }
-        if (peek.whiteCanCastleQ){
-            numTo15Undo += 2;
-        }
-        if (peek.blackCanCastleK){
-            numTo15Undo += 4;
-        }
-        if (peek.blackCanCastleQ){
-            numTo15Undo += 8;
-        }
-        Assert.assertTrue(numTo15Undo >= 0 && numTo15Undo <= 15);
-        updatedHashValue ^= zobristHashCastlingRights[numTo15Undo];
- 
-        /*
-        update with new castling rights
-        */
-        int numTo15Do = 0;
-        if (board.whiteCanCastleK){
-            numTo15Do  += 1;
-        }
-
-        if (board.whiteCanCastleQ){
-            numTo15Do  += 2;
-        }
-
-        if (board.blackCanCastleK){
-            numTo15Do  += 4;
-        }
-
-        if (board.blackCanCastleQ){
-            numTo15Do  += 8;
-        }
-
-        updatedHashValue ^= zobristHashCastlingRights[numTo15Do];
-        
-        return updatedHashValue;
-    }
-
-
-    void updateHashPreMove(Chessboard board, Move move){
-        int sourceSquare = move.getSourceAsPieceIndex();
-        int destinationSquareIndex = move.destinationIndex;
-
-        long sourcePiece = newPieceOnSquare(sourceSquare);
-        int sourcePieceIdentifier = whichPieceOnSquare(board, sourcePiece) - 1;
-        long sourceZH = zobristHashPieces[sourceSquare][sourcePieceIdentifier];
-
-        long destinationSquare = newPieceOnSquare(destinationSquareIndex);
-        long destinationZH = zobristHashPieces[destinationSquareIndex][sourcePieceIdentifier];
-
-        boardHash ^= sourceZH;
-        boardHash ^= destinationZH;
-        
-        /*
-        captures
-         */
-        if ((destinationSquare & board.ALL_PIECES()) != 0){
-            int destinationPieceIdentifier = whichPieceOnSquare(board, destinationSquare) - 1;
-            /*
-            remove taken piece from hash
-            */
-            long victimZH = zobristHashPieces[destinationSquareIndex][destinationPieceIdentifier];
-            boardHash ^= victimZH;
-        }
-
-        /* 
-        "positive" EP flag is set in updateHashPostMove, in updateHashPreMove we cancel a previous EP flag
-        */
-        Stack<StackMoveData> moveStack = board.moveStack;
-        if (moveStack.size() > 0){
-            boardHash ^= updateWithEPFlags(board);
-        }
-
-        long destinationPiece = newPieceOnSquare(move.destinationIndex);
-
-        if (isSpecialMove(move)){
-            if (isCastlingMove(move)) {
-                int originalRookIndex = 0;
-                int newRookIndex = 0;
-                if ((sourcePiece & WHITE_KING) != 0){
-                    if (move.destinationIndex == 1){
-                        originalRookIndex = 0;
-                        newRookIndex = move.destinationIndex + 1;
-                    }
-                    else if (move.destinationIndex == 5){
-                        originalRookIndex = 7;
-                        newRookIndex = move.destinationIndex - 1;
-                    }
-                }
-
-                else if ((sourcePiece & BLACK_KING) != 0){
-                    if (move.destinationIndex == 57){
-                        originalRookIndex = 56;
-                        newRookIndex = move.destinationIndex + 1;
-                    }
-                    else if (move.destinationIndex == 61){
-                        originalRookIndex = 63;
-                        newRookIndex = move.destinationIndex - 1;
-                    }
-                }
-                else {
-                    throw new RuntimeException("Mistake in Zobrist of castling");
-                }
-
-                int myRook = whichPieceOnSquare(board, newPieceOnSquare(originalRookIndex)) - 1;
-                long originalRookZH = zobristHashPieces[originalRookIndex][myRook];
-                long newRookZH = zobristHashPieces[newRookIndex][myRook];
-                boardHash ^= originalRookZH;
-                boardHash ^= newRookZH;
-            }
-
-            else if (isEnPassantMove(move)){
-                if ((sourcePiece & board.WHITE_PAWNS) != 0){
-                    long victimPawn = destinationPiece >>> 8;
-                    int indexOfVictimPawn = BitIndexing.getIndexOfFirstPiece(victimPawn);
-                    int pieceToKill = whichPieceOnSquare(board, victimPawn) - 1;
-                    long victimPawnZH = zobristHashPieces[indexOfVictimPawn][pieceToKill];
-                    boardHash ^= victimPawnZH;
-                }
-
-                else if  ((sourcePiece & board.BLACK_PAWNS) != 0){
-                    long victimPawn = destinationPiece << 8;
-                    int indexOfVictimPawn = BitIndexing.getIndexOfFirstPiece(victimPawn);
-                    int pieceToKill = whichPieceOnSquare(board, victimPawn) - 1;
-                    long victimPawnZH = zobristHashPieces[indexOfVictimPawn][pieceToKill];
-                    boardHash ^= victimPawnZH;
-                }
-                else {
-                    throw new RuntimeException("false EP move");
-                }
-
-            }
-
-            else if (isPromotionMove(move)){
-                int whichPromotingPiece = 0;
-                if ((sourcePiece & board.WHITE_PAWNS) != 0){
-                    if ((move.move & WHICH_PROMOTION) == KNIGHT_PROMOTION_MASK){
-                        whichPromotingPiece = 2;
-                    }
-                    else if ((move.move & WHICH_PROMOTION) == BISHOP_PROMOTION_MASK){
-                        whichPromotingPiece = 3;
-                    }
-                    else if ((move.move & WHICH_PROMOTION) == ROOK_PROMOTION_MASK){
-                        whichPromotingPiece = 4;
-                    }
-                    else if ((move.move & WHICH_PROMOTION) == QUEEN_PROMOTION_MASK){
-                        whichPromotingPiece = 5;
-                    }
-                }
-
-                else if ((sourcePiece & board.BLACK_PAWNS) != 0){
-                    if ((move.move & WHICH_PROMOTION) == KNIGHT_PROMOTION_MASK){
-                        whichPromotingPiece = 8;
-                    }
-                    else if ((move.move & WHICH_PROMOTION) == BISHOP_PROMOTION_MASK){
-                        whichPromotingPiece = 9;
-                    }
-                    else if ((move.move & WHICH_PROMOTION) == ROOK_PROMOTION_MASK){
-                        whichPromotingPiece = 10;
-                    }
-                    else if ((move.move & WHICH_PROMOTION) == QUEEN_PROMOTION_MASK){
-                        whichPromotingPiece = 11;
-                    }
-                }
-
-                /*
-                remove my pawn from zh
-                 */
-                boardHash ^= destinationZH;
-                
-                long promotionZH = zobristHashPieces[destinationSquareIndex][whichPromotingPiece - 1];
-                boardHash ^= promotionZH;
-            }
-        }
-    }
-
-    /*
-    create almost unique long to identify current board
-     */
-    private long boardToHash(Chessboard board){
-        long hash = 0;
-        for (int sq = 0; sq < 64; sq++) {
-            long pieceOnSquare = newPieceOnSquare(sq);
-            int pieceIndex = whichPieceOnSquare(board, pieceOnSquare) - 1;
-            if (pieceIndex != -1) {
-                hash ^= zobristHashPieces[sq][pieceIndex];
-            }
-        }
-
-        hash ^= castlingRightsToHash(board);
-
-        if (!board.isWhiteTurn()){
-            hash ^= zobristHashColourBlack;
-        }
-        
-        if (board.moveStack.size() > 0){
-            hash ^= updateWithEPFlags(board);
-        }
-
-        return hash;
-    }
-
-    private long castlingRightsToHash(Chessboard board){
-        int numTo15 = 0;
-        if (board.whiteCanCastleK){
-            numTo15 += 1;
-        }
-        if (board.whiteCanCastleQ){
-            numTo15 += 2;
-        }
-        if (board.blackCanCastleK){
-            numTo15 += 4;
-        }
-        if (board.blackCanCastleQ){
-            numTo15 += 8;
-        }
-        Assert.assertTrue(numTo15 >= 0 && numTo15 <= 15);
-
-        return zobristHashCastlingRights[numTo15];
-    }
-
-    /*
-    create values for every possible piece on every possible square
-     */
-    private static long[][] initPieceHash(){
-        Random r = new Random(initHashSeed);
-        long[][] zobristHash = new long[64][12];
-        for (int outer = 0; outer < 64; outer++){
-            for (int inner = 0; inner < 12; inner++){
-                zobristHash[outer][inner] = r.nextLong();
-            }
-        }
-        return zobristHash;
-    }
-
-    /*
-    create values for every possible combination of castling right
-    */
-    private static long[] initCastlingHash(){
-        Random r = new Random(initHashSeed + 1);
-        long[] zobristHash = new long[16];
-        zobristHash[0] = 0;
-        for (int cr = 1; cr < zobristHash.length; cr++){
-            zobristHash[cr] = r.nextLong();
-        }
-        return zobristHash;
-    }
-
-    /*
-    create values for every possible EP file
-    */
-    private static long[] initEPHash(){
-        Random r = new Random(initHashSeed + 2);
-        long[] zobristHash = new long[8];
-        for (int cr = 0; cr < zobristHash.length; cr++){
-            zobristHash[cr] = r.nextLong();
-        }
-        return zobristHash;
-    }
-    
-    /*
-    create value for the player being black
-    */
-    private static long initColourHash(){
-        Random r = new Random(initHashSeed + 3);
-        return r.nextLong();
-    }
-
-    public long getBoardHash() {
-        return boardHash;
-    }
-
-    void setBoardHash(long boardHash) {
-        this.boardHash = boardHash;
-    }
-
-    public Stack<Long> getZobristStack() {
-        return zobristStack;
-    }
-
-
-    @Override
-    public boolean equals(Object o) {
-        if (this == o) return true;
-        if (o == null || getClass() != o.getClass()) return false;
-        ZobristHash that = (ZobristHash) o;
-        return boardHash == that.boardHash &&
-                Objects.equals(zobristStack, that.zobristStack);
-    }
-
-    @Override
-    public int hashCode() {
-        return Objects.hash(zobristStack, boardHash);
-    }
-
-    @Override
-    public String toString() {
-        return "ZobristHash{" +
-                "zobristStack=" + zobristStack +
-                ", boardHash=" + boardHash +
-                '}';
-    }
-
-
-}
Index: src/main/java/tests/programtests/ZobristHashTest.java
===================================================================
--- src/main/java/tests/programtests/ZobristHashTest.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/tests/programtests/ZobristHashTest.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
@@ -1,150 +0,0 @@
-package tests.programtests;
-
-import javacode.chessengine.search.Engine;
-import javacode.chessengine.transpositiontable.EngineMovesAndHash;
-import javacode.chessengine.transpositiontable.ZobristHash;
-import javacode.chessprogram.chess.Chessboard;
-import javacode.chessprogram.chess.Move;
-import javacode.chessprogram.graphicsandui.Art;
-import javacode.chessprogram.miscAdmin.FenParser;
-import javacode.chessprogram.moveGeneration.MoveGeneratorMaster;
-import org.junit.Assert;
-import org.junit.jupiter.api.Test;
-
-import java.util.List;
-import java.util.Random;
-
-class ZobristHashTest {
-
-    @Test
-    void zobristTest1() {
-        Chessboard chessboard = FenParser.makeBoardBasedOnFEN("6r1/p3p1rk/1p1pPp1p/q3n2R/4P3/3BR2P/PPP2QP1/7K w - - 0 1");
-        System.out.println(Art.boardArt(chessboard));
-
-        final ZobristHash testHash = new ZobristHash(chessboard);
-
-        Engine engine = new Engine();
-        Move move = engine.searchFixedTime(chessboard, 1000);
-        System.out.println(move);
-
-//        ZobristHash zobristHash = engine.zobristHash;
-//        System.out.println("ZobristHash: \n"+zobristHash);
-//        System.out.println("TestHash: \n" + testHash);
-//        Assert.assertEquals(zobristHash, testHash);
-    }
-
-    @Test
-    void zobristTest2() {
-        Chessboard board = new Chessboard();
-        System.out.println(Art.boardArt(board));
-
-        ZobristHash myHash = new ZobristHash(board);
-        final ZobristHash testHash = new ZobristHash(board);
-
-        Assert.assertEquals(myHash, testHash);
-
-        Random r = new Random(100);
-        
-        int num = 100;
-        for (int m = 0; m < num; m++){
-            List<Move> moves = MoveGeneratorMaster.generateLegalMoves(board, board.isWhiteTurn());
-            Move move = moves.get(r.nextInt(moves.size()));
-            EngineMovesAndHash.makeMoveAndHashUpdate(board, move, myHash);
-        }
-        System.out.println(Art.boardArt(board));
-
-        for (int m = 0; m < num; m++){
-            EngineMovesAndHash.UnMakeMoveAndHashUpdate(board, myHash);
-        }
-
-        Assert.assertEquals(myHash, testHash);
-    }
-
-
-    @Test
-    void zobristTest3() {
-        Chessboard board = FenParser.makeBoardBasedOnFEN("r3kb1r/1p1b1p2/p1nppp2/7p/4PP2/qNN5/P1PQB1PP/R4R1K w kq - ");
-        System.out.println(Art.boardArt(board));
-
-        ZobristHash myHash = new ZobristHash(board);
-        final ZobristHash testHash = new ZobristHash(board);
-
-        Assert.assertEquals(myHash, testHash);
-
-        Random r = new Random(100);
-
-        int num = 100;
-        for (int m = 0; m < num; m++){
-            List<Move> moves = MoveGeneratorMaster.generateLegalMoves(board, board.isWhiteTurn());
-            Move move = moves.get(r.nextInt(moves.size()));
-            EngineMovesAndHash.makeMoveAndHashUpdate(board, move, myHash);
-        }
-        System.out.println(Art.boardArt(board));
-
-        for (int m = 0; m < num; m++){
-            EngineMovesAndHash.UnMakeMoveAndHashUpdate(board, myHash);
-        }
-
-        Assert.assertEquals(myHash, testHash);
-    }
-
-
-
-    @Test
-    void zobristTestNull() {
-        Chessboard board = FenParser.makeBoardBasedOnFEN("r3kb1r/1p1b1p2/p1nppp2/7p/4PP2/qNN5/P1PQB1PP/R4R1K w kq - ");
-        System.out.println(Art.boardArt(board));
-
-        ZobristHash myHash = new ZobristHash(board);
-        final ZobristHash testHash = new ZobristHash(board);
-
-        Assert.assertEquals(myHash, testHash);
-
-        EngineMovesAndHash.makeNullMove(board, myHash);
-
-        EngineMovesAndHash.unMakeNullMove(board, myHash);
-
-        Assert.assertEquals(myHash, testHash);
-    }
-
-
-
-    @Test
-    void zobristTestNull2() {
-        Chessboard board = FenParser.makeBoardBasedOnFEN("r3kb1r/1p1b1p2/p1nppp2/7p/4PP2/qNN5/P1PQB1PP/R4R1K w kq - ");
-        System.out.println(Art.boardArt(board));
-
-        ZobristHash myHash = new ZobristHash(board);
-        final ZobristHash testHash = new ZobristHash(board);
-
-        Assert.assertEquals(myHash, testHash);
-
-        Random r = new Random(100);
-
-        int num = 100;
-        for (int m = 0; m < num; m++){
-            List<Move> moves = MoveGeneratorMaster.generateLegalMoves(board, board.isWhiteTurn());
-            Move move = moves.get(r.nextInt(moves.size()));
-            EngineMovesAndHash.makeMoveAndHashUpdate(board, move, myHash);
-
-            List<Move> moves2 = MoveGeneratorMaster.generateLegalMoves(board, board.isWhiteTurn());
-            Move move2 = moves2.get(r.nextInt(moves2.size()));
-            EngineMovesAndHash.makeMoveAndHashUpdate(board, move2, myHash);
-            
-            EngineMovesAndHash.makeNullMove(board, myHash);
-        }
-        
-        
-        System.out.println(Art.boardArt(board));
-
-        for (int m = 0; m < num; m++){
-            EngineMovesAndHash.unMakeNullMove(board, myHash);
-            EngineMovesAndHash.UnMakeMoveAndHashUpdate(board, myHash);
-            EngineMovesAndHash.UnMakeMoveAndHashUpdate(board, myHash);
-            
-        }
-
-        Assert.assertEquals(myHash, testHash);
-    }
-    
-}
\ No newline at end of file
Index: src/main/java/tests/enginetests/WacTwoBreakdown.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package tests.enginetests;\n\nimport javacode.chessengine.evaluation.Evaluator;\nimport javacode.chessengine.search.Engine;\nimport javacode.chessprogram.chess.Chessboard;\nimport javacode.chessprogram.chess.Move;\nimport javacode.chessprogram.graphicsandui.Art;\nimport javacode.chessprogram.miscAdmin.ExtendedPositionDescriptionParser;\nimport javacode.chessprogram.moveGeneration.MoveGeneratorMaster;\nimport org.junit.Assert;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.Parameterized;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\n\n@RunWith(Parameterized.class)\npublic class WacTwoBreakdown {\n\n    private static final int timeLimit = 25_000;\n\n    @Parameterized.Parameters(name = \"{index} Test: {1}\")\n    public static Collection<Object[]> data() {\n        List<Object[]> answers = new ArrayList<>();\n\n        for (String splitUpWAC : splitUpWACs) {\n            Object[] objectAndName = new Object[2];\n            ExtendedPositionDescriptionParser.EPDObject EPDObject = ExtendedPositionDescriptionParser.parseEDPPosition(splitUpWAC);\n            objectAndName[0] = EPDObject;\n            objectAndName[1] = EPDObject.getId();\n            answers.add(objectAndName);\n        }\n\n        return answers;\n    }\n\n\n    private static ExtendedPositionDescriptionParser.EPDObject EPDObject;\n\n    public WacTwoBreakdown(Object edp, Object name) {\n        EPDObject = (ExtendedPositionDescriptionParser.EPDObject) edp;\n    }\n\n\n    public static void reset(){\n        Engine engine = new Engine();\n    }\n\n    @org.junit.Test\n    public void test() {\n        Engine engine = new Engine();\n        Chessboard board = EPDObject.getBoard();\n        System.out.println(Art.boardArt(board));\n\n        System.out.println(\"base score: \");\n        List<Move> moves = MoveGeneratorMaster.generateLegalMoves(board, board.isWhiteTurn());\n//        System.out.println(moves);\n        System.out.println(new Evaluator(engine).eval(board, board.isWhiteTurn(),\n                moves));\n\n        Move move = engine.searchFixedTime(board, timeLimit);\n        System.out.println(move);\n        \n//        Move move = engine.searchFixedDepth(board, 5);\n//        System.out.println(move);\n\n\n\n\n        List<Integer> winningMoveDestination = EPDObject.getBestMoveDestinationIndex();\n        int myMoveDestination = move.destinationIndex;\n\n        Assert.assertTrue(winningMoveDestination.contains(myMoveDestination));\n\n\n        List<Integer> losingMoveDestination = EPDObject.getAvoidMoveDestinationIndex();\n\n        Assert.assertFalse(losingMoveDestination.contains(myMoveDestination));\n    }\n\n    private static final String wacTests = \"\"\n            + \"8/7p/5k2/5p2/p1p2P2/Pr1pPK2/1P1R3P/8 b - - bm Rxb2; id \\\"WAC.0021\\\";\\n\" \n            + \"8/7p/5k2/5p2/p1p2P2/P2pPK2/1r1R3P/8 w - - bm Rxb2; id \\\"WAC.0022\\\";\\n\" \n            + \"8/7p/5k2/5p2/p1p2P2/P2pPK2/1R5P/8 b - - bm c3; id \\\"WAC.0023\\\";\\n\" \n            + \"8/7p/5k2/5p2/p4P2/P1ppPK2/1R5P/8 w - - bm Rb6; id \\\"WAC.0024\\\";\\n\" \n            + \"8/7p/1R3k2/5p2/p4P2/P1ppPK2/7P/8 b - - bm Ke7; id \\\"WAC.0025\\\";\\n\" \n            + \"8/4k2p/1R6/5p2/p4P2/P1ppPK2/7P/8 w - - bm Rc6; id \\\"WAC.0026\\\";\\n\" \n            \n            + \"8/4k2p/2R5/5p2/p4P2/P1ppPK2/7P/8 b - - bm c2; id \\\"WAC.0027\\\";\\n\" \n            + \"8/4k2p/2R5/5p2/p4P2/P2pPK2/2p4P/8 w - - bm Kf2; id \\\"WAC.0028\\\";\\n\"\n            \n            + \"8/4k2p/2R5/5p2/p4P2/P2pP3/2p2K1P/8 b - - bm d2; id \\\"WAC.0029\\\";\\n\" \n            + \"8/4k2p/2R5/5p2/p4P2/P3P3/2pp1K1P/8 w - - bm Rc2; id \\\"WAC.00291\\\";\\n\" \n            \n            + \"8/4k2p/8/5p2/p4P2/P3P3/2Rp1K1P/8 b - - bm d1q; id \\\"WAC.00292\\\";\\n\" \n            \n            \n            \n            \n            ;\n\n\n    private static final String[] splitUpWACs = wacTests.split(\"\\\\\\n\");\n    static int totalWACS = splitUpWACs.length;\n\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/tests/enginetests/WacTwoBreakdown.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/tests/enginetests/WacTwoBreakdown.java	(date 1543670486000)
@@ -1,12 +1,12 @@
 package tests.enginetests;
 
-import javacode.chessengine.evaluation.Evaluator;
-import javacode.chessengine.search.Engine;
-import javacode.chessprogram.chess.Chessboard;
-import javacode.chessprogram.chess.Move;
-import javacode.chessprogram.graphicsandui.Art;
-import javacode.chessprogram.miscAdmin.ExtendedPositionDescriptionParser;
-import javacode.chessprogram.moveGeneration.MoveGeneratorMaster;
+import com.github.louism33.axolotl.evaluation.Evaluator;
+import com.github.louism33.axolotl.search.Engine;
+import old.chessprogram.chess.Chessboard;
+import old.chessprogram.chess.Move;
+import old.chessprogram.graphicsandui.Art;
+import old.chessprogram.miscAdmin.ExtendedPositionDescriptionParser;
+import old.chessprogram.moveGeneration.MoveGeneratorMaster;
 import org.junit.Assert;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
Index: src/main/java/javacode/chessengine/evaluation/EvaluatorPositionConstant.java
===================================================================
--- src/main/java/javacode/chessengine/evaluation/EvaluatorPositionConstant.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/com/github/louism33/axolotl/evaluation/EvaluatorPositionConstant.java	(date 1543670485000)
@@ -1,4 +1,4 @@
-package javacode.chessengine.evaluation;
+package com.github.louism33.axolotl.evaluation;
 
 class EvaluatorPositionConstant {
 
Index: src/main/java/javacode/chessengine/evaluation/EvaluationConstants.java
===================================================================
--- src/main/java/javacode/chessengine/evaluation/EvaluationConstants.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/com/github/louism33/axolotl/evaluation/EvaluationConstants.java	(date 1543670486000)
@@ -1,4 +1,4 @@
-package javacode.chessengine.evaluation;
+package com.github.louism33.axolotl.evaluation;
 
 public class EvaluationConstants {
 
Index: src/main/java/tests/enginetests/CCROneHourTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package tests.enginetests;\n\nimport javacode.chessengine.search.Engine;\nimport javacode.chessprogram.chess.Move;\nimport javacode.chessprogram.graphicsandui.Art;\nimport javacode.chessprogram.miscAdmin.ExtendedPositionDescriptionParser;\nimport org.junit.Assert;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.Parameterized;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\n\n@RunWith(Parameterized.class )\npublic class CCROneHourTest {\n    private static final int timeLimit = 10000;\n\n    @Parameterized.Parameters(name = \"{index} Test: {1}\")\n    public static Collection<Object[]> data() {\n        List<Object[]> answers = new ArrayList<>();\n        for (String splitUpBK : splitUpBKs) {\n            Object[] objectAndName = new Object[2];\n            ExtendedPositionDescriptionParser.EPDObject EPDObject = ExtendedPositionDescriptionParser.parseEDPPosition(splitUpBK);\n            objectAndName[0] = EPDObject;\n            objectAndName[1] = EPDObject.getId();\n            answers.add(objectAndName);\n        }\n        return answers;\n    }\n\n\n    private static ExtendedPositionDescriptionParser.EPDObject EPDObject;\n\n    public CCROneHourTest(Object edp, Object name) {\n        EPDObject = (ExtendedPositionDescriptionParser.EPDObject) edp;\n    }\n\n    @Test\n    public void test() {\n        WACTests.reset();\n        System.out.println(Art.boardArt(EPDObject.getBoard()));\n        Move move = new Engine().searchFixedTime(EPDObject.getBoard(), timeLimit);\n        System.out.println(move);\n\n        List<Integer> winningMoveDestination = EPDObject.getBestMoveDestinationIndex();\n        int myMoveDestination = move.destinationIndex;\n\n        Assert.assertTrue(winningMoveDestination.contains(myMoveDestination));\n    }\n\n\n    private static final String bkTests = \"\" +\n            \"rn1qkb1r/pp2pppp/5n2/3p1b2/3P4/2N1P3/PP3PPP/R1BQKBNR w KQkq - 0 1 id \\\"CCR01\\\"; bm Qb3;\\n\" +\n            \"rn1qkb1r/pp2pppp/5n2/3p1b2/3P4/1QN1P3/PP3PPP/R1B1KBNR b KQkq - 1 1 id \\\"CCR02\\\";bm Bc8;\\n\" +\n            \"r1bqk2r/ppp2ppp/2n5/4P3/2Bp2n1/5N1P/PP1N1PP1/R2Q1RK1 b kq - 1 10 id \\\"CCR03\\\"; bm Nh6; am Ne5;\\n\" +\n            \"r1bqrnk1/pp2bp1p/2p2np1/3p2B1/3P4/2NBPN2/PPQ2PPP/1R3RK1 w - - 1 12 id \\\"CCR04\\\"; bm b4;\\n\" +\n            \"rnbqkb1r/ppp1pppp/5n2/8/3PP3/2N5/PP3PPP/R1BQKBNR b KQkq - 3 5 id \\\"CCR05\\\"; bm e5; \\n\" +\n//            \"rnbq1rk1/pppp1ppp/4pn2/8/1bPP4/P1N5/1PQ1PPPP/R1B1KBNR b KQ - 1 5 id \\\"CCR06\\\"; bm Bcx3+;\\n\" +\n            \"r4rk1/3nppbp/bq1p1np1/2pP4/8/2N2NPP/PP2PPB1/R1BQR1K1 b - - 1 12 id \\\"CCR07\\\"; bm Rfb8;\\n\" +\n            \"rn1qkb1r/pb1p1ppp/1p2pn2/2p5/2PP4/5NP1/PP2PPBP/RNBQK2R w KQkq c6 1 6 id \\\"CCR08\\\"; bm d5;\\n\" +\n            \"r1bq1rk1/1pp2pbp/p1np1np1/3Pp3/2P1P3/2N1BP2/PP4PP/R1NQKB1R b KQ - 1 9 id \\\"CCR09\\\"; bm Nd4;\\n\" +\n            \"rnbqr1k1/1p3pbp/p2p1np1/2pP4/4P3/2N5/PP1NBPPP/R1BQ1RK1 w - - 1 11 id \\\"CCR10\\\"; bm a4;\\n\" +\n            \"rnbqkb1r/pppp1ppp/5n2/4p3/4PP2/2N5/PPPP2PP/R1BQKBNR b KQkq f3 1 3 id \\\"CCR11\\\"; bm d5;\\n\" +\n            \"r1bqk1nr/pppnbppp/3p4/8/2BNP3/8/PPP2PPP/RNBQK2R w KQkq - 2 6 id \\\"CCR12\\\"; bm Bxf7+;\\n\" +\n//            \"rnbq1b1r/ppp2kpp/3p1n2/8/3PP3/8/PPP2PPP/RNBQKB1R b KQ d3 1 5 id \\\"CCR13\\\"; am Ne4; \\n\" +\n//            \"rnbqkb1r/pppp1ppp/3n4/8/2BQ4/5N2/PPP2PPP/RNB2RK1 b kq - 1 6 id \\\"CCR14\\\"; am Nxc4;\\n\" +\n            \"r2q1rk1/2p1bppp/p2p1n2/1p2P3/4P1b1/1nP1BN2/PP3PPP/RN1QR1K1 w - - 1 12 id \\\"CCR15\\\"; bm exf6;\\n\" +\n            \"r1bqkb1r/2pp1ppp/p1n5/1p2p3/3Pn3/1B3N2/PPP2PPP/RNBQ1RK1 b kq - 2 7 id \\\"CCR16\\\"; bm d5;\\n\" +\n//            \"r2qkbnr/2p2pp1/p1pp4/4p2p/4P1b1/5N1P/PPPP1PP1/RNBQ1RK1 w kq - 1 8 id \\\"CCR17\\\"; am hxg4;\\n\" +\n            \"r1bqkb1r/pp3ppp/2np1n2/4p1B1/3NP3/2N5/PPP2PPP/R2QKB1R w KQkq e6 1 7 id \\\"CCR18\\\"; bm Bxf6+;\\n\" +\n//            \"rn1qk2r/1b2bppp/p2ppn2/1p6/3NP3/1BN5/PPP2PPP/R1BQR1K1 w kq - 5 10 id \\\"CCR19\\\"; am Bxe6;\\n\" +\n//            \"r1b1kb1r/1pqpnppp/p1n1p3/8/3NP3/2N1B3/PPP1BPPP/R2QK2R w KQkq - 3 8 id \\\"CCR20\\\"; am Ndb5;\\n\" +\n//            \"r1bqnr2/pp1ppkbp/4N1p1/n3P3/8/2N1B3/PPP2PPP/R2QK2R b KQ - 2 11 id \\\"CCR21\\\"; am Kxe6;\\n\" +\n            \"r3kb1r/pp1n1ppp/1q2p3/n2p4/3P1Bb1/2PB1N2/PPQ2PPP/RN2K2R w KQkq - 3 11 id \\\"CCR22\\\"; bm a4;\\n\" +\n            \"r1bq1rk1/pppnnppp/4p3/3pP3/1b1P4/2NB3N/PPP2PPP/R1BQK2R w KQ - 3 7 id \\\"CCR23\\\"; bm Bxh7+;\\n\" +\n            \"r2qkbnr/ppp1pp1p/3p2p1/3Pn3/4P1b1/2N2N2/PPP2PPP/R1BQKB1R w KQkq - 2 6 id \\\"CCR24\\\"; bm Nxe5;\\n\" +\n//            \"rn2kb1r/pp2pppp/1qP2n2/8/6b1/1Q6/PP1PPPBP/RNB1K1NR b KQkq - 1 6 id \\\"CCR25\\\"; am Qxb3;\" +\n            \"\";\n\n    private static final String[] splitUpBKs = bkTests.split(\"\\\\\\n\");\n    static int totalBKs = splitUpBKs.length;\n}\n    \n    /*\n    https://www.chessprogramming.org/CCR_One_Hour_Test\n    \n    \n    rn1qkb1r/pp2pppp/5n2/3p1b2/3P4/2N1P3/PP3PPP/R1BQKBNR w KQkq - 0 1 id \"CCR01\"; bm Qb3;\nrn1qkb1r/pp2pppp/5n2/3p1b2/3P4/1QN1P3/PP3PPP/R1B1KBNR b KQkq - 1 1 id \"CCR02\";bm Bc8;\nr1bqk2r/ppp2ppp/2n5/4P3/2Bp2n1/5N1P/PP1N1PP1/R2Q1RK1 b kq - 1 10 id \"CCR03\"; bm Nh6; am Ne5;\nr1bqrnk1/pp2bp1p/2p2np1/3p2B1/3P4/2NBPN2/PPQ2PPP/1R3RK1 w - - 1 12 id \"CCR04\"; bm b4;\nrnbqkb1r/ppp1pppp/5n2/8/3PP3/2N5/PP3PPP/R1BQKBNR b KQkq - 3 5 id \"CCR05\"; bm e5; \nrnbq1rk1/pppp1ppp/4pn2/8/1bPP4/P1N5/1PQ1PPPP/R1B1KBNR b KQ - 1 5 id \"CCR06\"; bm Bcx3+;\nr4rk1/3nppbp/bq1p1np1/2pP4/8/2N2NPP/PP2PPB1/R1BQR1K1 b - - 1 12 id \"CCR07\"; bm Rfb8;\nrn1qkb1r/pb1p1ppp/1p2pn2/2p5/2PP4/5NP1/PP2PPBP/RNBQK2R w KQkq c6 1 6 id \"CCR08\"; bm d5;\nr1bq1rk1/1pp2pbp/p1np1np1/3Pp3/2P1P3/2N1BP2/PP4PP/R1NQKB1R b KQ - 1 9 id \"CCR09\"; bm Nd4;\nrnbqr1k1/1p3pbp/p2p1np1/2pP4/4P3/2N5/PP1NBPPP/R1BQ1RK1 w - - 1 11 id \"CCR10\"; bm a4;\nrnbqkb1r/pppp1ppp/5n2/4p3/4PP2/2N5/PPPP2PP/R1BQKBNR b KQkq f3 1 3 id \"CCR11\"; bm d5;\nr1bqk1nr/pppnbppp/3p4/8/2BNP3/8/PPP2PPP/RNBQK2R w KQkq - 2 6 id \"CCR12\"; bm Bxf7+;\nrnbq1b1r/ppp2kpp/3p1n2/8/3PP3/8/PPP2PPP/RNBQKB1R b KQ d3 1 5 id \"CCR13\"; am Ne4; \nrnbqkb1r/pppp1ppp/3n4/8/2BQ4/5N2/PPP2PPP/RNB2RK1 b kq - 1 6 id \"CCR14\"; am Nxc4;\nr2q1rk1/2p1bppp/p2p1n2/1p2P3/4P1b1/1nP1BN2/PP3PPP/RN1QR1K1 w - - 1 12 id \"CCR15\"; bm exf6;\nr1bqkb1r/2pp1ppp/p1n5/1p2p3/3Pn3/1B3N2/PPP2PPP/RNBQ1RK1 b kq - 2 7 id \"CCR16\"; bm d5;\nr2qkbnr/2p2pp1/p1pp4/4p2p/4P1b1/5N1P/PPPP1PP1/RNBQ1RK1 w kq - 1 8 id \"CCR17\"; am hxg4;\nr1bqkb1r/pp3ppp/2np1n2/4p1B1/3NP3/2N5/PPP2PPP/R2QKB1R w KQkq e6 1 7 id \"CCR18\"; bm Bxf6+;\nrn1qk2r/1b2bppp/p2ppn2/1p6/3NP3/1BN5/PPP2PPP/R1BQR1K1 w kq - 5 10 id \"CCR19\"; am Bxe6;\nr1b1kb1r/1pqpnppp/p1n1p3/8/3NP3/2N1B3/PPP1BPPP/R2QK2R w KQkq - 3 8 id \"CCR20\"; am Ndb5;\nr1bqnr2/pp1ppkbp/4N1p1/n3P3/8/2N1B3/PPP2PPP/R2QK2R b KQ - 2 11 id \"CCR21\"; am Kxe6;\nr3kb1r/pp1n1ppp/1q2p3/n2p4/3P1Bb1/2PB1N2/PPQ2PPP/RN2K2R w KQkq - 3 11 id \"CCR22\"; bm a4;\nr1bq1rk1/pppnnppp/4p3/3pP3/1b1P4/2NB3N/PPP2PPP/R1BQK2R w KQ - 3 7 id \"CCR23\"; bm Bxh7+;\nr2qkbnr/ppp1pp1p/3p2p1/3Pn3/4P1b1/2N2N2/PPP2PPP/R1BQKB1R w KQkq - 2 6 id \"CCR24\"; bm Nxe5;\nrn2kb1r/pp2pppp/1qP2n2/8/6b1/1Q6/PP1PPPBP/RNB1K1NR b KQkq - 1 6 id \"CCR25\"; am Qxb3;\n     */\n    \n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/tests/enginetests/CCROneHourTest.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/tests/enginetests/CCROneHourTest.java	(date 1543670486000)
@@ -1,9 +1,9 @@
 package tests.enginetests;
 
-import javacode.chessengine.search.Engine;
-import javacode.chessprogram.chess.Move;
-import javacode.chessprogram.graphicsandui.Art;
-import javacode.chessprogram.miscAdmin.ExtendedPositionDescriptionParser;
+import com.github.louism33.axolotl.search.Engine;
+import old.chessprogram.chess.Move;
+import old.chessprogram.graphicsandui.Art;
+import old.chessprogram.miscAdmin.ExtendedPositionDescriptionParser;
 import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"CompilerConfiguration\">\n    <wildcardResourcePatterns>\n      <entry name=\"!?*.java\" />\n      <entry name=\"!?*.form\" />\n      <entry name=\"!?*.class\" />\n      <entry name=\"!?*.groovy\" />\n      <entry name=\"!?*.scala\" />\n      <entry name=\"!?*.flex\" />\n      <entry name=\"!?*.kt\" />\n      <entry name=\"!?*.clj\" />\n    </wildcardResourcePatterns>\n    <annotationProcessing>\n      <profile name=\"Maven default annotation processors profile\" enabled=\"true\">\n        <sourceOutputDir name=\"target/generated-sources/annotations\" />\n        <sourceTestOutputDir name=\"target/generated-test-sources/test-annotations\" />\n        <outputRelativeToContentRoot value=\"true\" />\n        <module name=\"Axolotl\" />\n        <module name=\"ChessCore\" />\n      </profile>\n    </annotationProcessing>\n    <bytecodeTargetLevel>\n      <module name=\"Axolotl\" target=\"11\" />\n      <module name=\"ChessCore\" target=\"11\" />\n    </bytecodeTargetLevel>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/compiler.xml	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ .idea/compiler.xml	(date 1543751082000)
@@ -1,6 +1,9 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="CompilerConfiguration">
+    <excludeFromCompile>
+      <directory url="file://$PROJECT_DIR$/src/main/java/tests/enginetests" includeSubdirectories="true" />
+    </excludeFromCompile>
     <wildcardResourcePatterns>
       <entry name="!?*.java" />
       <entry name="!?*.form" />
Index: src/main/java/tests/enginetests/EngineTestMisc.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package tests.enginetests;\n\nimport javacode.chessengine.search.Engine;\nimport javacode.chessprogram.chess.Chessboard;\nimport javacode.chessprogram.chess.Move;\nimport javacode.chessprogram.graphicsandui.Art;\nimport javacode.chessprogram.miscAdmin.FenParser;\nimport javacode.chessprogram.miscAdmin.MoveParserFromAN;\nimport javacode.chessprogram.moveGeneration.MoveGeneratorMaster;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.List;\n\nclass EngineTestMisc {\n\n\n\n    @Test\n    void normalBoard() {\n        Chessboard chessboard = new Chessboard();\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedDepth(chessboard, 10);\n        System.out.println(move);\n\n//        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Nc6\");\n//        int destination = move.destinationIndex;\n//        Assert.assertEquals(moveToWin, destination);\n    }\n    \n    @Test\n    void blathyGrotesque() {\n\n        // white wins through underpromotion\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"8/8/8/2p5/1pp5/brpp4/qpprpK1P/1nkbn3 w - - 0 1\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, 1000);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Kxe1\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n    \n    @Test\n    void gorgievGrotesque() {\n\n        // white draws through sacrifices\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"8/8/4N3/4Q3/1pp5/1p3N2/bpqp1p2/nrkrbK2 w - - 0 1\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, 1000);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Nf4\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n\n    }\n\n    \n    @Test\n    void paulLamfordGrotesque() {\n\n        // ridiculous board position and checkmate, white to win\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"8/8/8/1k3p2/p1p1pPp1/PpPpP1Pp/1P1P3P/QNK2NRR w - - 0 1\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, 1000);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Kd1\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n\n    }\n\n    @Test\n    void retiEndgameStudy() {\n\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"7K/8/k1P5/7p/8/8/8/8 w - -\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, 1000);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Kg7\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n\n    }\n\n\n    @Test\n    void checkmateInPromotion() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"3k4/8/8/8/8/8/3q3p/K7 b - - 0 1\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, 1000);\n        Move moveOne = new Move(8, 0, false, false, true, false, false, true, false, 666);\n        Move moveTwo = new Move(8, 0, false, false, true, false, false, false, true, 666);\n        Assert.assertTrue(move.equals(moveOne) || move.equals(moveTwo));\n    }\n\n\n    @Test\n    void checkmateInOne() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"3k4/8/8/8/8/7r/3q4/K7 b - - 0 1\");\n        System.out.println(Art.boardArt(chessboard));\n        Move move = new Engine().searchFixedTime(chessboard, 1000);\n        List<Move> moves = MoveGeneratorMaster.generateLegalMoves(chessboard, chessboard.isWhiteTurn());\n        System.out.println(moves);\n        System.out.println(move);\n        Assert.assertEquals(move, new Move(16, 0));\n    }\n\n    @Test\n    void takeTheQueen() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"3k4/8/8/8/8/8/2Kq4/8 w - - 0 1\");\n        System.out.println(Art.boardArt(chessboard));\n        Move move = new Engine().searchFixedTime(chessboard, 1000);\n        List<Move> moves = MoveGeneratorMaster.generateLegalMoves(chessboard, chessboard.isWhiteTurn());\n        System.out.println(move);\n        Assert.assertEquals(move, new Move(13, 12));\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/tests/enginetests/EngineTestMisc.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/tests/enginetests/EngineTestMisc.java	(date 1543670486000)
@@ -1,12 +1,12 @@
 package tests.enginetests;
 
-import javacode.chessengine.search.Engine;
-import javacode.chessprogram.chess.Chessboard;
-import javacode.chessprogram.chess.Move;
-import javacode.chessprogram.graphicsandui.Art;
-import javacode.chessprogram.miscAdmin.FenParser;
-import javacode.chessprogram.miscAdmin.MoveParserFromAN;
-import javacode.chessprogram.moveGeneration.MoveGeneratorMaster;
+import com.github.louism33.axolotl.search.Engine;
+import old.chessprogram.chess.Chessboard;
+import old.chessprogram.chess.Move;
+import old.chessprogram.graphicsandui.Art;
+import old.chessprogram.miscAdmin.FenParser;
+import old.chessprogram.miscAdmin.MoveParserFromAN;
+import old.chessprogram.moveGeneration.MoveGeneratorMaster;
 import org.junit.Assert;
 import org.junit.jupiter.api.Test;
 
Index: src/main/java/javacode/chessengine/moveordering/MoveOrderingConstants.java
===================================================================
--- src/main/java/javacode/chessengine/moveordering/MoveOrderingConstants.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/com/github/louism33/axolotl/moveordering/MoveOrderingConstants.java	(date 1543670486000)
@@ -1,4 +1,4 @@
-package javacode.chessengine.moveordering;
+package com.github.louism33.axolotl.moveordering;
 
 class MoveOrderingConstants {
 
Index: src/main/java/tests/enginetests/EngineTestMateInFive.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package tests.enginetests;\n\nimport javacode.chessengine.search.Engine;\nimport javacode.chessprogram.chess.Chessboard;\nimport javacode.chessprogram.chess.Move;\nimport javacode.chessprogram.graphicsandui.Art;\nimport javacode.chessprogram.miscAdmin.FenParser;\nimport javacode.chessprogram.miscAdmin.MoveParserFromAN;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\n\nclass EngineTestMateInFive {\n\n\n    private static final int timeLimit = 30000;\n\n    @Test\n    void test1() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"6r1/p3p1rk/1p1pPp1p/q3n2R/4P3/3BR2P/PPP2QP1/7K w - - 0 1\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Rxh6+\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n    @Test\n    void test2() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"2q1nk1r/4Rp2/1ppp1P2/6Pp/3p1B2/3P3P/PPP1Q3/6K1 w - - 0 1\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Rxe8+\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n    @Test\n    void test3Lucifer() {\n\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"6k1/3b3r/1p1p4/p1n2p2/1PPNpP1q/P3Q1p1/1R1RB1P1/5K2 b - - 0 1\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"qxf4\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n        \n        \n        \n        \n    }\n\n\n    @Test\n    void test4() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"2R3Bk/6p1/1p5p/4pbPP/1P1b4/5pK1/5P2/8 w - - 1 0\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Be6+\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n\n\n\n    @Test\n    void test5() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"5r2/r4p1p/1p3n2/n1pp1NNk/p2P4/P1P3R1/1P5P/5RK1 w - - 1 0\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Ng7+\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n\n\n    @Test\n    void test6Flagg() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"3r4/1b5p/ppqP1Ppk/2p1rp2/2P1P3/3n2N1/P5QP/3R1RK1 w - - 1 0\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Nxf5+\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n\n    @Test\n    void test7() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"6kr/4Bpb1/1p1p4/3B1P2/4R1Q1/2qn2P1/2P2P2/6K1 w - - 1 0\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Bxf7+\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n\n    @Test\n    void test8() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"5r1k/2q4b/p3p2Q/1pp4p/8/1P3r2/P1P4P/1KBR2R1 w - - 1 0\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Rd7\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n\n    @Test\n    void test9Satan() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"7k/1p2r1p1/pPq4p/7R/1P1Nn2P/P5p1/1B3r2/3Q2K1 b - - 0 1\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"ng5\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n\n    @Test\n    void test10() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"6k1/1P3p1p/3b2p1/2NQ2n1/8/2P2p1P/5PP1/4qBK1 b - - 0 1\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"nxh3+\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n\n    @Test\n    void test11() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"r4bk1/q5pp/3N1p2/2p5/1p2PB2/1Pp2PP1/4Q2P/1K1R4 b - - 0 1\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"c2+\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n\n\n    @Test\n    void test12() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"3kr3/pp2r3/2n2Q1p/2Rp4/2p2B2/2P3P1/2q2P1P/4R1K1 w - - 1 0\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Qd6+\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n\n    @Test\n    void test13() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"6Nk/5prp/pp1p1Q2/2pP4/P1P3b1/7R/3q3P/4R2K w - - 1 0\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Rxh7+\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n    @Test\n    void test14() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"7k/1p2r1p1/pPq4p/7R/1P1Nn2P/P5p1/1B3r2/3Q2K1 b - - 0 1\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Ng5\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/tests/enginetests/EngineTestMateInFive.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/tests/enginetests/EngineTestMateInFive.java	(date 1543670485000)
@@ -1,11 +1,11 @@
 package tests.enginetests;
 
-import javacode.chessengine.search.Engine;
-import javacode.chessprogram.chess.Chessboard;
-import javacode.chessprogram.chess.Move;
-import javacode.chessprogram.graphicsandui.Art;
-import javacode.chessprogram.miscAdmin.FenParser;
-import javacode.chessprogram.miscAdmin.MoveParserFromAN;
+import com.github.louism33.axolotl.search.Engine;
+import old.chessprogram.chess.Chessboard;
+import old.chessprogram.chess.Move;
+import old.chessprogram.graphicsandui.Art;
+import old.chessprogram.miscAdmin.FenParser;
+import old.chessprogram.miscAdmin.MoveParserFromAN;
 import org.junit.Assert;
 import org.junit.jupiter.api.Test;
 
Index: src/main/java/tests/enginetests/EngineTestMateInSix.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package tests.enginetests;\n\nimport javacode.chessengine.search.Engine;\nimport javacode.chessprogram.chess.Chessboard;\nimport javacode.chessprogram.chess.Move;\nimport javacode.chessprogram.graphicsandui.Art;\nimport javacode.chessprogram.miscAdmin.FenParser;\nimport javacode.chessprogram.miscAdmin.MoveParserFromAN;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\n\nclass EngineTestMateInSix {\n\n    private static final int timeLimit = 30000;\n\n    @Test\n    void test1() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"2r3k1/p2R1p2/1p5Q/4N3/7P/4P3/b5PK/5q2 w - - 1 0\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Nc6\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n    \n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/tests/enginetests/EngineTestMateInSix.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/tests/enginetests/EngineTestMateInSix.java	(date 1543670486000)
@@ -1,11 +1,11 @@
 package tests.enginetests;
 
-import javacode.chessengine.search.Engine;
-import javacode.chessprogram.chess.Chessboard;
-import javacode.chessprogram.chess.Move;
-import javacode.chessprogram.graphicsandui.Art;
-import javacode.chessprogram.miscAdmin.FenParser;
-import javacode.chessprogram.miscAdmin.MoveParserFromAN;
+import com.github.louism33.axolotl.search.Engine;
+import old.chessprogram.chess.Chessboard;
+import old.chessprogram.chess.Move;
+import old.chessprogram.graphicsandui.Art;
+import old.chessprogram.miscAdmin.FenParser;
+import old.chessprogram.miscAdmin.MoveParserFromAN;
 import org.junit.Assert;
 import org.junit.jupiter.api.Test;
 
Index: src/main/java/tests/enginetests/EngineTestMateInTwo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package tests.enginetests;\n\nimport javacode.chessengine.search.Engine;\nimport javacode.chessprogram.chess.Chessboard;\nimport javacode.chessprogram.chess.Move;\nimport javacode.chessprogram.graphicsandui.Art;\nimport javacode.chessprogram.miscAdmin.FenParser;\nimport javacode.chessprogram.miscAdmin.MoveParserFromAN;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\n\nclass EngineTestMateInTwo {\n\n    private static final int timeLimit = 10000;\n    \n    @Test\n    void test1() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"r2qkb1r/pp2nppp/3p4/2pNN1B1/2BnP3/3P4/PPP2PPP/R2bK2R w KQkq - 1 0\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int nf6 = MoveParserFromAN.destinationIndex(chessboard, \"Nf6\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(nf6, destination);\n    }\n\n    @Test\n    void test2() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"1rb4r/pkPp3p/1b1P3n/1Q6/N3Pp2/8/P1P3PP/7K w - - 1 0\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int Qd5 = MoveParserFromAN.destinationIndex(chessboard, \"Qd5+\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(Qd5, destination);\n    }\n\n    @Test\n    void test3() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"4kb1r/p2n1ppp/4q3/4p1B1/4P3/1Q6/PPP2PPP/2KR4 w k - 1 0\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int Qb8 = MoveParserFromAN.destinationIndex(chessboard, \"Qb8+\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(Qb8, destination);\n    }\n\n    @Test\n    void test4() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"r1b2k1r/ppp1bppp/8/1B1Q4/5q2/2P5/PPP2PPP/R3R1K1 w - - 1 0\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Qd8+\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n    @Test\n    void test5() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"5rkr/pp2Rp2/1b1p1Pb1/3P2Q1/2n3P1/2p5/P4P2/4R1K1 w - - 1 0\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Qxg6+\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n    @Test\n    void test6() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"1r5k/3b3p/3p3b/2qPp3/Pnp4P/Q1N5/8/K5RR b - - 0 1\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Nc2+\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n    @Test\n    void test7() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"1k1r4/pp5R/2p5/P5p1/7b/4Pq2/1PQ2P2/3NK3 b - - 0 1\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Rxd1+\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n    @Test\n    void test8() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"5bk1/R4p1p/6p1/8/3p2K1/1Q4P1/1P3P1q/2r5 b - - 0 1\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Qh5+\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n    @Test\n    void test9() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"3rr2k/pp1b2b1/4q1pp/2Pp1p2/3B4/1P2QNP1/P6P/R4RK1 w - - 1 0\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Qxh6+\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n    @Test\n    void test10() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"3r2k1/6pp/1nQ1R3/3r4/3N2q1/6N1/n4PPP/4R1K1 w - - 1 0\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Re8+\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n    @Test\n    void test11() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"r3k2r/p3bpp1/2q1p1b1/1ppPP1B1/3n3P/5NR1/PP2NP2/K1QR4 b kq - 0 1\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Nb3+\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n    @Test\n    void test12() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"4rk2/pp2N1bQ/5p2/8/2q5/P7/3r2PP/4RR1K w - - 1 0\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Rxf6+\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n    @Test\n    void test13() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"r4rk1/4bp2/1Bppq1p1/4p1n1/2P1Pn2/3P2N1/P2Q1PBK/1R5R b - - 0 1\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Qh3+\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n\n    @Test\n    void test14Styx() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"2q1r3/4pR2/3rQ1pk/p1pnN2p/Pn5B/8/1P4PP/3R3K w - - 1 0\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Nf3\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n    \n    @Test\n    void test15() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"q2br1k1/1b4pp/3Bp3/p6n/1p3R2/3B1N2/PP2QPPP/6K1 w - - 1 0\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Qxe6+\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n\n    @Test\n    void test16() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"5r1k/p2n1p1p/5P1N/1p1p4/2pP3P/8/PP4RK/8 w - - 1 0\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Rg8+\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n\n    @Test\n    void test17() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"8/7p/5pk1/3n2pq/3N1nR1/1P3P2/P6P/4QK2 w - - 1 0\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Qe8+\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n    @Test\n    void test18() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"2Q5/pp2rk1p/3p2pq/2bP1r2/5RR1/1P2P3/PB3P1P/7K w - - 1 0\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Rxf5+\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n    @Test\n    void test19() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"4r1k1/pQ3pp1/7p/4q3/4r3/P7/1P2nPPP/2BR1R1K b - - 0 1\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Qxh2+\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n    @Test\n    void test20() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"3R1rk1/1pp2pp1/1p6/8/8/P7/1q4BP/3Q2K1 w - - 1 0\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Rxf8+\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n    \n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/tests/enginetests/EngineTestMateInTwo.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/tests/enginetests/EngineTestMateInTwo.java	(date 1543670486000)
@@ -1,11 +1,11 @@
 package tests.enginetests;
 
-import javacode.chessengine.search.Engine;
-import javacode.chessprogram.chess.Chessboard;
-import javacode.chessprogram.chess.Move;
-import javacode.chessprogram.graphicsandui.Art;
-import javacode.chessprogram.miscAdmin.FenParser;
-import javacode.chessprogram.miscAdmin.MoveParserFromAN;
+import com.github.louism33.axolotl.search.Engine;
+import old.chessprogram.chess.Chessboard;
+import old.chessprogram.chess.Move;
+import old.chessprogram.graphicsandui.Art;
+import old.chessprogram.miscAdmin.FenParser;
+import old.chessprogram.miscAdmin.MoveParserFromAN;
 import org.junit.Assert;
 import org.junit.jupiter.api.Test;
 
Index: src/main/java/tests/enginetests/Pet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package tests.enginetests;\n\nimport javacode.chessengine.search.Engine;\nimport javacode.chessprogram.chess.Move;\nimport javacode.chessprogram.graphicsandui.Art;\nimport javacode.chessprogram.miscAdmin.ExtendedPositionDescriptionParser;\nimport org.junit.Assert;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.Parameterized;\nimport org.junit.runners.Parameterized.Parameters;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\n\n@RunWith(Parameterized.class)\npublic class Pet {\n    /*\n    Arasan = \t60 sec.\t42/48\n     */\n\n    private static final int timeLimit = 60000;\n\n    @Parameters(name = \"{index} Test: {1}\")\n    public static Collection<Object[]> data() {\n        List<Object[]> answers = new ArrayList<>();\n        for (String splitUpWAC : splitUpWACs) {\n            Object[] objectAndName = new Object[2];\n            ExtendedPositionDescriptionParser.EPDObject EPDObject = ExtendedPositionDescriptionParser.parseEDPPosition(splitUpWAC);\n            objectAndName[0] = EPDObject;\n            objectAndName[1] = EPDObject.getId();\n            answers.add(objectAndName);\n        }\n        return answers;\n    }\n\n\n    private static ExtendedPositionDescriptionParser.EPDObject EPDObject;\n\n    public Pet(Object edp, Object name) {\n        EPDObject = (ExtendedPositionDescriptionParser.EPDObject) edp;\n    }\n\n    @Test\n    public void test() {\n        WACTests.reset();\n        System.out.println(Art.boardArt(EPDObject.getBoard()));\n        Move move = new Engine().searchFixedTime(EPDObject.getBoard(), timeLimit);\n        System.out.println(move);\n\n        List<Integer> winningMoveDestination = EPDObject.getBestMoveDestinationIndex();\n        int myMoveDestination = move.destinationIndex;\n\n        Assert.assertTrue(winningMoveDestination.contains(myMoveDestination));\n\n        List<Integer> losingMoveDestination = EPDObject.getAvoidMoveDestinationIndex();\n\n        Assert.assertFalse(losingMoveDestination.contains(myMoveDestination));\n    }\n\n\n\n    private static final String wacTests = \"\" +\n            \"8/7p/2k1Pp2/pp1p2p1/3P2P1/4P3/P3K2P/8 w - - bm e4;             id \\\"PET001: Pawn endgame\\\";\\n\" +\n            \"8/1p4kP/5pP1/3p4/8/4P3/7K/8 w - - bm e4;                       id \\\"PET002: Pawn endgame\\\";\\n\" +\n            \"8/8/8/pPk3pp/2P1p3/1pK3P1/5PP1/8 w - - bm g4;                  id \\\"PET003: Pawn endgame\\\";\\n\" +\n            \"6k1/3p4/3p4/3P4/4P1p1/6P1/8/K7 w - - bm Kb1;                   id \\\"PET004: Pawn endgame\\\";\\n\" +\n            \"8/p7/1p2k1p1/8/1p2p1Pp/3pP2P/PP6/5K2 w - - bm b3;              id \\\"PET005: Pawn endgame\\\";\\n\" +\n            \"8/p7/1p2k1p1/8/1p2p1Pp/3pP2P/PP6/5K2 b - - bm b3;              id \\\"PET006: Pawn endgame\\\";\\n\" +\n            \"8/7p/p3pk2/1p5P/3K1P2/1P6/P7/8 w - - bm a4;                    id \\\"PET007: Pawn endgame\\\";\\n\" +\n            \"8/8/1p3p2/p3k1pp/4P2P/P3K1P1/1P6/8 w - - bm g4;                id \\\"PET008: Pawn endgame\\\";\\n\" +\n            \"8/8/p3k1p1/1pp5/4KP2/1P6/P5P1/8 w - - bm g4;                   id \\\"PET009: Pawn endgame\\\";\\n\" +\n            \"8/1p3p2/p4kpp/1PPp4/P7/7P/5K1P/8 b - - bm Ke6 Ke7;             id \\\"PET010: Pawn endgame\\\";\\n\" +\n            \"8/6p1/7p/p1N5/6PP/2k5/8/3K4 b - - bm a4;                       id \\\"PET011: pawns vs N\\\";\\n\" +\n            \"8/8/8/5Bp1/7k/8/4pPKP/8 w - - bm Bg4;                          id \\\"PET012: pawns vs B\\\";\\n\" +\n            \"8/8/2p5/pkp3R1/7B/P7/2p3K1/8 w - - bm a4+;                     id \\\"PET013: pawns vs R+B\\\";\\n\" +\n            \"8/6k1/6p1/2n2PP1/3N3p/3pK3/8/8 b - - bm d2;                    id \\\"PET014: Knight endgame\\\";\\n\" +\n            \"8/1N6/1p1P1n2/p1p1p3/P1P5/1P2k3/2K5/8 w - - bm Nxc5;           id \\\"PET015: Knight endgame\\\";\\n\" +\n            \"4k3/B1p4p/8/p2n1p2/5P2/5P2/1P2K2P/8 w - - am Be3;              id \\\"PET016: bishop vs knight\\\";\\n\" +\n            \"8/8/p2k1p2/1p1p3p/1P1P3p/P3NPP1/5K2/1b6 w - - bm Ng2;          id \\\"PET017: bishop vs knight\\\";\\n\" +\n            \"8/3k4/3b4/1K6/7p/5B1P/PP6/8 w - - bm b4;                       id \\\"PET018: opposite bishops\\\";\\n\" +\n            \"8/8/4kpp1/3p1b2/p6P/2B5/6P1/6K1 b - - bm Bh3;                  id \\\"PET019: opposite bishops\\\";\\n\" +\n            \"8/4k1p1/1p2B2p/4p3/8/4P2P/1PP1KbP1/8 b - - am Bxe3;            id \\\"PET020: opposite bishops\\\";\\n\" +\n            \"5k2/8/4b3/1B5P/8/8/5pPP/5K2 b - - bm Bh3;                      id \\\"PET021: bishop endgame\\\";\\n\" +\n            \"8/2B5/1p1p4/1PkP1p2/P4P2/5P2/1p6/bK6 w - - bm Bd8;             id \\\"PET022: bishop endgame\\\";\\n\" +\n            \"8/2p1bpp1/2Pp4/p2P1P1p/2K2B1P/k5P1/8/8 w - - bm f6;            id \\\"PET023: bishop endgame\\\";\\n\" +\n            \"8/4ppbk/p5pp/3pP3/3B4/5P1P/PP3P2/6K1 b - - am g5;              id \\\"PET024: bishop endgame\\\";\\n\" +\n            \"4K3/2k1Bp1N/6p1/5PP1/8/7p/b7/8 w - - bm Bf6;                   id \\\"PET025: BN vs B\\\";\\n\" +\n            \"8/5k2/4p3/4Pp1p/5P1P/3Rn2K/6p1/8 b - - bm g1=B;                id \\\"PET026: rook vs knight\\\";\\n\" +\n            \"5k2/8/8/3R4/6K1/8/3b2pP/8 w - - bm Rf5+;                       id \\\"PET027: rook vs bishop\\\";\\n\" +\n            \"8/4kp2/4p1p1/2p1r3/PpP5/3R4/1P1K1PP1/8 w - - bm g4;            id \\\"PET028: rook endgame\\\";\\n\" +\n            \"1r3k2/5pp1/3p2p1/8/3P4/P6P/2R2P1K/8 b - - bm Ra8;              id \\\"PET029: rook endgame\\\";\\n\" +\n            \"5k2/p1p4R/1pr5/3p1pP1/P2P1P2/2P2K2/8/8 w - - bm Kg3;           id \\\"PET030: rook endgame\\\";\\n\" +\n            \"8/1r3pkp/8/5p2/8/5PP1/1P1R3P/6K1 b - - bm f4;                  id \\\"PET031: rook endgame\\\";\\n\" +\n            \"8/5pk1/r5pp/P7/3R3P/6P1/5PK1/8 w - - bm Ra4;                   id \\\"PET032: rook endgame\\\";\\n\" +\n            \"8/4k3/2P2p2/6p1/1P4R1/4K3/7r/8 w - - bm Rd4;                   id \\\"PET033: rook endgame\\\";\\n\" +\n            \"3r4/7p/Rp4k1/5p2/4p3/2P5/PP3P1P/5K2 b - - bm Rd2;              id \\\"PET034: rook endgame\\\";\\n\" +\n            \"8/8/p2k3p/1P1p1pp1/P1r5/1R1K1PP1/7P/8 b - - bm a5;             id \\\"PET035: rook endgame\\\";\\n\" +\n            \"8/1r3pkp/R7/6Pp/8/4P3/5PK1/8 b - - bm Re7;                     id \\\"PET036: rook endgame\\\";\\n\" +\n            \"8/pR4pk/1b6/2p5/N1p5/8/PP1r2PP/6K1 b - - bm Rxb2;              id \\\"PET037: RN vs RB\\\";\\n\" +\n            \"4k3/2p1b3/4p1p1/1pp1P3/5PP1/1PBK4/r1P2R2/8 b - - bm c4+;       id \\\"PET038: RB vs RB\\\";\\n\" +\n            \"1r6/1pb1k1p1/4p2p/1p1p4/3Pp2P/1R2P1PB/1P2PK2/8 b - - bm b4;    id \\\"PET039: RB vs RB\\\";\\n\" +\n            \"8/8/5P1k/8/2K5/pr2r3/4R3/2R5 w - - bm f7;                      id \\\"PET042: double rook endgame\\\";\\n\" +\n            \"r5k1/5pp1/1P5p/3R4/2r5/P3P3/2p2PPP/2R3K1 b - - bm Rxa3;        id \\\"PET043: double rook endgame\\\";\\n\" +\n            \"1r6/Rp2rp2/1Pp2kp1/N1Pp3p/3Pp1nP/4P1P1/R4P2/6K1 w - - bm Nxb7 Rxb7; id \\\"PET044: RRN vs RRN\\\";\\n\" +\n            \"5k2/4p3/3p2Q1/3Pq1pP/5pP1/2P4K/8/8 w - - bm Qf5+;              id \\\"PET045: Queen endgame\\\";\\n\" +\n            \"8/8/1P1k2p1/8/5P1p/4Qb2/1q4PK/8 w - - bm Qe5+;                 id \\\"PET046: Q+B vs Q\\\";\\n\" +\n            \"8/p4k2/1p1p1qp1/1P1P4/P5P1/7P/4Q1K1/2b5 b - - am Qb2;          id \\\"PET047: Q+B vs Q\\\";\\n\" +\n            \"6qk/1p4pn/8/3p4/2P5/p3P1P1/P1Q3K1/1B6 w - - am Qxh7+;          id \\\"PET048: Q+B vs Q+N\\\";\\n\" +\n            \"1Q6/Nn3pbp/2N2p2/1Pqk1P1P/8/8/6P1/7K w - - am Qxb7;            id \\\"PET049: QNN vs QBN\\\";\\n\" +\n            \"7k/7p/1p4p1/n2p4/1K1p3R/2NB4/3Q1P2/q1r5 w - - bm Rxh7+;        id \\\"PET050: QNBR vs QNR\\\";\\n\" +\n            \"\";\n\n    private static final String[] splitUpWACs = wacTests.split(\"\\\\\\n\");\n    static int totalWACS = splitUpWACs.length;\n\n}\n    \n    \n\n    /*\n 8/7p/2k1Pp2/pp1p2p1/3P2P1/4P3/P3K2P/8 w - - bm e4;             id \"PET001: Pawn endgame\";\n8/1p4kP/5pP1/3p4/8/4P3/7K/8 w - - bm e4;                       id \"PET002: Pawn endgame\";\n8/8/8/pPk3pp/2P1p3/1pK3P1/5PP1/8 w - - bm g4;                  id \"PET003: Pawn endgame\";\n6k1/3p4/3p4/3P4/4P1p1/6P1/8/K7 w - - bm Kb1;                   id \"PET004: Pawn endgame\";\n8/p7/1p2k1p1/8/1p2p1Pp/3pP2P/PP6/5K2 w - - bm b3;              id \"PET005: Pawn endgame\";\n8/p7/1p2k1p1/8/1p2p1Pp/3pP2P/PP6/5K2 b - - bm b3;              id \"PET006: Pawn endgame\";\n8/7p/p3pk2/1p5P/3K1P2/1P6/P7/8 w - - bm a4;                    id \"PET007: Pawn endgame\";\n8/8/1p3p2/p3k1pp/4P2P/P3K1P1/1P6/8 w - - bm g4;                id \"PET008: Pawn endgame\";\n8/8/p3k1p1/1pp5/4KP2/1P6/P5P1/8 w - - bm g4;                   id \"PET009: Pawn endgame\";\n8/1p3p2/p4kpp/1PPp4/P7/7P/5K1P/8 b - - bm Ke6 Ke7;             id \"PET010: Pawn endgame\";\n8/6p1/7p/p1N5/6PP/2k5/8/3K4 b - - bm a4;                       id \"PET011: pawns vs N\";\n8/8/8/5Bp1/7k/8/4pPKP/8 w - - bm Bg4;                          id \"PET012: pawns vs B\";\n8/8/2p5/pkp3R1/7B/P7/2p3K1/8 w - - bm a4+;                     id \"PET013: pawns vs R+B\";\n8/6k1/6p1/2n2PP1/3N3p/3pK3/8/8 b - - bm d2;                    id \"PET014: Knight endgame\";\n8/1N6/1p1P1n2/p1p1p3/P1P5/1P2k3/2K5/8 w - - bm Nxc5;           id \"PET015: Knight endgame\";\n4k3/B1p4p/8/p2n1p2/5P2/5P2/1P2K2P/8 w - - am Be3;              id \"PET016: bishop vs knight\";\n8/8/p2k1p2/1p1p3p/1P1P3p/P3NPP1/5K2/1b6 w - - bm Ng2;          id \"PET017: bishop vs knight\";\n8/3k4/3b4/1K6/7p/5B1P/PP6/8 w - - bm b4;                       id \"PET018: opposite bishops\";\n8/8/4kpp1/3p1b2/p6P/2B5/6P1/6K1 b - - bm Bh3;                  id \"PET019: opposite bishops\";\n8/4k1p1/1p2B2p/4p3/8/4P2P/1PP1KbP1/8 b - - am Bxe3;            id \"PET020: opposite bishops\";\n5k2/8/4b3/1B5P/8/8/5pPP/5K2 b - - bm Bh3;                      id \"PET021: bishop endgame\";\n8/2B5/1p1p4/1PkP1p2/P4P2/5P2/1p6/bK6 w - - bm Bd8;             id \"PET022: bishop endgame\";\n8/2p1bpp1/2Pp4/p2P1P1p/2K2B1P/k5P1/8/8 w - - bm f6;            id \"PET023: bishop endgame\";\n8/4ppbk/p5pp/3pP3/3B4/5P1P/PP3P2/6K1 b - - am g5;              id \"PET024: bishop endgame\";\n4K3/2k1Bp1N/6p1/5PP1/8/7p/b7/8 w - - bm Bf6;                   id \"PET025: BN vs B\";\n8/5k2/4p3/4Pp1p/5P1P/3Rn2K/6p1/8 b - - bm g1=B;                id \"PET026: rook vs knight\";\n5k2/8/8/3R4/6K1/8/3b2pP/8 w - - bm Rf5+;                       id \"PET027: rook vs bishop\";\n8/4kp2/4p1p1/2p1r3/PpP5/3R4/1P1K1PP1/8 w - - bm g4;            id \"PET028: rook endgame\";\n1r3k2/5pp1/3p2p1/8/3P4/P6P/2R2P1K/8 b - - bm Ra8;              id \"PET029: rook endgame\";\n5k2/p1p4R/1pr5/3p1pP1/P2P1P2/2P2K2/8/8 w - - bm Kg3;           id \"PET030: rook endgame\";\n8/1r3pkp/8/5p2/8/5PP1/1P1R3P/6K1 b - - bm f4;                  id \"PET031: rook endgame\";\n8/5pk1/r5pp/P7/3R3P/6P1/5PK1/8 w - - bm Ra4;                   id \"PET032: rook endgame\";\n8/4k3/2P2p2/6p1/1P4R1/4K3/7r/8 w - - bm Rd4;                   id \"PET033: rook endgame\";\n3r4/7p/Rp4k1/5p2/4p3/2P5/PP3P1P/5K2 b - - bm Rd2;              id \"PET034: rook endgame\";\n8/8/p2k3p/1P1p1pp1/P1r5/1R1K1PP1/7P/8 b - - bm a5;             id \"PET035: rook endgame\";\n8/1r3pkp/R7/6Pp/8/4P3/5PK1/8 b - - bm Re7;                     id \"PET036: rook endgame\";\n8/pR4pk/1b6/2p5/N1p5/8/PP1r2PP/6K1 b - - bm Rxb2;              id \"PET037: RN vs RB\";\n4k3/2p1b3/4p1p1/1pp1P3/5PP1/1PBK4/r1P2R2/8 b - - bm c4+;       id \"PET038: RB vs RB\";\n1r6/1pb1k1p1/4p2p/1p1p4/3Pp2P/1R2P1PB/1P2PK2/8 b - - bm b4;    id \"PET039: RB vs RB\";\n8/8/5P1k/8/2K5/pr2r3/4R3/2R5 w - - bm f7;                      id \"PET042: double rook endgame\";\nr5k1/5pp1/1P5p/3R4/2r5/P3P3/2p2PPP/2R3K1 b - - bm Rxa3;        id \"PET043: double rook endgame\";\n1r6/Rp2rp2/1Pp2kp1/N1Pp3p/3Pp1nP/4P1P1/R4P2/6K1 w - - bm Nxb7 Rxb7; id \"PET044: RRN vs RRN\";\n5k2/4p3/3p2Q1/3Pq1pP/5pP1/2P4K/8/8 w - - bm Qf5+;              id \"PET045: Queen endgame\";\n8/8/1P1k2p1/8/5P1p/4Qb2/1q4PK/8 w - - bm Qe5+;                 id \"PET046: Q+B vs Q\";\n8/p4k2/1p1p1qp1/1P1P4/P5P1/7P/4Q1K1/2b5 b - - am Qb2;          id \"PET047: Q+B vs Q\";\n6qk/1p4pn/8/3p4/2P5/p3P1P1/P1Q3K1/1B6 w - - am Qxh7+;          id \"PET048: Q+B vs Q+N\";\n1Q6/Nn3pbp/2N2p2/1Pqk1P1P/8/8/6P1/7K w - - am Qxb7;            id \"PET049: QNN vs QBN\";\n7k/7p/1p4p1/n2p4/1K1p3R/2NB4/3Q1P2/q1r5 w - - bm Rxh7+;        id \"PET050: QNBR vs QNR\";\n\n     */\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/tests/enginetests/Pet.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/tests/enginetests/Pet.java	(date 1543670485000)
@@ -1,9 +1,9 @@
 package tests.enginetests;
 
-import javacode.chessengine.search.Engine;
-import javacode.chessprogram.chess.Move;
-import javacode.chessprogram.graphicsandui.Art;
-import javacode.chessprogram.miscAdmin.ExtendedPositionDescriptionParser;
+import com.github.louism33.axolotl.search.Engine;
+import old.chessprogram.chess.Move;
+import old.chessprogram.graphicsandui.Art;
+import old.chessprogram.miscAdmin.ExtendedPositionDescriptionParser;
 import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
Index: src/main/java/tests/enginetests/BS2830Test.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package tests.enginetests;\n\nimport javacode.chessengine.search.Engine;\nimport javacode.chessprogram.chess.Move;\nimport javacode.chessprogram.graphicsandui.Art;\nimport javacode.chessprogram.miscAdmin.ExtendedPositionDescriptionParser;\nimport org.junit.Assert;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.Parameterized;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\n\n@RunWith(Parameterized.class)\npublic class BS2830Test {\n    private static final int timeLimit = 10000;\n\n    @Parameterized.Parameters(name = \"{index} Test: {1}\")\n    public static Collection<Object[]> data() {\n        List<Object[]> answers = new ArrayList<>();\n        for (String splitUpBS : splitUpBSs) {\n            Object[] objectAndName = new Object[2];\n            ExtendedPositionDescriptionParser.EPDObject EPDObject = ExtendedPositionDescriptionParser.parseEDPPosition(splitUpBS);\n            objectAndName[0] = EPDObject;\n            objectAndName[1] = EPDObject.getId();\n            answers.add(objectAndName);\n        }\n        return answers;\n    }\n\n\n    private static ExtendedPositionDescriptionParser.EPDObject EPDObject;\n\n    public BS2830Test(Object edp, Object name) {\n        EPDObject = (ExtendedPositionDescriptionParser.EPDObject) edp;\n    }\n\n    @Test\n    public void test() {\n        WACTests.reset();\n        System.out.println(Art.boardArt(EPDObject.getBoard()));\n        Move move = new Engine().searchFixedTime(EPDObject.getBoard(), timeLimit);\n        System.out.println(move);\n\n        List<Integer> winningMoveDestination = EPDObject.getBestMoveDestinationIndex();\n        int myMoveDestination = move.destinationIndex;\n\n        Assert.assertTrue(winningMoveDestination.contains(myMoveDestination));\n    }\n\n\n    private static final String bsTests = \"\" +\n            \"4r1k1/p1pb1ppp/Qbp1r3/8/1P6/2Pq1B2/R2P1PPP/2B2RK1 b - - bm Qxf3; id \\\"BS2830-01\\\";\\n\" +\n            \"7r/2qpkp2/p3p3/6P1/1p2b2r/7P/PPP2QP1/R2N1RK1 b - - bm f5; id \\\"BS2830-02\\\";\\n\" +\n            \"r1bq1rk1/pp4bp/2np4/2p1p1p1/P1N1P3/1P1P1NP1/1BP1QPKP/1R3R2 b - - bm Bh3+; id \\\"BS2830-03\\\";\\n\" +\n            \"8/2kPR3/5q2/5N2/8/1p1P4/1p6/1K6 w - - bm Nd4; id \\\"BS2830-04\\\";\\n\" +\n            \"2r1r3/p3bk1p/1pnqpppB/3n4/3P2Q1/PB3N2/1P3PPP/3RR1K1 w - - bm Rxe6; id \\\"BS2830-05\\\";\\n\" +\n            \"8/2p5/7p/pP2k1pP/5pP1/8/1P2PPK1/8 w - - bm f3; id \\\"BS2830-06\\\";\\n\" +\n            \"8/5p1p/1p2pPk1/p1p1P3/P1P1K2b/4B3/1P5P/8 w - - bm b4; id \\\"BS2830-07\\\";\\n\" +\n            \"rn2r1k1/pp3ppp/8/1qNp4/3BnQb1/5N2/PPP2PPP/2KR3R b - - bm Bh5; id \\\"BS2830-08\\\";\\n\" +\n            \"r3kb1r/1p1b1p2/p1nppp2/7p/4PP2/qNN5/P1PQB1PP/R4R1K w kq - bm Nb1; id \\\"BS2830-09\\\";\\n\" +\n            \"r3r1k1/pp1bp2p/1n2q1P1/6b1/1B2B3/5Q2/5PPP/1R3RK1 w - - bm Bd2; id \\\"BS2830-10\\\";\\n\" +\n            \"r3k2r/pb3pp1/2p1qnnp/1pp1P3/Q1N4B/2PB1P2/P5PP/R4RK1 w kq - bm exf6; id \\\"BS2830-11\\\";\\n\" +\n            \"r1b1r1k1/ppp2ppp/2nb1q2/8/2B5/1P1Q1N2/P1PP1PPP/R1B2RK1 w - - bm Bb2; id \\\"BS2830-12\\\";\\n\" +\n//            \"rnb1kb1r/1p3ppp/p5q1/4p3/3N4/4BB2/PPPQ1P1P/R3K2R w KQkq - bm O-O-O; id \\\"BS2830-13\\\";\\n\" +\n            \"r1bqr1k1/pp1n1ppp/5b2/4N1B1/3p3P/8/PPPQ1PP1/2K1RB1R w - - bm Nxf7; id \\\"BS2830-14\\\";\\n\" +\n            \"2r2rk1/1bpR1p2/1pq1pQp1/p3P2p/P1PR3P/5N2/2P2PPK/8 w - - bm Kg3; id \\\"BS2830-15\\\";\\n\" +\n            \"8/pR4pk/1b6/2p5/N1p5/8/PP1r2PP/6K1 b - - bm Rxb2; id \\\"BS2830-16\\\";\\n\" +\n            \"r1b1qrk1/ppBnppb1/2n4p/1NN1P1p1/3p4/8/PPP1BPPP/R2Q1R1K w - - bm Ne6; id \\\"BS2830-17\\\";\\n\" +\n            \"8/8/4b1p1/2Bp3p/5P1P/1pK1Pk2/8/8 b - - bm g5; id \\\"BS2830-18\\\";\\n\" +\n            \"r3k2r/pp1n1ppp/1qpnp3/3bN1PP/3P2Q1/2B1R3/PPP2P2/2KR1B2 w kq - bm Be1; id \\\"BS2830-19\\\";\\n\" +\n//            \"r1bqk2r/pppp1Npp/8/2bnP3/8/6K1/PB4PP/RN1Q3R b kq - bm O-O; id \\\"BS2830-20\\\";\\n\" +\n            \"r4r1k/pbnq1ppp/np3b2/3p1N2/5B2/2N3PB/PP3P1P/R2QR1K1 w - - bm Ne4; id \\\"BS2830-21\\\";\\n\" +\n            \"r2qr2k/pbp3pp/1p2Bb2/2p5/2P2P2/3R2P1/PP2Q1NP/5RK1 b - - bm Qxd3; id \\\"BS2830-22\\\";\\n\" +\n            \"5r2/1p4r1/3kp1b1/1Pp1p2p/2PpP3/q2B1PP1/3Q2K1/1R5R b - - bm Rxf3; id \\\"BS2830-23\\\";\\n\" +\n            \"8/7p/8/7P/1p6/1p5P/1P2Q1pk/1K6 w - - bm Ka1; id \\\"BS2830-24\\\";\\n\" +\n            \"r5k1/p4n1p/6p1/2qPp3/2p1P1Q1/8/1rB3PP/R4R1K b - - bm Rf8; id \\\"BS2830-25\\\";\\n\" +\n            \"1r4k1/1q2pN1p/3pPnp1/8/2pQ4/P5PP/5P2/3R2K1 b - - bm Qd5; id \\\"BS2830-26\\\";\\n\" +\n            \"2rq1rk1/pb3ppp/1p2pn2/4N3/1b1PPB2/4R1P1/P4PBP/R2Q2K1 w - - bm d5; id \\\"BS2830-27\\\";\" +\n            \"\";\n\n    private static final String[] splitUpBSs = bsTests.split(\"\\\\\\n\");\n}\n    /*\n    4r1k1/p1pb1ppp/Qbp1r3/8/1P6/2Pq1B2/R2P1PPP/2B2RK1 b - - bm Qxf3; id \"BS2830-01\";\n7r/2qpkp2/p3p3/6P1/1p2b2r/7P/PPP2QP1/R2N1RK1 b - - bm f5; id \"BS2830-02\";\nr1bq1rk1/pp4bp/2np4/2p1p1p1/P1N1P3/1P1P1NP1/1BP1QPKP/1R3R2 b - - bm Bh3+; id \"BS2830-03\";\n8/2kPR3/5q2/5N2/8/1p1P4/1p6/1K6 w - - bm Nd4; id \"BS2830-04\";\n2r1r3/p3bk1p/1pnqpppB/3n4/3P2Q1/PB3N2/1P3PPP/3RR1K1 w - - bm Rxe6; id \"BS2830-05\";\n8/2p5/7p/pP2k1pP/5pP1/8/1P2PPK1/8 w - - bm f3; id \"BS2830-06\";\n8/5p1p/1p2pPk1/p1p1P3/P1P1K2b/4B3/1P5P/8 w - - bm b4; id \"BS2830-07\";\nrn2r1k1/pp3ppp/8/1qNp4/3BnQb1/5N2/PPP2PPP/2KR3R b - - bm Bh5; id \"BS2830-08\";\nr3kb1r/1p1b1p2/p1nppp2/7p/4PP2/qNN5/P1PQB1PP/R4R1K w kq - bm Nb1; id \"BS2830-09\";\nr3r1k1/pp1bp2p/1n2q1P1/6b1/1B2B3/5Q2/5PPP/1R3RK1 w - - bm Bd2; id \"BS2830-10\";\nr3k2r/pb3pp1/2p1qnnp/1pp1P3/Q1N4B/2PB1P2/P5PP/R4RK1 w kq - bm exf6; id \"BS2830-11\";\nr1b1r1k1/ppp2ppp/2nb1q2/8/2B5/1P1Q1N2/P1PP1PPP/R1B2RK1 w - - bm Bb2; id \"BS2830-12\";\nrnb1kb1r/1p3ppp/p5q1/4p3/3N4/4BB2/PPPQ1P1P/R3K2R w KQkq - bm O-O-O; id \"BS2830-13\";\nr1bqr1k1/pp1n1ppp/5b2/4N1B1/3p3P/8/PPPQ1PP1/2K1RB1R w - - bm Nxf7; id \"BS2830-14\";\n2r2rk1/1bpR1p2/1pq1pQp1/p3P2p/P1PR3P/5N2/2P2PPK/8 w - - bm Kg3; id \"BS2830-15\";\n8/pR4pk/1b6/2p5/N1p5/8/PP1r2PP/6K1 b - - bm Rxb2; id \"BS2830-16\";\nr1b1qrk1/ppBnppb1/2n4p/1NN1P1p1/3p4/8/PPP1BPPP/R2Q1R1K w - - bm Ne6; id \"BS2830-17\";\n8/8/4b1p1/2Bp3p/5P1P/1pK1Pk2/8/8 b - - bm g5; id \"BS2830-18\";\nr3k2r/pp1n1ppp/1qpnp3/3bN1PP/3P2Q1/2B1R3/PPP2P2/2KR1B2 w kq - bm Be1; id \"BS2830-19\";\nr1bqk2r/pppp1Npp/8/2bnP3/8/6K1/PB4PP/RN1Q3R b kq - bm O-O; id \"BS2830-20\";\nr4r1k/pbnq1ppp/np3b2/3p1N2/5B2/2N3PB/PP3P1P/R2QR1K1 w - - bm Ne4; id \"BS2830-21\";\nr2qr2k/pbp3pp/1p2Bb2/2p5/2P2P2/3R2P1/PP2Q1NP/5RK1 b - - bm Qxd3; id \"BS2830-22\";\n5r2/1p4r1/3kp1b1/1Pp1p2p/2PpP3/q2B1PP1/3Q2K1/1R5R b - - bm Rxf3; id \"BS2830-23\";\n8/7p/8/7P/1p6/1p5P/1P2Q1pk/1K6 w - - bm Ka1; id \"BS2830-24\";\nr5k1/p4n1p/6p1/2qPp3/2p1P1Q1/8/1rB3PP/R4R1K b - - bm Rf8; id \"BS2830-25\";\n1r4k1/1q2pN1p/3pPnp1/8/2pQ4/P5PP/5P2/3R2K1 b - - bm Qd5; id \"BS2830-26\";\n2rq1rk1/pb3ppp/1p2pn2/4N3/1b1PPB2/4R1P1/P4PBP/R2Q2K1 w - - bm d5; id \"BS2830-27\";\n     */\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/tests/enginetests/BS2830Test.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/tests/enginetests/BS2830Test.java	(date 1543670486000)
@@ -1,9 +1,9 @@
 package tests.enginetests;
 
-import javacode.chessengine.search.Engine;
-import javacode.chessprogram.chess.Move;
-import javacode.chessprogram.graphicsandui.Art;
-import javacode.chessprogram.miscAdmin.ExtendedPositionDescriptionParser;
+import com.github.louism33.axolotl.search.Engine;
+import old.chessprogram.chess.Move;
+import old.chessprogram.graphicsandui.Art;
+import old.chessprogram.miscAdmin.ExtendedPositionDescriptionParser;
 import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
Index: src/main/java/tests/enginetests/BT2630.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package tests.enginetests;\n\nimport javacode.chessengine.search.Engine;\nimport javacode.chessprogram.chess.Move;\nimport javacode.chessprogram.graphicsandui.Art;\nimport javacode.chessprogram.miscAdmin.ExtendedPositionDescriptionParser;\nimport org.junit.Assert;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.Parameterized;\nimport org.junit.runners.Parameterized.Parameters;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\n\n@RunWith(Parameterized.class)\npublic class BT2630 {\n    /*\n    Arasan = 900 sec.\t27/30\n(rating: 2540)\n\n30 minutes!\n     */\n\n    private static final int timeLimit = 900000;\n\n    @Parameters(name = \"{index} Test: {1}\")\n    public static Collection<Object[]> data() {\n        List<Object[]> answers = new ArrayList<>();\n        for (String splitUpWAC : splitUpWACs) {\n            Object[] objectAndName = new Object[2];\n            ExtendedPositionDescriptionParser.EPDObject EPDObject = ExtendedPositionDescriptionParser.parseEDPPosition(splitUpWAC);\n            objectAndName[0] = EPDObject;\n            objectAndName[1] = EPDObject.getId();\n            answers.add(objectAndName);\n        }\n        return answers;\n    }\n\n\n    private static ExtendedPositionDescriptionParser.EPDObject EPDObject;\n\n    public BT2630(Object edp, Object name) {\n        EPDObject = (ExtendedPositionDescriptionParser.EPDObject) edp;\n    }\n\n    @Test\n    public void test() {\n        WACTests.reset();\n        System.out.println(Art.boardArt(EPDObject.getBoard()));\n        Move move = new Engine().searchFixedTime(EPDObject.getBoard(), timeLimit);\n        System.out.println(move);\n\n        List<Integer> winningMoveDestination = EPDObject.getBestMoveDestinationIndex();\n        int myMoveDestination = move.destinationIndex;\n\n        Assert.assertTrue(winningMoveDestination.contains(myMoveDestination));\n\n        List<Integer> losingMoveDestination = EPDObject.getAvoidMoveDestinationIndex();\n\n        Assert.assertFalse(losingMoveDestination.contains(myMoveDestination));\n    }\n\n\n\n    private static final String wacTests = \"\" +\n            \"rq2r1k1/5pp1/p7/4bNP1/1p2P2P/5Q2/PP4K1/5R1R w - - bm Nxg7; id \\\"test 1\\\";\\n\" +\n            \"6k1/2b2p1p/ppP3p1/4p3/PP1B4/5PP1/7P/7K w - - bm Bxb6; id \\\"test 2\\\";\\n\" +\n            \"5r1k/p1q2pp1/1pb4p/n3R1NQ/7P/3B1P2/2P3P1/7K w - - bm Re6; id \\\"test 3\\\";\\n\" +\n            \"5r1k/1P4pp/3P1p2/4p3/1P5P/3q2P1/Q2b2K1/B3R3 w - - bm Qf7; id \\\"test 4\\\";\\n\" +\n            \"3B4/8/2B5/1K6/8/8/3p4/3k4 w - - bm Ka6; id \\\"test 5\\\";\\n\" +\n            \"1k1r4/1pp4p/2n5/P6R/2R1p1r1/2P2p2/1PP2B1P/4K3 b - - bm e3; id \\\"test 6\\\";\\n\" +\n            \"6k1/p3q2p/1nr3pB/8/3Q1P2/6P1/PP5P/3R2K1 b - - bm Rd6; id \\\"test 7\\\";\\n\" +\n            \"2krr3/1p4pp/p1bRpp1n/2p5/P1B1PP2/8/1PP3PP/R1K3B1 w - - bm Rxc6+; id \\\"test 8\\\";\\n\" +\n            \"r5k1/pp2p1bp/6p1/n1p1P3/2qP1NP1/2PQB3/P5PP/R4K2 b - - bm g5; id \\\"test 9\\\";\\n\" +\n            \"2r3k1/1qr1b1p1/p2pPn2/nppPp3/8/1PP1B2P/P1BQ1P2/5KRR w - - bm Rxg7+; id \\\"test 10\\\";\\n\" +\n            \"1br3k1/p4p2/2p1r3/3p1b2/3Bn1p1/1P2P1Pq/P3Q1BP/2R1NRK1 b - - bm Qxh2+; id \\\"test 11\\\";\\n\" +\n            \"8/pp3k2/2p1qp2/2P5/5P2/1R2p1rp/PP2R3/4K2Q b - - bm Qe4; id \\\"test 12\\\";\\n\" +\n            \"2bq3k/2p4p/p2p4/7P/1nBPPQP1/r1p5/8/1K1R2R1 b - - bm Be6; id \\\"test 13\\\";\\n\" +\n            \"3r1rk1/1p3pnp/p3pBp1/1qPpP3/1P1P2R1/P2Q3R/6PP/6K1 w - - bm Rxh7; id \\\"test 14\\\";\\n\" +\n            \"2b1q3/p7/1p1p2kb/nPpN3p/P1P1P2P/6P1/5R1K/5Q2 w - - bm e5; id \\\"test 15\\\";\\n\" +\n            \"2krr3/pppb1ppp/3b4/3q4/3P3n/2P2N1P/PP2B1P1/R1BQ1RK1 b - - bm Nxg2; id \\\"test 16\\\";\\n\" +\n            \"4r1k1/p1qr1p2/2pb1Bp1/1p5p/3P1n1R/3B1P2/PP3PK1/2Q4R w - - bm Qxf4; id \\\"test 17\\\";\\n\" +\n            \"8/4p3/8/3P3p/P2pK3/6P1/7b/3k4 w - - bm d6; id \\\"test 18\\\";\\n\" +\n            \"3r2k1/pp4B1/6pp/PP1Np2n/2Pp1p2/3P2Pq/3QPPbP/R4RK1 b - - bm f3; id \\\"test 19\\\";\\n\" +\n            \"r4rk1/5p2/1n4pQ/2p5/p5P1/P4N2/1qb1BP1P/R3R1K1 w - - bm Ra2; id \\\"test 20\\\";\\n\" +\n            \"k7/8/PP1b2P1/K2Pn2P/4R3/8/6np/8 w - - bm Re1; id \\\"test 21\\\";\\n\" +\n            \"rnb1k2r/pp2qppp/3p1n2/2pp2B1/1bP5/2N1P3/PP2NPPP/R2QKB1R w KQkq - bm a3; id \\\"test 22\\\";\\n\" +\n            \"8/7p/8/p4p2/5K2/Bpk3P1/4P2P/8 w - - bm g4; id \\\"test 23\\\";\\n\" +\n            \"R7/3p3p/8/3P2P1/3k4/1p5p/1P1NKP1P/7q w - - bm g6; id \\\"test 24\\\";\\n\" +\n            \"8/8/3k1p2/p2BnP2/4PN2/1P2K1p1/8/5b2 b - - bm Nd3; id \\\"test 25\\\";\\n\" +\n            \"2r3k1/pbr1q2p/1p2pnp1/3p4/3P1P2/1P1BR3/PB1Q2PP/5RK1 w - - bm f5; id \\\"test 26\\\";\\n\" +\n            \"3r2k1/p2r2p1/1p1B2Pp/4PQ1P/2b1p3/P3P3/7K/8 w - - bm Bb4; id \\\"test 27\\\";\\n\" +\n            \"rnb1k1nr/p2p1ppp/3B4/1p1N1N1P/4P1P1/3P1Q2/PqP5/R4Kb1 w kq - bm Re1; id \\\"test 28\\\";\\n\" +\n            \"r1b1kb1r/pp1n1ppp/2q5/2p3B1/Q1B5/2p2N2/PP3PPP/R3K2R w KQkq - bm Bxf7+; id \\\"test 29\\\";\\n\" +\n            \"2k5/2p3Rp/p1pb4/1p2p3/4P3/PN1P1P2/1P2KP1r/8 w - - bm f4; id \\\"test 30\\\";\\n\" +\n            \"\";\n\n    private static final String[] splitUpWACs = wacTests.split(\"\\\\\\n\");\n    static int totalWACS = splitUpWACs.length;\n\n}\n    \n    \n\n    /*\n    rq2r1k1/5pp1/p7/4bNP1/1p2P2P/5Q2/PP4K1/5R1R w - - bm Nxg7; id \"test 1\";\n6k1/2b2p1p/ppP3p1/4p3/PP1B4/5PP1/7P/7K w - - bm Bxb6; id \"test 2\";\n5r1k/p1q2pp1/1pb4p/n3R1NQ/7P/3B1P2/2P3P1/7K w - - bm Re6; id \"test 3\";\n5r1k/1P4pp/3P1p2/4p3/1P5P/3q2P1/Q2b2K1/B3R3 w - - bm Qf7; id \"test 4\";\n3B4/8/2B5/1K6/8/8/3p4/3k4 w - - bm Ka6; id \"test 5\";\n1k1r4/1pp4p/2n5/P6R/2R1p1r1/2P2p2/1PP2B1P/4K3 b - - bm e3; id \"test 6\";\n6k1/p3q2p/1nr3pB/8/3Q1P2/6P1/PP5P/3R2K1 b - - bm Rd6; id \"test 7\";\n2krr3/1p4pp/p1bRpp1n/2p5/P1B1PP2/8/1PP3PP/R1K3B1 w - - bm Rxc6+; id \"test 8\";\nr5k1/pp2p1bp/6p1/n1p1P3/2qP1NP1/2PQB3/P5PP/R4K2 b - - bm g5; id \"test 9\";\n2r3k1/1qr1b1p1/p2pPn2/nppPp3/8/1PP1B2P/P1BQ1P2/5KRR w - - bm Rxg7+; id \"test 10\";\n1br3k1/p4p2/2p1r3/3p1b2/3Bn1p1/1P2P1Pq/P3Q1BP/2R1NRK1 b - - bm Qxh2+; id \"test 11\";\n8/pp3k2/2p1qp2/2P5/5P2/1R2p1rp/PP2R3/4K2Q b - - bm Qe4; id \"test 12\";\n2bq3k/2p4p/p2p4/7P/1nBPPQP1/r1p5/8/1K1R2R1 b - - bm Be6; id \"test 13\";\n3r1rk1/1p3pnp/p3pBp1/1qPpP3/1P1P2R1/P2Q3R/6PP/6K1 w - - bm Rxh7; id \"test 14\";\n2b1q3/p7/1p1p2kb/nPpN3p/P1P1P2P/6P1/5R1K/5Q2 w - - bm e5; id \"test 15\";\n2krr3/pppb1ppp/3b4/3q4/3P3n/2P2N1P/PP2B1P1/R1BQ1RK1 b - - bm Nxg2; id \"test 16\";\n4r1k1/p1qr1p2/2pb1Bp1/1p5p/3P1n1R/3B1P2/PP3PK1/2Q4R w - - bm Qxf4; id \"test 17\";\n8/4p3/8/3P3p/P2pK3/6P1/7b/3k4 w - - bm d6; id \"test 18\";\n3r2k1/pp4B1/6pp/PP1Np2n/2Pp1p2/3P2Pq/3QPPbP/R4RK1 b - - bm f3; id \"test 19\";\nr4rk1/5p2/1n4pQ/2p5/p5P1/P4N2/1qb1BP1P/R3R1K1 w - - bm Ra2; id \"test 20\";\nk7/8/PP1b2P1/K2Pn2P/4R3/8/6np/8 w - - bm Re1; id \"test 21\";\nrnb1k2r/pp2qppp/3p1n2/2pp2B1/1bP5/2N1P3/PP2NPPP/R2QKB1R w KQkq - bm a3; id \"test 22\";\n8/7p/8/p4p2/5K2/Bpk3P1/4P2P/8 w - - bm g4; id \"test 23\";\nR7/3p3p/8/3P2P1/3k4/1p5p/1P1NKP1P/7q w - - bm g6; id \"test 24\";\n8/8/3k1p2/p2BnP2/4PN2/1P2K1p1/8/5b2 b - - bm Nd3; id \"test 25\";\n2r3k1/pbr1q2p/1p2pnp1/3p4/3P1P2/1P1BR3/PB1Q2PP/5RK1 w - - bm f5; id \"test 26\";\n3r2k1/p2r2p1/1p1B2Pp/4PQ1P/2b1p3/P3P3/7K/8 w - - bm Bb4; id \"test 27\";\nrnb1k1nr/p2p1ppp/3B4/1p1N1N1P/4P1P1/3P1Q2/PqP5/R4Kb1 w kq - bm Re1; id \"test 28\";\nr1b1kb1r/pp1n1ppp/2q5/2p3B1/Q1B5/2p2N2/PP3PPP/R3K2R w KQkq - bm Bxf7+; id \"test 29\";\n2k5/2p3Rp/p1pb4/1p2p3/4P3/PN1P1P2/1P2KP1r/8 w - - bm f4; id \"test 30\";\n\n     */
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/tests/enginetests/BT2630.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/tests/enginetests/BT2630.java	(date 1543670486000)
@@ -1,9 +1,9 @@
 package tests.enginetests;
 
-import javacode.chessengine.search.Engine;
-import javacode.chessprogram.chess.Move;
-import javacode.chessprogram.graphicsandui.Art;
-import javacode.chessprogram.miscAdmin.ExtendedPositionDescriptionParser;
+import com.github.louism33.axolotl.search.Engine;
+import old.chessprogram.chess.Move;
+import old.chessprogram.graphicsandui.Art;
+import old.chessprogram.miscAdmin.ExtendedPositionDescriptionParser;
 import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AnalysisUIOptions\">\n    <option name=\"SCOPE_TYPE\" value=\"8\" />\n    <option name=\"CUSTOM_SCOPE_NAME\" value=\"Current File\" />\n  </component>\n  <component name=\"ArtifactsWorkspaceSettings\">\n    <artifacts-to-build>\n      <artifact name=\"chesscore:jar\" />\n    </artifacts-to-build>\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"8807346a-cf9d-4333-98e2-880bdb09ab35\" name=\"Default Changelist\" comment=\"\">\n      <change afterPath=\"$PROJECT_DIR$/.idea/artifacts/chesscore_jar.xml\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/.idea/encodings.xml\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/.idea/libraries/Maven__junit_junit_4_13_beta_1.xml\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/javacode/chessprogram/miscAdmin/Dummy.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/Axolotl.iml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/Axolotl.iml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/libraries/Maven__junit_junit_4_12.xml\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/libraries/Maven__org_junit_jupiter_junit_jupiter_api_5_3_1.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/libraries/Maven__org_junit_jupiter_junit_jupiter_api_5_3_2.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/libraries/Maven__org_junit_platform_junit_platform_commons_1_3_1.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/libraries/Maven__org_junit_platform_junit_platform_commons_1_3_2.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/pom.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pom.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/javacode/chessengine/main/UCIEntry.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/javacode/chessengine/main/UCIEntry.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/../ChessCore/pom.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../ChessCore/pom.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/../ChessCore/target/maven-archiver/pom.properties\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../ChessCore/target/maven-archiver/pom.properties\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/../ChessCore/target/maven-status/maven-compiler-plugin/compile/default-compile/createdFiles.lst\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../ChessCore/target/maven-status/maven-compiler-plugin/compile/default-compile/createdFiles.lst\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/../ChessCore/target/maven-status/maven-compiler-plugin/compile/default-compile/inputFiles.lst\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../ChessCore/target/maven-status/maven-compiler-plugin/compile/default-compile/inputFiles.lst\" afterDir=\"false\" />\n    </list>\n    <ignored path=\"$PROJECT_DIR$/.idea/shelf/\" />\n    <ignored path=\"$PROJECT_DIR$/out/\" />\n    <ignored path=\"$PROJECT_DIR$/target/\" />\n    <ignored path=\"$PROJECT_DIR$/../ChessCore/target/\" />\n    <option name=\"EXCLUDED_CONVERTED_TO_IGNORED\" value=\"true\" />\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"CoverageDataManager\">\n    <SUITE FILE_PATH=\"coverage/chessPlusPlus$Perft.ic\" NAME=\"Perft Coverage Results\" MODIFIED=\"1539107516940\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"idea\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\">\n      <FILTER>chess.*</FILTER>\n    </SUITE>\n    <SUITE FILE_PATH=\"coverage/chessPlusPlus$MoveUnmakerTest_unMakeMoveMaster.ic\" NAME=\"MoveUnmakerTest.unMakeMoveMaster Coverage Results\" MODIFIED=\"1539250031897\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"idea\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\">\n      <FILTER>tests.*</FILTER>\n    </SUITE>\n    <SUITE FILE_PATH=\"coverage/Axolotl$DetailedPerftSearchingTestSuite_test3.ic\" NAME=\"DetailedPerftSearchingTestSuite.test3 Coverage Results\" MODIFIED=\"1542735665200\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"idea\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\">\n      <FILTER>tests.programtests.*</FILTER>\n    </SUITE>\n    <SUITE FILE_PATH=\"coverage/chessPlusPlus$Main__2_.ic\" NAME=\"Main (2) Coverage Results\" MODIFIED=\"1539720297125\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"idea\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\">\n      <FILTER>javacode.main.*</FILTER>\n    </SUITE>\n  </component>\n  <component name=\"ErrorTreeViewConfiguration\">\n    <option name=\"autoscrollToSource\" value=\"true\" />\n    <option name=\"IS_AUTOSCROLL_TO_SOURCE\" value=\"true\" />\n  </component>\n  <component name=\"ExportTestResults\" outputFolder=\"$PROJECT_DIR$\" userTempatePath=\"\" />\n  <component name=\"FUSProjectUsageTrigger\">\n    <session id=\"-975693011\">\n      <usages-collector id=\"statistics.lifecycle.project\">\n        <counts>\n          <entry key=\"project.closed\" value=\"27\" />\n          <entry key=\"project.open.time.14\" value=\"2\" />\n          <entry key=\"project.open.time.15\" value=\"2\" />\n          <entry key=\"project.open.time.16\" value=\"2\" />\n          <entry key=\"project.open.time.17\" value=\"2\" />\n          <entry key=\"project.open.time.18\" value=\"2\" />\n          <entry key=\"project.open.time.19\" value=\"4\" />\n          <entry key=\"project.open.time.20\" value=\"5\" />\n          <entry key=\"project.open.time.21\" value=\"1\" />\n          <entry key=\"project.open.time.24\" value=\"3\" />\n          <entry key=\"project.open.time.28\" value=\"1\" />\n          <entry key=\"project.open.time.36\" value=\"1\" />\n          <entry key=\"project.open.time.38\" value=\"1\" />\n          <entry key=\"project.open.time.53\" value=\"1\" />\n          <entry key=\"project.opened\" value=\"27\" />\n        </counts>\n      </usages-collector>\n      <usages-collector id=\"statistics.file.extensions.open\">\n        <counts>\n          <entry key=\"LICENSE\" value=\"1\" />\n          <entry key=\"RookMagics\" value=\"1\" />\n          <entry key=\"RookVariations\" value=\"2\" />\n          <entry key=\"gitignore\" value=\"5\" />\n          <entry key=\"iml\" value=\"4\" />\n          <entry key=\"java\" value=\"1457\" />\n          <entry key=\"jpg\" value=\"1\" />\n          <entry key=\"jtxt\" value=\"1\" />\n          <entry key=\"md\" value=\"1\" />\n          <entry key=\"txt\" value=\"20\" />\n          <entry key=\"xml\" value=\"16\" />\n          <entry key=\"yml\" value=\"4\" />\n        </counts>\n      </usages-collector>\n      <usages-collector id=\"statistics.file.types.open\">\n        <counts>\n          <entry key=\"IDEA_MODULE\" value=\"4\" />\n          <entry key=\"Image\" value=\"1\" />\n          <entry key=\"JAVA\" value=\"1457\" />\n          <entry key=\"Markdown\" value=\"1\" />\n          <entry key=\"PLAIN_TEXT\" value=\"30\" />\n          <entry key=\"XML\" value=\"16\" />\n          <entry key=\"YAML\" value=\"4\" />\n        </counts>\n      </usages-collector>\n      <usages-collector id=\"statistics.file.extensions.edit\">\n        <counts>\n          <entry key=\"dummy\" value=\"224\" />\n          <entry key=\"java\" value=\"57230\" />\n          <entry key=\"txt\" value=\"63\" />\n          <entry key=\"xml\" value=\"365\" />\n          <entry key=\"yml\" value=\"4\" />\n        </counts>\n      </usages-collector>\n      <usages-collector id=\"statistics.file.types.edit\">\n        <counts>\n          <entry key=\"JAVA\" value=\"57230\" />\n          <entry key=\"PLAIN_TEXT\" value=\"287\" />\n          <entry key=\"XML\" value=\"365\" />\n          <entry key=\"YAML\" value=\"4\" />\n        </counts>\n      </usages-collector>\n    </session>\n  </component>\n  <component name=\"FavoritesManager\">\n    <favorites_list name=\"chessPlusPlus\" />\n  </component>\n  <component name=\"FileEditorManager\">\n    <leaf SIDE_TABS_SIZE_LIMIT_KEY=\"300\">\n      <file pinned=\"false\" current-in-tab=\"false\">\n        <entry file=\"file://$PROJECT_DIR$/pom.xml\">\n          <provider selected=\"true\" editor-type-id=\"text-editor\">\n            <state>\n              <caret column=\"12\" selection-start-column=\"12\" selection-end-column=\"12\" />\n            </state>\n          </provider>\n        </entry>\n      </file>\n      <file pinned=\"false\" current-in-tab=\"false\">\n        <entry file=\"file://$PROJECT_DIR$/../ChessCore/pom.xml\">\n          <provider selected=\"true\" editor-type-id=\"text-editor\">\n            <state relative-caret-position=\"90\">\n              <caret line=\"6\" column=\"13\" selection-start-line=\"6\" selection-start-column=\"13\" selection-end-line=\"6\" selection-end-column=\"32\" />\n            </state>\n          </provider>\n        </entry>\n      </file>\n      <file pinned=\"false\" current-in-tab=\"true\">\n        <entry file=\"file://$PROJECT_DIR$/src/main/java/javacode/chessprogram/miscAdmin/Dummy.java\">\n          <provider selected=\"true\" editor-type-id=\"text-editor\">\n            <state relative-caret-position=\"105\">\n              <caret line=\"9\" column=\"4\" lean-forward=\"true\" selection-start-line=\"9\" selection-start-column=\"4\" selection-end-line=\"9\" selection-end-column=\"4\" />\n            </state>\n          </provider>\n        </entry>\n      </file>\n    </leaf>\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Arquillian JUnit Test Class\" />\n        <option value=\"JUnit5 Test Class\" />\n        <option value=\"Class\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"FindInProjectRecents\">\n    <findStrings>\n      <find>temp</find>\n      <find>println(board</find>\n      <find>movef</find>\n      <find>legal</find>\n      <find>Master</find>\n      <find>if .* &amp;</find>\n      <find>for (</find>\n      <find>8</find>\n      <find>FILES</find>\n      <find>for (lon</find>\n      <find>enemyPawnsInPosition</find>\n      <find>cal</find>\n      <find>makeRook</find>\n      <find>private</find>\n      <find>ca</find>\n      <find>enemy</find>\n      <find>enemyPaw</find>\n      <find>pawn</find>\n      <find>makeRegul</find>\n      <find>Black</find>\n      <find>global</find>\n      <find>git</find>\n      <find>proper</find>\n      <find>public class</find>\n      <find>whichpiecesare</find>\n      <find>ene</find>\n      <find>sonaty</find>\n      <find>setting</find>\n      <find>autore</find>\n      <find>url</find>\n    </findStrings>\n    <replaceStrings>\n      <replace>BitOperations.</replace>\n      <replace>BitOperations</replace>\n      <replace>verifyHashToDepth</replace>\n      <replace>BLACK</replace>\n      <replace>,</replace>\n      <replace>11</replace>\n      <replace>54</replace>\n      <replace>4</replace>\n      <replace>5</replace>\n      <replace>PieceMoveSliding.singleRookTable(board,</replace>\n      <replace>PieceMoveSliding.singleBishopTable</replace>\n      <replace>Square</replace>\n      <replace>Square.toBitboard</replace>\n      <replace>move</replace>\n      <replace>ChessboardIntMoves</replace>\n      <replace>int</replace>\n      <replace>ZobristHashIntMove</replace>\n      <replace>ChessboardIntMove</replace>\n      <replace>MoveParser.</replace>\n      <replace>MoveParserIntMove.</replace>\n      <replace>MoveMakingUtilitiesIntMove</replace>\n      <replace>StackMoveDataIntMove</replace>\n      <replace>PerftIntMove</replace>\n      <replace>new ChessboardIntMove</replace>\n      <replace>Perft</replace>\n      <replace>enemy</replace>\n      <replace>Black</replace>\n      <replace>int[]</replace>\n      <replace>public</replace>\n      <replace>White</replace>\n    </replaceStrings>\n    <dirStrings>\n      <dir>$PROJECT_DIR$/src/main/miscAdmin</dir>\n      <dir>$PROJECT_DIR$/src/javacode/chessengine</dir>\n      <dir>$PROJECT_DIR$/src/javacode/evaluation</dir>\n      <dir>$PROJECT_DIR$/src/main/java</dir>\n      <dir>$PROJECT_DIR$/../ChessCore/src/test/java/programtests</dir>\n      <dir>$PROJECT_DIR$/src/main/java/javacode/chessengine</dir>\n      <dir>$PROJECT_DIR$/src/main/java/javacode</dir>\n      <dir>$PROJECT_DIR$/../ChessCore/src/main/java</dir>\n      <dir>$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram</dir>\n      <dir>$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god</dir>\n    </dirStrings>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"PREVIOUS_COMMIT_AUTHORS\">\n      <list>\n        <option value=\"Louis &lt;louis.mackenziesmith@googlemail.com&gt;\" />\n      </list>\n    </option>\n    <option name=\"ROOT_SYNC\" value=\"DONT_SYNC\" />\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"HighlightingSettingsPerFile\">\n    <setting file=\"file://$PROJECT_DIR$/src/main/java/javacode/chessprogram/check/CheckChecker.java\" root0=\"SKIP_INSPECTION\" />\n  </component>\n  <component name=\"IdeDocumentHistory\">\n    <option name=\"CHANGED_PATHS\">\n      <list>\n        <option value=\"$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/CheckHelper.java\" />\n        <option value=\"$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/PinnedManager.java\" />\n        <option value=\"$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MoveUnmakerIntMove.java\" />\n        <option value=\"$PROJECT_DIR$/../ChessCore/src/test/java/RayPinnedTest.java\" />\n        <option value=\"$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/ZobristHashIntMove.java\" />\n        <option value=\"$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/ZobristHash.java\" />\n        <option value=\"$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/PieceMoveKing.java\" />\n        <option value=\"$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/PieceMovePawns.java\" />\n        <option value=\"$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/PieceMoveKnight.java\" />\n        <option value=\"$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MoveGeneratorPawns.java\" />\n        <option value=\"$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MoveGeneratorKnight.java\" />\n        <option value=\"$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MoveGeneratorKingLegal.java\" />\n        <option value=\"$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MoveGeneratorSliding.java\" />\n        <option value=\"$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MoveGeneratorPiece.java\" />\n        <option value=\"$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MoveGeneratorPseudo.java\" />\n        <option value=\"$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MoveGeneratorRegular.java\" />\n        <option value=\"$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MoveGeneratorPromotion.java\" />\n        <option value=\"$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MoveGeneratorEnPassant.java\" />\n        <option value=\"$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MoveGeneratorCastling.java\" />\n        <option value=\"$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MoveGeneratorSpecial.java\" />\n        <option value=\"$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MoveGeneratorCheck.java\" />\n        <option value=\"$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MoveGeneratorMaster.java\" />\n        <option value=\"$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MoveAdder.java\" />\n        <option value=\"$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MovePromotion.java\" />\n        <option value=\"$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MoveRegular.java\" />\n        <option value=\"$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MoveUnmaker.java\" />\n        <option value=\"$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MoveMakingEnPassant.java\" />\n        <option value=\"$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MakeMoveSpecial.java\" />\n        <option value=\"$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/PieceMoveSliding.java\" />\n        <option value=\"$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/PieceMove.java\" />\n        <option value=\"$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MakeMoveRegular.java\" />\n        <option value=\"$PROJECT_DIR$/../ChessCore/src/test/java/SquareTest.java\" />\n        <option value=\"$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/BitboardResources.java\" />\n        <option value=\"$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/Setup.java\" />\n        <option value=\"$PROJECT_DIR$/src/main/java/javacode/chessengine/main/UCIEntry.java\" />\n        <option value=\"$PROJECT_DIR$/../ChessCore/ChessCore.iml\" />\n        <option value=\"$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/Perft.java\" />\n        <option value=\"$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/Chessboard.java\" />\n        <option value=\"$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/IllegalUnmakeException.java\" />\n        <option value=\"$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/MoveUnmaker.java\" />\n        <option value=\"$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/MakeMoveAndHashUpdate.java\" />\n        <option value=\"$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/CopierToBeDeleted.java\" />\n        <option value=\"$PROJECT_DIR$/../ChessCore/src/test/java/NullMoveTest.java\" />\n        <option value=\"$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/MoveGeneratorSpecial.java\" />\n        <option value=\"$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/Perft.java\" />\n        <option value=\"$PROJECT_DIR$/../ChessCore/src/test/java/ChessboardHashTest.java\" />\n        <option value=\"$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/BitboardResources.java\" />\n        <option value=\"$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/Chessboard.java\" />\n        <option value=\"$PROJECT_DIR$/src/main/java/javacode/chessprogram/miscAdmin/Dummy.java\" />\n        <option value=\"$PROJECT_DIR$/../ChessCore/pom.xml\" />\n        <option value=\"$PROJECT_DIR$/pom.xml\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"JavaAutoRunManager\">\n    <enabled-run-configurations>\n      <run-configuration type=\"JUnit\" name=\"WACTests\" />\n    </enabled-run-configurations>\n  </component>\n  <component name=\"JsBuildToolGruntFileManager\" detection-done=\"true\" sorting=\"DEFINITION_ORDER\" />\n  <component name=\"JsBuildToolPackageJson\" detection-done=\"true\" sorting=\"DEFINITION_ORDER\" />\n  <component name=\"JsGulpfileManager\">\n    <detection-done>true</detection-done>\n    <sorting>DEFINITION_ORDER</sorting>\n  </component>\n  <component name=\"MavenImportPreferences\">\n    <option name=\"importingSettings\">\n      <MavenImportingSettings>\n        <option name=\"downloadDocsAutomatically\" value=\"true\" />\n        <option name=\"downloadSourcesAutomatically\" value=\"true\" />\n        <option name=\"importAutomatically\" value=\"true\" />\n      </MavenImportingSettings>\n    </option>\n  </component>\n  <component name=\"MavenProjectNavigator\">\n    <treeState>\n      <expand>\n        <path>\n          <item name=\"\" type=\"16c1761:MavenProjectsStructure$RootNode\" />\n          <item name=\"Axolotl\" type=\"9519ce18:MavenProjectsStructure$ProjectNode\" />\n        </path>\n      </expand>\n      <select />\n    </treeState>\n  </component>\n  <component name=\"ProjectFrameBounds\" extendedState=\"6\">\n    <option name=\"x\" value=\"-1\" />\n    <option name=\"width\" value=\"684\" />\n    <option name=\"height\" value=\"741\" />\n  </component>\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\n  </component>\n  <component name=\"ProjectView\">\n    <navigator proportions=\"\" version=\"1\">\n      <flattenPackages ProjectPane=\"false\" />\n      <hideEmptyPackages ProjectPane=\"true\" />\n      <foldersAlwaysOnTop value=\"true\" />\n    </navigator>\n    <panes>\n      <pane id=\"PackagesPane\" />\n      <pane id=\"Scope\" />\n      <pane id=\"ProjectPane\">\n        <subPane>\n          <expand>\n            <path>\n              <item name=\"Axolotl\" type=\"b2602c69:ProjectViewProjectNode\" />\n              <item name=\"Axolotl\" type=\"462c0819:PsiDirectoryNode\" />\n            </path>\n            <path>\n              <item name=\"Axolotl\" type=\"b2602c69:ProjectViewProjectNode\" />\n              <item name=\"Axolotl\" type=\"462c0819:PsiDirectoryNode\" />\n              <item name=\"src\" type=\"462c0819:PsiDirectoryNode\" />\n            </path>\n            <path>\n              <item name=\"Axolotl\" type=\"b2602c69:ProjectViewProjectNode\" />\n              <item name=\"Axolotl\" type=\"462c0819:PsiDirectoryNode\" />\n              <item name=\"src\" type=\"462c0819:PsiDirectoryNode\" />\n              <item name=\"main\" type=\"462c0819:PsiDirectoryNode\" />\n            </path>\n            <path>\n              <item name=\"Axolotl\" type=\"b2602c69:ProjectViewProjectNode\" />\n              <item name=\"Axolotl\" type=\"462c0819:PsiDirectoryNode\" />\n              <item name=\"src\" type=\"462c0819:PsiDirectoryNode\" />\n              <item name=\"main\" type=\"462c0819:PsiDirectoryNode\" />\n              <item name=\"java\" type=\"462c0819:PsiDirectoryNode\" />\n            </path>\n            <path>\n              <item name=\"Axolotl\" type=\"b2602c69:ProjectViewProjectNode\" />\n              <item name=\"Axolotl\" type=\"462c0819:PsiDirectoryNode\" />\n              <item name=\"src\" type=\"462c0819:PsiDirectoryNode\" />\n              <item name=\"main\" type=\"462c0819:PsiDirectoryNode\" />\n              <item name=\"java\" type=\"462c0819:PsiDirectoryNode\" />\n              <item name=\"javacode\" type=\"462c0819:PsiDirectoryNode\" />\n            </path>\n            <path>\n              <item name=\"Axolotl\" type=\"b2602c69:ProjectViewProjectNode\" />\n              <item name=\"Axolotl\" type=\"462c0819:PsiDirectoryNode\" />\n              <item name=\"src\" type=\"462c0819:PsiDirectoryNode\" />\n              <item name=\"main\" type=\"462c0819:PsiDirectoryNode\" />\n              <item name=\"java\" type=\"462c0819:PsiDirectoryNode\" />\n              <item name=\"javacode\" type=\"462c0819:PsiDirectoryNode\" />\n              <item name=\"chessengine\" type=\"462c0819:PsiDirectoryNode\" />\n            </path>\n            <path>\n              <item name=\"Axolotl\" type=\"b2602c69:ProjectViewProjectNode\" />\n              <item name=\"Axolotl\" type=\"462c0819:PsiDirectoryNode\" />\n              <item name=\"src\" type=\"462c0819:PsiDirectoryNode\" />\n              <item name=\"main\" type=\"462c0819:PsiDirectoryNode\" />\n              <item name=\"java\" type=\"462c0819:PsiDirectoryNode\" />\n              <item name=\"javacode\" type=\"462c0819:PsiDirectoryNode\" />\n              <item name=\"chessprogram\" type=\"462c0819:PsiDirectoryNode\" />\n            </path>\n            <path>\n              <item name=\"Axolotl\" type=\"b2602c69:ProjectViewProjectNode\" />\n              <item name=\"Axolotl\" type=\"462c0819:PsiDirectoryNode\" />\n              <item name=\"src\" type=\"462c0819:PsiDirectoryNode\" />\n              <item name=\"main\" type=\"462c0819:PsiDirectoryNode\" />\n              <item name=\"java\" type=\"462c0819:PsiDirectoryNode\" />\n              <item name=\"javacode\" type=\"462c0819:PsiDirectoryNode\" />\n              <item name=\"chessprogram\" type=\"462c0819:PsiDirectoryNode\" />\n              <item name=\"miscAdmin\" type=\"462c0819:PsiDirectoryNode\" />\n            </path>\n            <path>\n              <item name=\"Axolotl\" type=\"b2602c69:ProjectViewProjectNode\" />\n              <item name=\"ChessCore\" type=\"462c0819:PsiDirectoryNode\" />\n            </path>\n            <path>\n              <item name=\"Axolotl\" type=\"b2602c69:ProjectViewProjectNode\" />\n              <item name=\"ChessCore\" type=\"462c0819:PsiDirectoryNode\" />\n              <item name=\"src\" type=\"462c0819:PsiDirectoryNode\" />\n            </path>\n            <path>\n              <item name=\"Axolotl\" type=\"b2602c69:ProjectViewProjectNode\" />\n              <item name=\"ChessCore\" type=\"462c0819:PsiDirectoryNode\" />\n              <item name=\"src\" type=\"462c0819:PsiDirectoryNode\" />\n              <item name=\"main\" type=\"462c0819:PsiDirectoryNode\" />\n            </path>\n            <path>\n              <item name=\"Axolotl\" type=\"b2602c69:ProjectViewProjectNode\" />\n              <item name=\"ChessCore\" type=\"462c0819:PsiDirectoryNode\" />\n              <item name=\"src\" type=\"462c0819:PsiDirectoryNode\" />\n              <item name=\"main\" type=\"462c0819:PsiDirectoryNode\" />\n              <item name=\"java\" type=\"462c0819:PsiDirectoryNode\" />\n            </path>\n            <path>\n              <item name=\"Axolotl\" type=\"b2602c69:ProjectViewProjectNode\" />\n              <item name=\"ChessCore\" type=\"462c0819:PsiDirectoryNode\" />\n              <item name=\"src\" type=\"462c0819:PsiDirectoryNode\" />\n              <item name=\"main\" type=\"462c0819:PsiDirectoryNode\" />\n              <item name=\"java\" type=\"462c0819:PsiDirectoryNode\" />\n              <item name=\"chesscore\" type=\"462c0819:PsiDirectoryNode\" />\n            </path>\n            <path>\n              <item name=\"Axolotl\" type=\"b2602c69:ProjectViewProjectNode\" />\n              <item name=\"ChessCore\" type=\"462c0819:PsiDirectoryNode\" />\n              <item name=\"src\" type=\"462c0819:PsiDirectoryNode\" />\n              <item name=\"test\" type=\"462c0819:PsiDirectoryNode\" />\n            </path>\n            <path>\n              <item name=\"Axolotl\" type=\"b2602c69:ProjectViewProjectNode\" />\n              <item name=\"ChessCore\" type=\"462c0819:PsiDirectoryNode\" />\n              <item name=\"src\" type=\"462c0819:PsiDirectoryNode\" />\n              <item name=\"test\" type=\"462c0819:PsiDirectoryNode\" />\n              <item name=\"java\" type=\"462c0819:PsiDirectoryNode\" />\n            </path>\n          </expand>\n          <select />\n        </subPane>\n      </pane>\n    </panes>\n  </component>\n  <component name=\"PropertiesComponent\">\n    <property name=\"SearchEverywhereHistoryKey\" value=\"movemaker&#9;FILE&#9;file:///home/louis/IdeaProjects/ChessCore/src/main/java/chessprogram/god/MoveMaker.java&#10;square&#9;FILE&#9;file:///home/louis/IdeaProjects/ChessCore/src/main/java/chessprogram/god/Square.java&#10;MoveGenerat&#9;FILE&#9;file:///home/louis/IdeaProjects/ChessCore/src/main/java/chessprogram/god/MoveGeneratorSliding.java\" />\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\n    <property name=\"aspect.path.notification.shown\" value=\"true\" />\n    <property name=\"com.android.tools.idea.instantapp.provision.ProvisionBeforeRunTaskProvider.myTimeStamp\" value=\"1543665020482\" />\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/../ChessCore\" />\n    <property name=\"project.structure.last.edited\" value=\"SDKs\" />\n    <property name=\"project.structure.proportion\" value=\"0.15\" />\n    <property name=\"project.structure.side.proportion\" value=\"0.2\" />\n    <property name=\"run.code.analysis.last.selected.profile\" value=\"pProject Default\" />\n    <property name=\"settings.editor.selected.configurable\" value=\"preferences.pluginManager\" />\n  </component>\n  <component name=\"RecentsManager\">\n    <key name=\"MoveMembersDialog.RECENTS_KEY\">\n      <recent name=\"chessprogram.god.BitOperations\" />\n      <recent name=\"chessprogram.magic.Magic\" />\n    </key>\n    <key name=\"MoveClassesOrPackagesDialog.RECENTS_KEY\">\n      <recent name=\"com.github.louism33.chesscore\" />\n      <recent name=\"chessprogram.god\" />\n      <recent name=\"\" />\n    </key>\n    <key name=\"MoveFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/magic\" />\n      <recent name=\"$PROJECT_DIR$/../ChessCore/src/main/resources\" />\n      <recent name=\"$PROJECT_DIR$/../ChessCore/src/test/java/programtests\" />\n      <recent name=\"$PROJECT_DIR$/../ChessCore/src/test\" />\n    </key>\n    <key name=\"CopyClassDialog.RECENTS_KEY\">\n      <recent name=\"chessprogram.god\" />\n      <recent name=\"chessprogram.zobrist\" />\n    </key>\n    <key name=\"CopyFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god\" />\n      <recent name=\"$PROJECT_DIR$/../ChessCore\" />\n      <recent name=\"$PROJECT_DIR$/../ChessCore/src/test/java\" />\n      <recent name=\"$PROJECT_DIR$/../ChessCore/src/main/java\" />\n      <recent name=\"$PROJECT_DIR$/src/main/resources\" />\n    </key>\n  </component>\n  <component name=\"RunDashboard\">\n    <option name=\"ruleStates\">\n      <list>\n        <RuleState>\n          <option name=\"name\" value=\"ConfigurationTypeDashboardGroupingRule\" />\n        </RuleState>\n        <RuleState>\n          <option name=\"name\" value=\"StatusDashboardGroupingRule\" />\n        </RuleState>\n      </list>\n    </option>\n  </component>\n  <component name=\"RunManager\" selected=\"Application.Dummy\">\n    <configuration name=\"Dummy\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"javacode.chessprogram.miscAdmin.Dummy\" />\n      <module name=\"Axolotl\" />\n      <extension name=\"coverage\">\n        <pattern>\n          <option name=\"PATTERN\" value=\"javacode.chessprogram.miscAdmin.*\" />\n          <option name=\"ENABLED\" value=\"true\" />\n        </pattern>\n      </extension>\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"All in ChessCore\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"ChessCore\" />\n      <option name=\"PACKAGE_NAME\" value=\"\" />\n      <option name=\"TEST_OBJECT\" value=\"package\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"PerftTest\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"ChessCore\" />\n      <option name=\"PACKAGE_NAME\" value=\"\" />\n      <option name=\"MAIN_CLASS_NAME\" value=\"PerftTest\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"PerftTestTinyDepths\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"ChessCore\" />\n      <option name=\"PACKAGE_NAME\" value=\"\" />\n      <option name=\"MAIN_CLASS_NAME\" value=\"PerftTestTinyDepths\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"SquareTest.toBitboard\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"ChessCore\" />\n      <option name=\"PACKAGE_NAME\" value=\"\" />\n      <option name=\"MAIN_CLASS_NAME\" value=\"SquareTest\" />\n      <option name=\"METHOD_NAME\" value=\"toBitboard\" />\n      <option name=\"TEST_OBJECT\" value=\"method\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"WACTests\" type=\"JUnit\" factoryName=\"JUnit\" nameIsGenerated=\"true\">\n      <module name=\"Axolotl\" />\n      <extension name=\"coverage\">\n        <pattern>\n          <option name=\"PATTERN\" value=\"tests.enginetests.*\" />\n          <option name=\"ENABLED\" value=\"true\" />\n        </pattern>\n      </extension>\n      <option name=\"PACKAGE_NAME\" value=\"tests.enginetests\" />\n      <option name=\"MAIN_CLASS_NAME\" value=\"\" />\n      <option name=\"METHOD_NAME\" value=\"\" />\n      <option name=\"TEST_OBJECT\" value=\"pattern\" />\n      <option name=\"PARAMETERS\" value=\"[70 Test: WAC.071]\" />\n      <patterns>\n        <pattern testClass=\"tests.enginetests.WACTests\" />\n      </patterns>\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <list>\n      <item itemvalue=\"JUnit.WACTests\" />\n      <item itemvalue=\"JUnit.PerftTest\" />\n      <item itemvalue=\"JUnit.All in ChessCore\" />\n      <item itemvalue=\"JUnit.SquareTest.toBitboard\" />\n      <item itemvalue=\"Application.Dummy\" />\n      <item itemvalue=\"JUnit.PerftTestTinyDepths\" />\n    </list>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Application.Dummy\" />\n        <item itemvalue=\"JUnit.PerftTest\" />\n        <item itemvalue=\"JUnit.All in ChessCore\" />\n        <item itemvalue=\"JUnit.PerftTestTinyDepths\" />\n        <item itemvalue=\"JUnit.SquareTest.toBitboard\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SvnConfiguration\">\n    <configuration />\n  </component>\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"8807346a-cf9d-4333-98e2-880bdb09ab35\" name=\"Default Changelist\" comment=\"\" />\n      <created>1537644337626</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1537644337626</updated>\n      <workItem from=\"1537644342143\" duration=\"386000\" />\n      <workItem from=\"1537647521305\" duration=\"4754000\" />\n      <workItem from=\"1537689515115\" duration=\"32960000\" />\n      <workItem from=\"1537766676151\" duration=\"3473000\" />\n      <workItem from=\"1537809218326\" duration=\"10767000\" />\n      <workItem from=\"1537854156177\" duration=\"3143000\" />\n      <workItem from=\"1537896369628\" duration=\"8700000\" />\n      <workItem from=\"1537941098055\" duration=\"3025000\" />\n      <workItem from=\"1537979634390\" duration=\"11829000\" />\n      <workItem from=\"1538026722210\" duration=\"1468000\" />\n      <workItem from=\"1538068109728\" duration=\"11024000\" />\n      <workItem from=\"1538113395213\" duration=\"3604000\" />\n      <workItem from=\"1538236106269\" duration=\"16980000\" />\n      <workItem from=\"1538295318916\" duration=\"35658000\" />\n      <workItem from=\"1538458500688\" duration=\"3919000\" />\n      <workItem from=\"1538501356005\" duration=\"9425000\" />\n      <workItem from=\"1538558756680\" duration=\"17000\" />\n      <workItem from=\"1538558885988\" duration=\"22130000\" />\n      <workItem from=\"1538673133207\" duration=\"12254000\" />\n      <workItem from=\"1538686019881\" duration=\"32000\" />\n      <workItem from=\"1538718136142\" duration=\"2610000\" />\n      <workItem from=\"1538762393520\" duration=\"1222000\" />\n      <workItem from=\"1538816984041\" duration=\"11309000\" />\n      <workItem from=\"1538896409934\" duration=\"31828000\" />\n      <workItem from=\"1539014295003\" duration=\"11384000\" />\n      <workItem from=\"1539099500671\" duration=\"15074000\" />\n      <workItem from=\"1539149785220\" duration=\"4002000\" />\n      <workItem from=\"1539189196956\" duration=\"16023000\" />\n      <workItem from=\"1539246224075\" duration=\"35125000\" />\n      <workItem from=\"1539329337602\" duration=\"39827000\" />\n      <workItem from=\"1539418005163\" duration=\"35246000\" />\n      <workItem from=\"1539511001343\" duration=\"7454000\" />\n      <workItem from=\"1539519390785\" duration=\"211000\" />\n      <workItem from=\"1539519633568\" duration=\"407000\" />\n      <workItem from=\"1539520068764\" duration=\"14708000\" />\n      <workItem from=\"1539581134428\" duration=\"4703000\" />\n      <workItem from=\"1539625252141\" duration=\"9883000\" />\n      <workItem from=\"1539668258793\" duration=\"3016000\" />\n      <workItem from=\"1539711184961\" duration=\"10035000\" />\n      <workItem from=\"1539755168829\" duration=\"4385000\" />\n      <workItem from=\"1539795454171\" duration=\"12046000\" />\n      <workItem from=\"1539841349882\" duration=\"27254000\" />\n      <workItem from=\"1539931612327\" duration=\"7797000\" />\n      <workItem from=\"1539944547714\" duration=\"24877000\" />\n      <workItem from=\"1540021290628\" duration=\"363000\" />\n      <workItem from=\"1540021768857\" duration=\"43821000\" />\n      <workItem from=\"1540110606896\" duration=\"33260000\" />\n      <workItem from=\"1540186514281\" duration=\"4761000\" />\n      <workItem from=\"1540228227887\" duration=\"14161000\" />\n      <workItem from=\"1540273311084\" duration=\"3901000\" />\n      <workItem from=\"1540314356161\" duration=\"5840000\" />\n      <workItem from=\"1540359672963\" duration=\"5572000\" />\n      <workItem from=\"1540398250661\" duration=\"10712000\" />\n      <workItem from=\"1540446512984\" duration=\"23375000\" />\n      <workItem from=\"1540534853796\" duration=\"35415000\" />\n      <workItem from=\"1540631209810\" duration=\"29884000\" />\n      <workItem from=\"1540716314320\" duration=\"43119000\" />\n      <workItem from=\"1540800827375\" duration=\"22144000\" />\n      <workItem from=\"1540881183810\" duration=\"5805000\" />\n      <workItem from=\"1540972830137\" duration=\"12825000\" />\n      <workItem from=\"1541067281576\" duration=\"15085000\" />\n      <workItem from=\"1541149178400\" duration=\"9066000\" />\n      <workItem from=\"1541159027637\" duration=\"7596000\" />\n      <workItem from=\"1541238021126\" duration=\"17815000\" />\n      <workItem from=\"1541325674435\" duration=\"23106000\" />\n      <workItem from=\"1541404950818\" duration=\"8995000\" />\n      <workItem from=\"1541440889271\" duration=\"14616000\" />\n      <workItem from=\"1541485463359\" duration=\"4750000\" />\n      <workItem from=\"1541525916545\" duration=\"8927000\" />\n      <workItem from=\"1541576406849\" duration=\"26466000\" />\n      <workItem from=\"1541658948858\" duration=\"38698000\" />\n      <workItem from=\"1541749399446\" duration=\"25313000\" />\n      <workItem from=\"1541841275612\" duration=\"42793000\" />\n      <workItem from=\"1541929260055\" duration=\"23733000\" />\n      <workItem from=\"1542007869109\" duration=\"10638000\" />\n      <workItem from=\"1542132501030\" duration=\"381000\" />\n      <workItem from=\"1542133220105\" duration=\"1620000\" />\n      <workItem from=\"1542136515354\" duration=\"1947000\" />\n      <workItem from=\"1542140464849\" duration=\"3071000\" />\n      <workItem from=\"1542144054719\" duration=\"690000\" />\n      <workItem from=\"1542178563323\" duration=\"10540000\" />\n      <workItem from=\"1542217075621\" duration=\"610000\" />\n      <workItem from=\"1542218573746\" duration=\"12259000\" />\n      <workItem from=\"1542264635743\" duration=\"607000\" />\n      <workItem from=\"1542312268288\" duration=\"400000\" />\n      <workItem from=\"1542448371599\" duration=\"28132000\" />\n      <workItem from=\"1542534577523\" duration=\"10292000\" />\n      <workItem from=\"1542545367718\" duration=\"12179000\" />\n      <workItem from=\"1542612104809\" duration=\"2060000\" />\n      <workItem from=\"1542649304195\" duration=\"11801000\" />\n      <workItem from=\"1542696415733\" duration=\"3234000\" />\n      <workItem from=\"1542735436561\" duration=\"1248000\" />\n      <workItem from=\"1542736737596\" duration=\"8891000\" />\n      <workItem from=\"1542786509053\" duration=\"10531000\" />\n      <workItem from=\"1542822205306\" duration=\"2090000\" />\n      <workItem from=\"1542826856535\" duration=\"9448000\" />\n      <workItem from=\"1542882885600\" duration=\"19185000\" />\n      <workItem from=\"1542959310806\" duration=\"25232000\" />\n      <workItem from=\"1543049274204\" duration=\"2691000\" />\n      <workItem from=\"1543053113007\" duration=\"24936000\" />\n      <workItem from=\"1543136808063\" duration=\"16053000\" />\n      <workItem from=\"1543215135856\" duration=\"4920000\" />\n      <workItem from=\"1543254971088\" duration=\"11134000\" />\n      <workItem from=\"1543348519211\" duration=\"526000\" />\n      <workItem from=\"1543349155994\" duration=\"7124000\" />\n      <workItem from=\"1543388682230\" duration=\"11170000\" />\n      <workItem from=\"1543432501721\" duration=\"10389000\" />\n      <workItem from=\"1543483144386\" duration=\"22140000\" />\n      <workItem from=\"1543521581521\" duration=\"6449000\" />\n      <workItem from=\"1543563392049\" duration=\"37165000\" />\n      <workItem from=\"1543652596395\" duration=\"9500000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"moving packages\">\n      <created>1542576957823</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1542576957823</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"moving packages\">\n      <created>1542649782629</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1542649782629</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"moving packages\">\n      <created>1542649872253</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1542649872253</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"moving packages\">\n      <created>1542650202334</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1542650202334</updated>\n    </task>\n    <task id=\"LOCAL-00005\" summary=\"moving packages\">\n      <created>1542650362040</created>\n      <option name=\"number\" value=\"00005\" />\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1542650362040</updated>\n    </task>\n    <task id=\"LOCAL-00006\" summary=\"clean up!\">\n      <created>1542657381484</created>\n      <option name=\"number\" value=\"00006\" />\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1542657381484</updated>\n    </task>\n    <task id=\"LOCAL-00007\" summary=\"clean up!\">\n      <created>1543483796634</created>\n      <option name=\"number\" value=\"00007\" />\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1543483796637</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"8\" />\n    <servers />\n  </component>\n  <component name=\"TestHistory\">\n    <history-entry file=\"PerftTest - 2018.11.30 at 17h 55m 16s.xml\">\n      <configuration name=\"PerftTest\" configurationId=\"JUnit\" />\n    </history-entry>\n    <history-entry file=\"PerftTest - 2018.11.30 at 18h 08m 39s.xml\">\n      <configuration name=\"PerftTest\" configurationId=\"JUnit\" />\n    </history-entry>\n    <history-entry file=\"PerftTest - 2018.11.30 at 18h 12m 37s.xml\">\n      <configuration name=\"PerftTest\" configurationId=\"JUnit\" />\n    </history-entry>\n    <history-entry file=\"PerftTest - 2018.11.30 at 18h 20m 26s.xml\">\n      <configuration name=\"PerftTest\" configurationId=\"JUnit\" />\n    </history-entry>\n    <history-entry file=\"PerftTest - 2018.11.30 at 18h 25m 26s.xml\">\n      <configuration name=\"PerftTest\" configurationId=\"JUnit\" />\n    </history-entry>\n    <history-entry file=\"PerftTest - 2018.11.30 at 18h 43m 39s.xml\">\n      <configuration name=\"PerftTest\" configurationId=\"JUnit\" />\n    </history-entry>\n    <history-entry file=\"PerftTestTinyDepths - 2018.12.01 at 10h 18m 24s.xml\">\n      <configuration name=\"PerftTestTinyDepths\" configurationId=\"JUnit\" />\n    </history-entry>\n    <history-entry file=\"All_in_ChessCore - 2018.12.01 at 10h 18m 35s.xml\">\n      <configuration name=\"All in ChessCore\" configurationId=\"JUnit\" />\n    </history-entry>\n    <history-entry file=\"PerftTest - 2018.12.01 at 10h 18m 54s.xml\">\n      <configuration name=\"PerftTest\" configurationId=\"JUnit\" />\n    </history-entry>\n    <history-entry file=\"PerftTest - 2018.12.01 at 10h 32m 15s.xml\">\n      <configuration name=\"PerftTest\" configurationId=\"JUnit\" />\n    </history-entry>\n  </component>\n  <component name=\"TimeTrackingManager\">\n    <option name=\"totallyTimeSpent\" value=\"331630000\" />\n  </component>\n  <component name=\"TodoView\">\n    <todo-panel id=\"selected-file\">\n      <is-autoscroll-to-source value=\"true\" />\n    </todo-panel>\n    <todo-panel id=\"all\">\n      <are-packages-shown value=\"true\" />\n      <is-autoscroll-to-source value=\"true\" />\n    </todo-panel>\n  </component>\n  <component name=\"ToolWindowManager\">\n    <frame x=\"-1\" y=\"0\" width=\"1368\" height=\"741\" extended-state=\"6\" />\n    <editor active=\"true\" />\n    <layout>\n      <window_info active=\"true\" content_ui=\"combo\" id=\"Project\" order=\"0\" sideWeight=\"0.48322147\" visible=\"true\" weight=\"0.24621212\" />\n      <window_info id=\"Structure\" order=\"1\" sideWeight=\"0.5167785\" side_tool=\"true\" weight=\"0.1590909\" />\n      <window_info id=\"Designer\" order=\"2\" />\n      <window_info id=\"Image Layers\" order=\"3\" />\n      <window_info id=\"Capture Tool\" order=\"4\" />\n      <window_info id=\"UI Designer\" order=\"5\" />\n      <window_info id=\"Learn\" order=\"6\" weight=\"0.32954547\" />\n      <window_info id=\"Favorites\" order=\"7\" sideWeight=\"0.513347\" side_tool=\"true\" weight=\"0.15681818\" />\n      <window_info anchor=\"bottom\" id=\"Message\" order=\"0\" />\n      <window_info anchor=\"bottom\" id=\"Run\" order=\"1\" sideWeight=\"0.49545455\" visible=\"true\" weight=\"0.21682848\" />\n      <window_info anchor=\"bottom\" id=\"Debug\" order=\"2\" weight=\"0.4514563\" />\n      <window_info anchor=\"bottom\" id=\"Cvs\" order=\"3\" weight=\"0.25\" />\n      <window_info anchor=\"bottom\" id=\"Inspection\" order=\"4\" weight=\"0.4\" />\n      <window_info anchor=\"bottom\" id=\"TODO\" order=\"5\" weight=\"0.07605178\" />\n      <window_info anchor=\"bottom\" id=\"Terminal\" order=\"6\" weight=\"0.0\" />\n      <window_info anchor=\"bottom\" id=\"Version Control\" order=\"7\" weight=\"0.32847896\" />\n      <window_info anchor=\"bottom\" id=\"Database Changes\" order=\"8\" show_stripe_button=\"false\" />\n      <window_info anchor=\"bottom\" id=\"Event Log\" order=\"9\" sideWeight=\"0.50454545\" side_tool=\"true\" weight=\"0.28317153\" />\n      <window_info anchor=\"bottom\" id=\"Messages\" order=\"10\" weight=\"0.06957929\" />\n      <window_info anchor=\"bottom\" id=\"Statistic\" order=\"11\" weight=\"0.0\" />\n      <window_info anchor=\"bottom\" id=\"Inspection Results\" order=\"12\" weight=\"0.55016184\" />\n      <window_info anchor=\"bottom\" id=\"Find\" order=\"13\" weight=\"0.33656958\" />\n      <window_info anchor=\"right\" id=\"Commander\" internal_type=\"SLIDING\" order=\"0\" type=\"SLIDING\" weight=\"0.4\" />\n      <window_info anchor=\"right\" content_ui=\"combo\" id=\"Hierarchy\" order=\"1\" weight=\"0.25\" />\n      <window_info anchor=\"right\" id=\"Palette\" order=\"2\" />\n      <window_info anchor=\"right\" id=\"Capture Analysis\" order=\"3\" />\n      <window_info anchor=\"right\" id=\"Ant Build\" order=\"4\" weight=\"0.25\" />\n      <window_info anchor=\"right\" id=\"Theme Preview\" order=\"5\" />\n      <window_info anchor=\"right\" id=\"Palette&#9;\" order=\"6\" />\n      <window_info anchor=\"right\" id=\"Database\" order=\"7\" weight=\"0.32954547\" />\n      <window_info anchor=\"right\" id=\"Coverage\" order=\"8\" side_tool=\"true\" weight=\"0.17121212\" />\n      <window_info anchor=\"right\" id=\"Maven Projects\" order=\"9\" weight=\"0.3280303\" />\n    </layout>\n    <layout-to-restore>\n      <window_info active=\"true\" content_ui=\"combo\" id=\"Project\" order=\"0\" sideWeight=\"0.48322147\" visible=\"true\" weight=\"0.275\" />\n      <window_info id=\"Structure\" order=\"1\" sideWeight=\"0.5167785\" side_tool=\"true\" weight=\"0.1590909\" />\n      <window_info id=\"Designer\" order=\"2\" />\n      <window_info id=\"Image Layers\" order=\"3\" />\n      <window_info id=\"Capture Tool\" order=\"4\" />\n      <window_info id=\"UI Designer\" order=\"5\" />\n      <window_info id=\"Learn\" order=\"6\" weight=\"0.32954547\" />\n      <window_info id=\"Favorites\" order=\"7\" sideWeight=\"0.513347\" side_tool=\"true\" weight=\"0.15681818\" />\n      <window_info anchor=\"bottom\" id=\"Message\" order=\"0\" />\n      <window_info anchor=\"bottom\" id=\"Run\" order=\"1\" sideWeight=\"0.49545455\" visible=\"true\" weight=\"0.18608414\" />\n      <window_info anchor=\"bottom\" id=\"Debug\" order=\"2\" weight=\"0.4514563\" />\n      <window_info anchor=\"bottom\" id=\"Cvs\" order=\"3\" weight=\"0.25\" />\n      <window_info anchor=\"bottom\" id=\"Inspection\" order=\"4\" weight=\"0.4\" />\n      <window_info anchor=\"bottom\" id=\"TODO\" order=\"5\" weight=\"0.07605178\" />\n      <window_info anchor=\"bottom\" id=\"Terminal\" order=\"6\" weight=\"0.0\" />\n      <window_info anchor=\"bottom\" id=\"Version Control\" order=\"7\" weight=\"0.32847896\" />\n      <window_info anchor=\"bottom\" id=\"Database Changes\" order=\"8\" show_stripe_button=\"false\" />\n      <window_info anchor=\"bottom\" id=\"Event Log\" order=\"9\" sideWeight=\"0.50454545\" side_tool=\"true\" weight=\"0.28317153\" />\n      <window_info anchor=\"bottom\" id=\"Messages\" order=\"10\" weight=\"0.08576052\" />\n      <window_info anchor=\"bottom\" id=\"Statistic\" order=\"11\" weight=\"0.0\" />\n      <window_info anchor=\"bottom\" id=\"Inspection Results\" order=\"12\" weight=\"0.55016184\" />\n      <window_info anchor=\"bottom\" id=\"Find\" order=\"13\" weight=\"0.022653721\" />\n      <window_info anchor=\"right\" id=\"Commander\" internal_type=\"SLIDING\" order=\"0\" type=\"SLIDING\" weight=\"0.4\" />\n      <window_info anchor=\"right\" content_ui=\"combo\" id=\"Hierarchy\" order=\"1\" weight=\"0.25\" />\n      <window_info anchor=\"right\" id=\"Palette\" order=\"2\" />\n      <window_info anchor=\"right\" id=\"Capture Analysis\" order=\"3\" />\n      <window_info anchor=\"right\" id=\"Ant Build\" order=\"4\" weight=\"0.25\" />\n      <window_info anchor=\"right\" id=\"Theme Preview\" order=\"5\" />\n      <window_info anchor=\"right\" id=\"Palette&#9;\" order=\"6\" />\n      <window_info anchor=\"right\" id=\"Database\" order=\"7\" weight=\"0.32954547\" />\n      <window_info anchor=\"right\" id=\"Coverage\" order=\"8\" side_tool=\"true\" weight=\"0.17121212\" />\n      <window_info anchor=\"right\" id=\"Maven Projects\" order=\"9\" weight=\"0.3280303\" />\n    </layout-to-restore>\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"1\" />\n  </component>\n  <component name=\"VcsContentAnnotationSettings\">\n    <option name=\"myLimit\" value=\"2678400000\" />\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"moving packages\" />\n    <MESSAGE value=\"clean up!\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"clean up!\" />\n  </component>\n  <component name=\"debuggerHistoryManager\">\n    <expressions id=\"breakpointCondition\">\n      <expression>\n        <expression-string>pawns != pawnss</expression-string>\n        <language-id>JAVA</language-id>\n        <evaluation-mode>EXPRESSION</evaluation-mode>\n      </expression>\n      <expression>\n        <expression-string>move == 0</expression-string>\n        <language-id>JAVA</language-id>\n        <evaluation-mode>EXPRESSION</evaluation-mode>\n      </expression>\n    </expressions>\n    <expressions id=\"evaluateExpression\">\n      <expression>\n        <expression-string>new UCIPrinter(this.engine.getUciEntry(), this.engine)</expression-string>\n        <language-id>JAVA</language-id>\n        <evaluation-mode>EXPRESSION</evaluation-mode>\n      </expression>\n    </expressions>\n  </component>\n  <component name=\"editorHistoryManager\">\n    <entry file=\"file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/eMoveParserFromAN.java\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"-300\">\n          <caret line=\"5\" column=\"6\" selection-start-line=\"5\" selection-start-column=\"6\" selection-end-line=\"5\" selection-end-column=\"6\" />\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/MoveConstants.java\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"690\">\n          <caret line=\"46\" lean-forward=\"true\" selection-start-line=\"46\" selection-end-line=\"46\" />\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/MoveParser.java\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"-105\">\n          <caret line=\"30\" column=\"86\" lean-forward=\"true\" selection-start-line=\"30\" selection-start-column=\"86\" selection-end-line=\"30\" selection-end-column=\"86\" />\n          <folding>\n            <element signature=\"imports\" expanded=\"true\" />\n          </folding>\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/PieceMoveKing.java\" />\n    <entry file=\"file://$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/PieceMoveKnight.java\" />\n    <entry file=\"file://$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/PieceMovePawns.java\" />\n    <entry file=\"file://$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MoveGeneratorPawns.java\" />\n    <entry file=\"file://$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MoveGeneratorKnight.java\" />\n    <entry file=\"file://$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MoveGeneratorKingLegal.java\" />\n    <entry file=\"file://$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MoveGeneratorSliding.java\" />\n    <entry file=\"file://$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MoveGeneratorPromotion.java\" />\n    <entry file=\"file://$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MoveGeneratorEnPassant.java\" />\n    <entry file=\"file://$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MoveGeneratorCastling.java\" />\n    <entry file=\"file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/MoveGeneratorMaster.java\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"117\">\n          <caret line=\"118\" column=\"12\" selection-start-line=\"118\" selection-start-column=\"12\" selection-end-line=\"118\" selection-end-column=\"12\" />\n          <folding>\n            <element signature=\"imports\" expanded=\"true\" />\n          </folding>\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MovePromotion.java\" />\n    <entry file=\"file://$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MoveRegular.java\" />\n    <entry file=\"file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/MoveUtils.java\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"30\">\n          <caret line=\"2\" column=\"13\" selection-start-line=\"2\" selection-start-column=\"13\" selection-end-line=\"2\" selection-end-column=\"13\" />\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/MoveAdder.java\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"465\">\n          <caret line=\"31\" column=\"54\" selection-start-line=\"31\" selection-start-column=\"54\" selection-end-line=\"31\" selection-end-column=\"54\" />\n          <folding>\n            <element signature=\"imports\" expanded=\"true\" />\n          </folding>\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/MoveGeneratorCheck.java\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"135\">\n          <caret line=\"14\" column=\"143\" lean-forward=\"true\" selection-start-line=\"14\" selection-start-column=\"143\" selection-end-line=\"14\" selection-end-column=\"143\" />\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MoveMakingEnPassant.java\" />\n    <entry file=\"file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/MoveGeneratorPseudo.java\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"109\">\n          <caret line=\"12\" column=\"4\" selection-start-line=\"12\" selection-start-column=\"4\" selection-end-line=\"12\" selection-end-column=\"4\" />\n          <folding>\n            <element signature=\"imports\" expanded=\"true\" />\n          </folding>\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/MoveGeneratorRegular.java\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"233\">\n          <caret line=\"31\" column=\"52\" selection-start-line=\"31\" selection-start-column=\"52\" selection-end-line=\"31\" selection-end-column=\"52\" />\n          <folding>\n            <element signature=\"imports\" expanded=\"true\" />\n          </folding>\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/PinnedManager.java\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"345\">\n          <caret line=\"22\" column=\"33\" selection-start-line=\"22\" selection-start-column=\"33\" selection-end-line=\"22\" selection-end-column=\"33\" />\n          <folding>\n            <element signature=\"imports\" expanded=\"true\" />\n          </folding>\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/MakeMoveRegular.java\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"163\">\n          <caret line=\"37\" column=\"16\" selection-start-line=\"37\" selection-start-column=\"16\" selection-end-line=\"37\" selection-end-column=\"16\" />\n          <folding>\n            <element signature=\"imports\" expanded=\"true\" />\n          </folding>\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/StackMoveData.java\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"105\">\n          <caret line=\"11\" column=\"61\" selection-start-line=\"11\" selection-start-column=\"61\" selection-end-line=\"11\" selection-end-column=\"61\" />\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/Art.java\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"169\">\n          <caret line=\"13\" column=\"44\" selection-start-line=\"13\" selection-start-column=\"44\" selection-end-line=\"13\" selection-end-column=\"44\" />\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/../ChessCore/src/test/java/SquareTest.java\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"285\">\n          <caret line=\"87\" column=\"8\" selection-start-line=\"87\" selection-start-column=\"8\" selection-end-line=\"87\" selection-end-column=\"8\" />\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/MakeMoveSpecial.java\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"2043\">\n          <caret line=\"145\" selection-start-line=\"145\" selection-end-line=\"145\" />\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/PieceMove.java\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"135\">\n          <caret line=\"9\" column=\"17\" selection-start-line=\"9\" selection-start-column=\"17\" selection-end-line=\"9\" selection-end-column=\"17\" />\n          <folding>\n            <element signature=\"imports\" expanded=\"true\" />\n          </folding>\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/Setup.java\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"255\">\n          <caret line=\"19\" selection-start-line=\"19\" selection-end-line=\"19\" />\n          <folding>\n            <element signature=\"imports\" expanded=\"true\" />\n            <element signature=\"e#326#327#0\" expanded=\"true\" />\n            <element signature=\"e#349#350#0\" expanded=\"true\" />\n          </folding>\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"jar://$MAVEN_REPOSITORY$/com/fluxchess/jcpi/1.4.0/jcpi-1.4.0-sources.jar!/com/fluxchess/jcpi/AbstractEngine.java\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"135\">\n          <caret line=\"33\" column=\"22\" selection-start-line=\"33\" selection-start-column=\"22\" selection-end-line=\"33\" selection-end-column=\"22\" />\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/../ChessCore/ChessCore.iml\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"180\">\n          <caret line=\"12\" column=\"50\" selection-start-line=\"12\" selection-start-column=\"50\" selection-end-line=\"12\" selection-end-column=\"50\" />\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/ZobristHash.java\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"60\">\n          <caret line=\"367\" column=\"9\" selection-start-line=\"367\" selection-start-column=\"9\" selection-end-line=\"367\" selection-end-column=\"9\" />\n          <folding>\n            <element signature=\"e#12622#12623#0\" expanded=\"true\" />\n            <element signature=\"e#12664#12665#0\" expanded=\"true\" />\n          </folding>\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/IllegalUnmakeException.java\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"135\">\n          <caret line=\"9\" column=\"23\" selection-start-line=\"9\" selection-start-column=\"23\" selection-end-line=\"9\" selection-end-column=\"23\" />\n          <folding>\n            <element signature=\"e#189#190#0\" expanded=\"true\" />\n            <element signature=\"e#209#210#0\" expanded=\"true\" />\n          </folding>\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/MoveUnmaker.java\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"150\">\n          <caret line=\"16\" column=\"33\" lean-forward=\"true\" selection-start-line=\"16\" selection-start-column=\"33\" selection-end-line=\"16\" selection-end-column=\"33\" />\n          <folding>\n            <element signature=\"imports\" expanded=\"true\" />\n          </folding>\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/MakeMoveAndHashUpdate.java\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"421\">\n          <caret line=\"37\" column=\"19\" lean-forward=\"true\" selection-start-line=\"37\" selection-start-column=\"19\" selection-end-line=\"37\" selection-end-column=\"19\" />\n          <folding>\n            <element signature=\"imports\" expanded=\"true\" />\n          </folding>\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/../ChessCore/src/test/java/PerftTestTinyDepths.java\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"30\">\n          <caret line=\"5\" column=\"13\" selection-start-line=\"5\" selection-start-column=\"13\" selection-end-line=\"5\" selection-end-column=\"13\" />\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/CopierToBeDeleted.java\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"60\">\n          <caret line=\"4\" column=\"7\" selection-start-line=\"4\" selection-start-column=\"7\" selection-end-line=\"4\" selection-end-column=\"7\" />\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/../ChessCore/src/test/java/NullMoveTest.java\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"15\">\n          <caret line=\"1\" column=\"18\" selection-start-line=\"1\" selection-start-column=\"18\" selection-end-line=\"1\" selection-end-column=\"18\" />\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/MoveGeneratorSpecial.java\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"340\">\n          <caret line=\"141\" column=\"17\" lean-forward=\"true\" selection-start-line=\"141\" selection-start-column=\"17\" selection-end-line=\"141\" selection-end-column=\"17\" />\n          <folding>\n            <element signature=\"imports\" expanded=\"true\" />\n          </folding>\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/Perft.java\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"240\">\n          <caret line=\"31\" column=\"44\" selection-start-line=\"31\" selection-start-column=\"44\" selection-end-line=\"31\" selection-end-column=\"44\" />\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/../ChessCore/src/test/java/ChessboardHashTest.java\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"255\">\n          <caret line=\"123\" column=\"12\" selection-start-line=\"123\" selection-start-column=\"12\" selection-end-line=\"123\" selection-end-column=\"12\" />\n          <folding>\n            <element signature=\"imports\" expanded=\"true\" />\n          </folding>\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/BitOperations.java\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"69\">\n          <caret line=\"23\" column=\"46\" selection-start-line=\"23\" selection-start-column=\"46\" selection-end-line=\"23\" selection-end-column=\"46\" />\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/Chessboard.java\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"210\">\n          <caret line=\"14\" column=\"31\" lean-forward=\"true\" selection-start-line=\"14\" selection-start-column=\"31\" selection-end-line=\"14\" selection-end-column=\"31\" />\n          <folding>\n            <element signature=\"imports\" expanded=\"true\" />\n            <element signature=\"e#858#859#0\" expanded=\"true\" />\n            <element signature=\"e#890#891#0\" expanded=\"true\" />\n            <element signature=\"e#1296#1297#0\" expanded=\"true\" />\n            <element signature=\"e#1378#1379#0\" expanded=\"true\" />\n            <element signature=\"e#2067#2068#0\" expanded=\"true\" />\n            <element signature=\"e#2134#2135#0\" expanded=\"true\" />\n            <element signature=\"e#2939#2940#0\" expanded=\"true\" />\n            <element signature=\"e#2985#2986#0\" expanded=\"true\" />\n            <element signature=\"e#4670#4671#0\" expanded=\"true\" />\n            <element signature=\"e#4735#4736#0\" expanded=\"true\" />\n            <element signature=\"e#4800#4801#0\" expanded=\"true\" />\n            <element signature=\"e#4857#4858#0\" expanded=\"true\" />\n            <element signature=\"e#8496#8497#0\" expanded=\"true\" />\n            <element signature=\"e#8554#8555#0\" expanded=\"true\" />\n            <element signature=\"e#8583#8584#0\" expanded=\"true\" />\n            <element signature=\"e#8639#8640#0\" expanded=\"true\" />\n            <element signature=\"e#9554#9555#0\" expanded=\"true\" />\n            <element signature=\"e#9606#9607#0\" expanded=\"true\" />\n            <element signature=\"e#9642#9643#0\" expanded=\"true\" />\n            <element signature=\"e#9687#9688#0\" expanded=\"true\" />\n            <element signature=\"e#9738#9739#0\" expanded=\"true\" />\n            <element signature=\"e#9788#9789#0\" expanded=\"true\" />\n            <element signature=\"e#10232#10233#0\" expanded=\"true\" />\n            <element signature=\"e#10300#10301#0\" expanded=\"true\" />\n            <element signature=\"e#10574#10575#0\" expanded=\"true\" />\n            <element signature=\"e#10625#10626#0\" expanded=\"true\" />\n            <element signature=\"e#10688#10689#0\" expanded=\"true\" />\n            <element signature=\"e#10750#10751#0\" expanded=\"true\" />\n            <element signature=\"e#10792#10793#0\" expanded=\"true\" />\n            <element signature=\"e#10838#10839#0\" expanded=\"true\" />\n            <element signature=\"e#10901#10902#0\" expanded=\"true\" />\n            <element signature=\"e#10963#10964#0\" expanded=\"true\" />\n            <element signature=\"e#11005#11006#0\" expanded=\"true\" />\n            <element signature=\"e#11051#11052#0\" expanded=\"true\" />\n            <element signature=\"e#11114#11115#0\" expanded=\"true\" />\n            <element signature=\"e#11176#11177#0\" expanded=\"true\" />\n            <element signature=\"e#11218#11219#0\" expanded=\"true\" />\n            <element signature=\"e#11264#11265#0\" expanded=\"true\" />\n            <element signature=\"e#11327#11328#0\" expanded=\"true\" />\n            <element signature=\"e#11389#11390#0\" expanded=\"true\" />\n            <element signature=\"e#11424#11425#0\" expanded=\"true\" />\n            <element signature=\"e#11470#11471#0\" expanded=\"true\" />\n            <element signature=\"e#11520#11521#0\" expanded=\"true\" />\n            <element signature=\"e#11572#11573#0\" expanded=\"true\" />\n            <element signature=\"e#11609#11610#0\" expanded=\"true\" />\n            <element signature=\"e#11657#11658#0\" expanded=\"true\" />\n            <element signature=\"e#11711#11712#0\" expanded=\"true\" />\n            <element signature=\"e#11767#11768#0\" expanded=\"true\" />\n            <element signature=\"e#11804#11805#0\" expanded=\"true\" />\n            <element signature=\"e#11852#11853#0\" expanded=\"true\" />\n            <element signature=\"e#11906#11907#0\" expanded=\"true\" />\n            <element signature=\"e#11962#11963#0\" expanded=\"true\" />\n            <element signature=\"e#11997#11998#0\" expanded=\"true\" />\n            <element signature=\"e#12043#12044#0\" expanded=\"true\" />\n            <element signature=\"e#12093#12094#0\" expanded=\"true\" />\n            <element signature=\"e#12145#12146#0\" expanded=\"true\" />\n            <element signature=\"e#12180#12181#0\" expanded=\"true\" />\n            <element signature=\"e#12226#12227#0\" expanded=\"true\" />\n            <element signature=\"e#12276#12277#0\" expanded=\"true\" />\n            <element signature=\"e#12328#12329#0\" expanded=\"true\" />\n            <element signature=\"e#12362#12363#0\" expanded=\"true\" />\n            <element signature=\"e#12407#12408#0\" expanded=\"true\" />\n            <element signature=\"e#12455#12456#0\" expanded=\"true\" />\n            <element signature=\"e#12505#12506#0\" expanded=\"true\" />\n            <element signature=\"e#12540#12541#0\" expanded=\"true\" />\n            <element signature=\"e#12586#12587#0\" expanded=\"true\" />\n            <element signature=\"e#12636#12637#0\" expanded=\"true\" />\n            <element signature=\"e#12688#12689#0\" expanded=\"true\" />\n            <element signature=\"e#12725#12726#0\" expanded=\"true\" />\n            <element signature=\"e#12773#12774#0\" expanded=\"true\" />\n            <element signature=\"e#12827#12828#0\" expanded=\"true\" />\n            <element signature=\"e#12883#12884#0\" expanded=\"true\" />\n            <element signature=\"e#12920#12921#0\" expanded=\"true\" />\n            <element signature=\"e#12968#12969#0\" expanded=\"true\" />\n            <element signature=\"e#13022#13023#0\" expanded=\"true\" />\n            <element signature=\"e#13078#13079#0\" expanded=\"true\" />\n            <element signature=\"e#13113#13114#0\" expanded=\"true\" />\n            <element signature=\"e#13159#13160#0\" expanded=\"true\" />\n            <element signature=\"e#13209#13210#0\" expanded=\"true\" />\n            <element signature=\"e#13261#13262#0\" expanded=\"true\" />\n            <element signature=\"e#13296#13297#0\" expanded=\"true\" />\n            <element signature=\"e#13342#13343#0\" expanded=\"true\" />\n            <element signature=\"e#13392#13393#0\" expanded=\"true\" />\n            <element signature=\"e#13444#13445#0\" expanded=\"true\" />\n            <element signature=\"e#13478#13479#0\" expanded=\"true\" />\n            <element signature=\"e#13523#13524#0\" expanded=\"true\" />\n            <element signature=\"e#13571#13572#0\" expanded=\"true\" />\n            <element signature=\"e#13621#13622#0\" expanded=\"true\" />\n            <element signature=\"e#23100#23101#0\" expanded=\"true\" />\n            <element signature=\"e#23130#23131#0\" expanded=\"true\" />\n            <element signature=\"e#23187#23188#0\" expanded=\"true\" />\n            <element signature=\"e#23225#23226#0\" expanded=\"true\" />\n            <element signature=\"e#23268#23269#0\" expanded=\"true\" />\n            <element signature=\"e#23302#23303#0\" expanded=\"true\" />\n            <element signature=\"e#23361#23362#0\" expanded=\"true\" />\n            <element signature=\"e#23407#23408#0\" expanded=\"true\" />\n            <element signature=\"e#23457#23458#0\" expanded=\"true\" />\n            <element signature=\"e#23489#23490#0\" expanded=\"true\" />\n            <element signature=\"e#23553#23554#0\" expanded=\"true\" />\n            <element signature=\"e#23595#23596#0\" expanded=\"true\" />\n          </folding>\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/../ChessCore/src/test/java/PerftTest.java\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"84\">\n          <caret line=\"250\" column=\"28\" selection-start-line=\"250\" selection-start-column=\"28\" selection-end-line=\"250\" selection-end-column=\"28\" />\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/BitboardResources.java\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"60\">\n          <caret line=\"4\" column=\"49\" selection-start-line=\"4\" selection-start-column=\"49\" selection-end-line=\"4\" selection-end-column=\"49\" />\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/src/main/java/javacode/chessprogram/miscAdmin/ExtendedPositionDescriptionParser.java\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"60\">\n          <caret line=\"9\" column=\"13\" selection-start-line=\"9\" selection-start-column=\"13\" selection-end-line=\"9\" selection-end-column=\"13\" />\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/src/main/java/javacode/chessengine/main/UCIEntry.java\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"60\">\n          <caret line=\"15\" column=\"36\" selection-start-line=\"15\" selection-start-column=\"36\" selection-end-line=\"15\" selection-end-column=\"36\" />\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/../ChessCore/pom.xml\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"90\">\n          <caret line=\"6\" column=\"13\" selection-start-line=\"6\" selection-start-column=\"13\" selection-end-line=\"6\" selection-end-column=\"32\" />\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/pom.xml\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state>\n          <caret column=\"12\" selection-start-column=\"12\" selection-end-column=\"12\" />\n        </state>\n      </provider>\n    </entry>\n    <entry file=\"file://$PROJECT_DIR$/src/main/java/javacode/chessprogram/miscAdmin/Dummy.java\">\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\n        <state relative-caret-position=\"105\">\n          <caret line=\"9\" column=\"4\" lean-forward=\"true\" selection-start-line=\"9\" selection-start-column=\"4\" selection-end-line=\"9\" selection-end-column=\"4\" />\n        </state>\n      </provider>\n    </entry>\n  </component>\n  <component name=\"masterDetails\">\n    <states>\n      <state key=\"ArtifactsStructureConfigurable.UI\">\n        <settings>\n          <artifact-editor />\n          <last-edited>chesscore:jar</last-edited>\n          <splitter-proportions>\n            <option name=\"proportions\">\n              <list>\n                <option value=\"0.2\" />\n                <option value=\"0.5\" />\n              </list>\n            </option>\n          </splitter-proportions>\n        </settings>\n      </state>\n      <state key=\"FacetStructureConfigurable.UI\">\n        <settings>\n          <last-edited>No facets are configured</last-edited>\n          <splitter-proportions>\n            <option name=\"proportions\">\n              <list>\n                <option value=\"0.2\" />\n              </list>\n            </option>\n          </splitter-proportions>\n        </settings>\n      </state>\n      <state key=\"GlobalLibrariesConfigurable.UI\">\n        <settings>\n          <splitter-proportions>\n            <option name=\"proportions\">\n              <list>\n                <option value=\"0.2\" />\n              </list>\n            </option>\n          </splitter-proportions>\n        </settings>\n      </state>\n      <state key=\"JdkListConfigurable.UI\">\n        <settings>\n          <last-edited>11</last-edited>\n          <splitter-proportions>\n            <option name=\"proportions\">\n              <list>\n                <option value=\"0.2\" />\n              </list>\n            </option>\n          </splitter-proportions>\n        </settings>\n      </state>\n      <state key=\"ModuleStructureConfigurable.UI\">\n        <settings>\n          <last-edited>ChessCore</last-edited>\n          <splitter-proportions>\n            <option name=\"proportions\">\n              <list>\n                <option value=\"0.2\" />\n              </list>\n            </option>\n          </splitter-proportions>\n        </settings>\n      </state>\n      <state key=\"ProjectLibrariesConfigurable.UI\">\n        <settings>\n          <last-edited>Maven: chesscore:chesscore:1.0-SNAPSHOT</last-edited>\n          <splitter-proportions>\n            <option name=\"proportions\">\n              <list>\n                <option value=\"0.2\" />\n              </list>\n            </option>\n          </splitter-proportions>\n        </settings>\n      </state>\n    </states>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/workspace.xml	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ .idea/workspace.xml	(date 1543957995000)
@@ -11,21 +11,124 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="8807346a-cf9d-4333-98e2-880bdb09ab35" name="Default Changelist" comment="">
-      <change afterPath="$PROJECT_DIR$/.idea/artifacts/chesscore_jar.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/.idea/encodings.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/.idea/libraries/Maven__junit_junit_4_13_beta_1.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/javacode/chessprogram/miscAdmin/Dummy.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/Axolotl.iml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/Axolotl.iml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/libraries/Maven__junit_junit_4_12.xml" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/libraries/Maven__org_junit_jupiter_junit_jupiter_api_5_3_1.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/libraries/Maven__org_junit_jupiter_junit_jupiter_api_5_3_2.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/libraries/Maven__org_junit_platform_junit_platform_commons_1_3_1.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/libraries/Maven__org_junit_platform_junit_platform_commons_1_3_2.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/main/WACTests.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/compiler.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/compiler.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/pom.xml" beforeDir="false" afterPath="$PROJECT_DIR$/pom.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessengine/main/UCIEntry.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/javacode/chessengine/main/UCIEntry.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../ChessCore/pom.xml" beforeDir="false" afterPath="$PROJECT_DIR$/../ChessCore/pom.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../ChessCore/target/maven-archiver/pom.properties" beforeDir="false" afterPath="$PROJECT_DIR$/../ChessCore/target/maven-archiver/pom.properties" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../ChessCore/target/maven-status/maven-compiler-plugin/compile/default-compile/createdFiles.lst" beforeDir="false" afterPath="$PROJECT_DIR$/../ChessCore/target/maven-status/maven-compiler-plugin/compile/default-compile/createdFiles.lst" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../ChessCore/target/maven-status/maven-compiler-plugin/compile/default-compile/inputFiles.lst" beforeDir="false" afterPath="$PROJECT_DIR$/../ChessCore/target/maven-status/maven-compiler-plugin/compile/default-compile/inputFiles.lst" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/META-INF/MANIFEST.MF" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessengine/evaluation/Bishop.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/evaluation/Bishop.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessengine/evaluation/EvaluationConstants.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/evaluation/EvaluationConstants.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessengine/evaluation/Evaluator.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/evaluation/Evaluator.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessengine/evaluation/EvaluatorPositionConstant.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/evaluation/EvaluatorPositionConstant.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessengine/evaluation/King.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/evaluation/King.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessengine/evaluation/Knight.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/evaluation/Knight.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessengine/evaluation/MaterialEval.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/evaluation/MaterialEval.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessengine/evaluation/Misc.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/evaluation/Misc.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessengine/evaluation/Pawns.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/evaluation/Pawns.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessengine/evaluation/PositionEval.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/evaluation/PositionEval.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessengine/evaluation/Queen.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/evaluation/Queen.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessengine/evaluation/Rook.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/evaluation/Rook.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessengine/main/StandAlone.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/main/StandAlone.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessengine/main/UCIEntry.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/main/UCIEntry.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessengine/moveordering/HistoryMoves.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/moveordering/HistoryMoves.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessengine/moveordering/KillerMoves.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/moveordering/KillerMoves.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessengine/moveordering/MoveOrderer.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/moveordering/MoveOrderer.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessengine/moveordering/MoveOrderingConstants.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/moveordering/MoveOrderingConstants.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessengine/protocolhelperclasses/PVLine.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/protocolhelperclasses/PVLine.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessengine/protocolhelperclasses/UCIBoardParser.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/main/UCIBoardParser.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessengine/protocolhelperclasses/UCIPrinter.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/protocolhelperclasses/UCIPrinter.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessengine/search/AspirationSearch.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/search/AspirationSearch.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessengine/search/Engine.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/search/Engine.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessengine/search/EngineSpecifications.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/search/EngineSpecifications.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessengine/search/Extensions.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/search/Extensions.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessengine/search/FutilityPruning.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/search/FutilityPruning.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessengine/search/InternalIterativeDeepening.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/search/InternalIterativeDeepening.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessengine/search/IterativeDeepeningDFS.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/search/IterativeDeepeningDFS.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessengine/search/LateMoveReductions.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/search/LateMoveReductions.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessengine/search/NullMovePruning.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/search/NullMovePruning.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessengine/search/PrincipleVariationSearch.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/search/PrincipleVariationSearch.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessengine/search/QuiescenceSearch.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/search/QuiescenceSearch.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessengine/search/QuiescentSearchUtils.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/search/QuiescentSearchUtils.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessengine/search/Razoring.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/search/Razoring.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessengine/search/SEEPruning.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/search/SEEPruning.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessengine/timemanagement/TimeAllocator.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/timemanagement/TimeAllocator.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessengine/transpositiontable/EngineMovesAndHash.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessengine/transpositiontable/TranspositionTable.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/transpositiontable/TranspositionTable.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessengine/transpositiontable/ZobristHash.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessengine/utilities/Statistics.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/utilities/Statistics.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessprogram/bitboards/BitBoards.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessprogram/bitboards/King.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessprogram/bitboards/Knight.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessprogram/bitboards/PawnCaptures.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessprogram/bitboards/RandomBoard.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessprogram/check/CheckChecker.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessprogram/check/CheckMoveOrganiser.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessprogram/check/CheckUtilities.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessprogram/check/KingLegalMoves.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessprogram/chess/BitExtractor.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessprogram/chess/BitIndexing.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessprogram/chess/BitManipulations.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessprogram/chess/Chessboard.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessprogram/chess/Copier.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessprogram/chess/Move.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessprogram/graphicsandui/Art.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessprogram/miscAdmin/BlankBoard.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessprogram/miscAdmin/DetailedPerftSearching.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessprogram/miscAdmin/ExtendedPositionDescriptionParser.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessprogram/miscAdmin/FenParser.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessprogram/miscAdmin/MoveParserFromAN.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessprogram/miscAdmin/MovePrettifier.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessprogram/moveGeneration/MoveGenerationUtilities.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessprogram/moveGeneration/MoveGeneratorCastling.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessprogram/moveGeneration/MoveGeneratorEnPassant.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessprogram/moveGeneration/MoveGeneratorKnight.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessprogram/moveGeneration/MoveGeneratorMaster.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessprogram/moveGeneration/MoveGeneratorPawns.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessprogram/moveGeneration/MoveGeneratorPromotion.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessprogram/moveGeneration/MoveGeneratorPseudo.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessprogram/moveGeneration/MoveGeneratorSliding.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessprogram/moveGeneration/PieceMoveKing.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessprogram/moveGeneration/PieceMoveKnight.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessprogram/moveGeneration/PieceMovePawns.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessprogram/moveGeneration/PieceMoveSliding.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessprogram/moveGeneration/PinnedManager.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessprogram/moveMaking/MoveCastling.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessprogram/moveMaking/MoveEnPassant.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessprogram/moveMaking/MoveMakingUtilities.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessprogram/moveMaking/MoveOrganiser.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessprogram/moveMaking/MoveParser.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessprogram/moveMaking/MovePromotion.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessprogram/moveMaking/MoveRegular.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessprogram/moveMaking/MoveUnmaker.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/javacode/chessprogram/moveMaking/StackMoveData.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/tests/enginetests/Arasan20.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/tests/enginetests/Arasan20.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/tests/enginetests/ArasanTestSuite.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/tests/enginetests/ArasanTestSuite.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/tests/enginetests/BS2830Test.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/tests/enginetests/BS2830Test.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/tests/enginetests/BT2630.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/tests/enginetests/BT2630.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/tests/enginetests/BratkoKopecTest.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/tests/enginetests/BratkoKopecTest.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/tests/enginetests/CCROneHourTest.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/tests/enginetests/CCROneHourTest.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/tests/enginetests/EET.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/tests/enginetests/EET.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/tests/enginetests/EngineTestMateInFive.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/tests/enginetests/EngineTestMateInFive.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/tests/enginetests/EngineTestMateInFour.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/tests/enginetests/EngineTestMateInFour.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/tests/enginetests/EngineTestMateInSix.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/tests/enginetests/EngineTestMateInSix.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/tests/enginetests/EngineTestMateInThree.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/tests/enginetests/EngineTestMateInThree.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/tests/enginetests/EngineTestMateInTwo.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/tests/enginetests/EngineTestMateInTwo.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/tests/enginetests/EngineTestMisc.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/tests/enginetests/EngineTestMisc.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/tests/enginetests/KaufmanTests.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/tests/enginetests/KaufmanTests.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/tests/enginetests/LapuceII.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/tests/enginetests/LapuceII.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/tests/enginetests/Pet.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/tests/enginetests/Pet.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/tests/enginetests/QuickTest.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/tests/enginetests/QuickTest.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/tests/enginetests/WACTests.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/tests/enginetests/WACTests.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/tests/enginetests/WacTwoBreakdown.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/tests/enginetests/WacTwoBreakdown.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/tests/enginetests/ZugzwangPositions.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/tests/enginetests/ZugzwangPositions.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/tests/programtests/CheckCheckerTest.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/tests/programtests/ChessboardTest.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/tests/programtests/DetailedPerftSearchingTestSuite.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/tests/programtests/MoveUnmakerTest.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/tests/programtests/PerftSuiteTwo.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/tests/programtests/ZobristHashTest.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/resources/META-INF/MANIFEST.MF" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/META-INF/MANIFEST.MF" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/META-INF/MANIFEST.MF" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/META-INF/MANIFEST.MF" afterDir="false" />
     </list>
     <ignored path="$PROJECT_DIR$/.idea/shelf/" />
     <ignored path="$PROJECT_DIR$/out/" />
@@ -38,9 +141,11 @@
     <option name="LAST_RESOLUTION" value="IGNORE" />
   </component>
   <component name="CoverageDataManager">
+    <SUITE FILE_PATH="coverage/Axolotl$PerftTest_regularBoard.ic" NAME="PerftTest.regularBoard Coverage Results" MODIFIED="1543860235441" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="idea" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
     <SUITE FILE_PATH="coverage/chessPlusPlus$Perft.ic" NAME="Perft Coverage Results" MODIFIED="1539107516940" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="idea" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false">
       <FILTER>chess.*</FILTER>
     </SUITE>
+    <SUITE FILE_PATH="coverage/Axolotl$All_in_ChessCore.ic" NAME="All in ChessCore Coverage Results" MODIFIED="1543860289474" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="idea" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
     <SUITE FILE_PATH="coverage/chessPlusPlus$MoveUnmakerTest_unMakeMoveMaster.ic" NAME="MoveUnmakerTest.unMakeMoveMaster Coverage Results" MODIFIED="1539250031897" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="idea" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false">
       <FILTER>tests.*</FILTER>
     </SUITE>
@@ -50,6 +155,9 @@
     <SUITE FILE_PATH="coverage/chessPlusPlus$Main__2_.ic" NAME="Main (2) Coverage Results" MODIFIED="1539720297125" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="idea" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false">
       <FILTER>javacode.main.*</FILTER>
     </SUITE>
+  </component>
+  <component name="CoverageViewManager">
+    <option name="myElementSize" value="83" />
   </component>
   <component name="ErrorTreeViewConfiguration">
     <option name="autoscrollToSource" value="true" />
@@ -60,36 +168,36 @@
     <session id="-975693011">
       <usages-collector id="statistics.lifecycle.project">
         <counts>
-          <entry key="project.closed" value="27" />
+          <entry key="project.closed" value="32" />
           <entry key="project.open.time.14" value="2" />
           <entry key="project.open.time.15" value="2" />
           <entry key="project.open.time.16" value="2" />
-          <entry key="project.open.time.17" value="2" />
+          <entry key="project.open.time.17" value="3" />
           <entry key="project.open.time.18" value="2" />
-          <entry key="project.open.time.19" value="4" />
+          <entry key="project.open.time.19" value="7" />
           <entry key="project.open.time.20" value="5" />
           <entry key="project.open.time.21" value="1" />
-          <entry key="project.open.time.24" value="3" />
+          <entry key="project.open.time.24" value="4" />
           <entry key="project.open.time.28" value="1" />
           <entry key="project.open.time.36" value="1" />
           <entry key="project.open.time.38" value="1" />
           <entry key="project.open.time.53" value="1" />
-          <entry key="project.opened" value="27" />
+          <entry key="project.opened" value="32" />
         </counts>
       </usages-collector>
       <usages-collector id="statistics.file.extensions.open">
         <counts>
-          <entry key="LICENSE" value="1" />
+          <entry key="LICENSE" value="2" />
           <entry key="RookMagics" value="1" />
           <entry key="RookVariations" value="2" />
           <entry key="gitignore" value="5" />
           <entry key="iml" value="4" />
-          <entry key="java" value="1457" />
+          <entry key="java" value="1905" />
           <entry key="jpg" value="1" />
           <entry key="jtxt" value="1" />
           <entry key="md" value="1" />
           <entry key="txt" value="20" />
-          <entry key="xml" value="16" />
+          <entry key="xml" value="20" />
           <entry key="yml" value="4" />
         </counts>
       </usages-collector>
@@ -97,27 +205,27 @@
         <counts>
           <entry key="IDEA_MODULE" value="4" />
           <entry key="Image" value="1" />
-          <entry key="JAVA" value="1457" />
+          <entry key="JAVA" value="1905" />
           <entry key="Markdown" value="1" />
-          <entry key="PLAIN_TEXT" value="30" />
-          <entry key="XML" value="16" />
+          <entry key="PLAIN_TEXT" value="31" />
+          <entry key="XML" value="20" />
           <entry key="YAML" value="4" />
         </counts>
       </usages-collector>
       <usages-collector id="statistics.file.extensions.edit">
         <counts>
           <entry key="dummy" value="224" />
-          <entry key="java" value="57230" />
-          <entry key="txt" value="63" />
-          <entry key="xml" value="365" />
+          <entry key="java" value="72191" />
+          <entry key="txt" value="65" />
+          <entry key="xml" value="389" />
           <entry key="yml" value="4" />
         </counts>
       </usages-collector>
       <usages-collector id="statistics.file.types.edit">
         <counts>
-          <entry key="JAVA" value="57230" />
-          <entry key="PLAIN_TEXT" value="287" />
-          <entry key="XML" value="365" />
+          <entry key="JAVA" value="72191" />
+          <entry key="PLAIN_TEXT" value="289" />
+          <entry key="XML" value="389" />
           <entry key="YAML" value="4" />
         </counts>
       </usages-collector>
@@ -129,28 +237,189 @@
   <component name="FileEditorManager">
     <leaf SIDE_TABS_SIZE_LIMIT_KEY="300">
       <file pinned="false" current-in-tab="false">
-        <entry file="file://$PROJECT_DIR$/pom.xml">
+        <entry file="file://$PROJECT_DIR$/../ChessCore/src/test/java/ChessboardHashTest.java">
+          <provider selected="true" editor-type-id="text-editor">
+            <state relative-caret-position="88">
+              <caret line="16" selection-start-line="16" selection-end-line="16" />
+              <folding>
+                <element signature="imports" expanded="true" />
+              </folding>
+            </state>
+          </provider>
+        </entry>
+      </file>
+      <file pinned="false" current-in-tab="true">
+        <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/Chessboard.java">
           <provider selected="true" editor-type-id="text-editor">
-            <state>
-              <caret column="12" selection-start-column="12" selection-end-column="12" />
+            <state relative-caret-position="325">
+              <caret line="903" lean-forward="true" selection-start-line="903" selection-end-line="903" />
+              <folding>
+                <element signature="imports" expanded="true" />
+                <element signature="e#3375#3376#0" expanded="true" />
+                <element signature="e#3407#3408#0" expanded="true" />
+                <element signature="e#3721#3722#0" expanded="true" />
+                <element signature="e#3803#3804#0" expanded="true" />
+                <element signature="e#4530#4531#0" expanded="true" />
+                <element signature="e#4579#4580#0" expanded="true" />
+                <element signature="e#5647#5648#0" expanded="true" />
+                <element signature="e#5691#5692#0" expanded="true" />
+                <element signature="e#7174#7175#0" expanded="true" />
+                <element signature="e#7221#7222#0" expanded="true" />
+                <element signature="e#7382#7383#0" expanded="true" />
+                <element signature="e#7439#7440#0" expanded="true" />
+                <element signature="e#11840#11841#0" expanded="true" />
+                <element signature="e#11898#11899#0" expanded="true" />
+                <element signature="e#11923#11924#0" expanded="true" />
+                <element signature="e#11991#11992#0" expanded="true" />
+                <element signature="e#12540#12541#0" expanded="true" />
+                <element signature="e#12592#12593#0" expanded="true" />
+                <element signature="e#12628#12629#0" expanded="true" />
+                <element signature="e#12673#12674#0" expanded="true" />
+                <element signature="e#12724#12725#0" expanded="true" />
+                <element signature="e#12774#12775#0" expanded="true" />
+                <element signature="e#13870#13871#0" expanded="true" />
+                <element signature="e#13921#13922#0" expanded="true" />
+                <element signature="e#13984#13985#0" expanded="true" />
+                <element signature="e#14046#14047#0" expanded="true" />
+                <element signature="e#14088#14089#0" expanded="true" />
+                <element signature="e#14134#14135#0" expanded="true" />
+                <element signature="e#14197#14198#0" expanded="true" />
+                <element signature="e#14259#14260#0" expanded="true" />
+                <element signature="e#14301#14302#0" expanded="true" />
+                <element signature="e#14347#14348#0" expanded="true" />
+                <element signature="e#14410#14411#0" expanded="true" />
+                <element signature="e#14472#14473#0" expanded="true" />
+                <element signature="e#14514#14515#0" expanded="true" />
+                <element signature="e#14560#14561#0" expanded="true" />
+                <element signature="e#14623#14624#0" expanded="true" />
+                <element signature="e#14685#14686#0" expanded="true" />
+                <element signature="e#14720#14721#0" expanded="true" />
+                <element signature="e#14766#14767#0" expanded="true" />
+                <element signature="e#14816#14817#0" expanded="true" />
+                <element signature="e#14868#14869#0" expanded="true" />
+                <element signature="e#14905#14906#0" expanded="true" />
+                <element signature="e#14953#14954#0" expanded="true" />
+                <element signature="e#15007#15008#0" expanded="true" />
+                <element signature="e#15063#15064#0" expanded="true" />
+                <element signature="e#15100#15101#0" expanded="true" />
+                <element signature="e#15148#15149#0" expanded="true" />
+                <element signature="e#15202#15203#0" expanded="true" />
+                <element signature="e#15258#15259#0" expanded="true" />
+                <element signature="e#15293#15294#0" expanded="true" />
+                <element signature="e#15339#15340#0" expanded="true" />
+                <element signature="e#15389#15390#0" expanded="true" />
+                <element signature="e#15441#15442#0" expanded="true" />
+                <element signature="e#15476#15477#0" expanded="true" />
+                <element signature="e#15522#15523#0" expanded="true" />
+                <element signature="e#15572#15573#0" expanded="true" />
+                <element signature="e#15624#15625#0" expanded="true" />
+                <element signature="e#15658#15659#0" expanded="true" />
+                <element signature="e#15703#15704#0" expanded="true" />
+                <element signature="e#15751#15752#0" expanded="true" />
+                <element signature="e#15801#15802#0" expanded="true" />
+                <element signature="e#15836#15837#0" expanded="true" />
+                <element signature="e#15882#15883#0" expanded="true" />
+                <element signature="e#15932#15933#0" expanded="true" />
+                <element signature="e#15984#15985#0" expanded="true" />
+                <element signature="e#16021#16022#0" expanded="true" />
+                <element signature="e#16069#16070#0" expanded="true" />
+                <element signature="e#16123#16124#0" expanded="true" />
+                <element signature="e#16179#16180#0" expanded="true" />
+                <element signature="e#16216#16217#0" expanded="true" />
+                <element signature="e#16264#16265#0" expanded="true" />
+                <element signature="e#16318#16319#0" expanded="true" />
+                <element signature="e#16374#16375#0" expanded="true" />
+                <element signature="e#16409#16410#0" expanded="true" />
+                <element signature="e#16455#16456#0" expanded="true" />
+                <element signature="e#16505#16506#0" expanded="true" />
+                <element signature="e#16557#16558#0" expanded="true" />
+                <element signature="e#16592#16593#0" expanded="true" />
+                <element signature="e#16638#16639#0" expanded="true" />
+                <element signature="e#16688#16689#0" expanded="true" />
+                <element signature="e#16740#16741#0" expanded="true" />
+                <element signature="e#16774#16775#0" expanded="true" />
+                <element signature="e#16819#16820#0" expanded="true" />
+                <element signature="e#16867#16868#0" expanded="true" />
+                <element signature="e#16917#16918#0" expanded="true" />
+                <element signature="e#24866#24867#0" expanded="true" />
+                <element signature="e#24896#24897#0" expanded="true" />
+                <element signature="e#24953#24954#0" expanded="true" />
+                <element signature="e#24991#24992#0" expanded="true" />
+                <element signature="e#25025#25026#0" expanded="true" />
+                <element signature="e#25059#25060#0" expanded="true" />
+                <element signature="e#25091#25092#0" expanded="true" />
+                <element signature="e#25125#25126#0" expanded="true" />
+                <element signature="e#25175#25176#0" expanded="true" />
+                <element signature="e#25221#25222#0" expanded="true" />
+                <element signature="e#25265#25266#0" expanded="true" />
+                <element signature="e#25300#25301#0" expanded="true" />
+                <element signature="e#25361#25362#0" expanded="true" />
+                <element signature="e#25409#25410#0" expanded="true" />
+                <element signature="e#25445#25446#0" expanded="true" />
+                <element signature="e#25479#25480#0" expanded="true" />
+                <element signature="e#25531#25532#0" expanded="true" />
+                <element signature="e#25577#25578#0" expanded="true" />
+                <element signature="e#26563#26564#0" expanded="true" />
+                <element signature="e#26624#26625#0" expanded="true" />
+                <element signature="e#27111#27112#0" expanded="true" />
+                <element signature="e#27139#27140#0" expanded="true" />
+                <element signature="e#27178#27179#0" expanded="true" />
+                <element signature="e#27212#27213#0" expanded="true" />
+                <element signature="e#27248#27249#0" expanded="true" />
+                <element signature="e#27280#27281#0" expanded="true" />
+                <element signature="e#27330#27331#0" expanded="true" />
+                <element signature="e#27372#27373#0" expanded="true" />
+                <element signature="e#27410#27411#0" expanded="true" />
+                <element signature="e#27446#27447#0" expanded="true" />
+                <element signature="e#27502#27503#0" expanded="true" />
+                <element signature="e#27552#27553#0" expanded="true" />
+                <element signature="e#27596#27597#0" expanded="true" />
+                <element signature="e#27636#27637#0" expanded="true" />
+                <element signature="e#27702#27703#0" expanded="true" />
+                <element signature="e#27760#27761#0" expanded="true" />
+              </folding>
+            </state>
+          </provider>
+        </entry>
+      </file>
+      <file pinned="false" current-in-tab="false">
+        <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/MoveUnmaker.java">
+          <provider selected="true" editor-type-id="text-editor">
+            <state relative-caret-position="50">
+              <caret line="11" column="26" lean-forward="true" selection-start-line="11" selection-start-column="26" selection-end-line="11" selection-end-column="26" />
             </state>
           </provider>
         </entry>
       </file>
       <file pinned="false" current-in-tab="false">
-        <entry file="file://$PROJECT_DIR$/../ChessCore/pom.xml">
+        <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/MakeMoveAndHashUpdate.java">
           <provider selected="true" editor-type-id="text-editor">
-            <state relative-caret-position="90">
-              <caret line="6" column="13" selection-start-line="6" selection-start-column="13" selection-end-line="6" selection-end-column="32" />
+            <state relative-caret-position="148">
+              <caret line="48" column="31" lean-forward="true" selection-start-line="48" selection-start-column="31" selection-end-line="48" selection-end-column="31" />
+              <folding>
+                <element signature="imports" expanded="true" />
+              </folding>
             </state>
           </provider>
         </entry>
       </file>
-      <file pinned="false" current-in-tab="true">
-        <entry file="file://$PROJECT_DIR$/src/main/java/javacode/chessprogram/miscAdmin/Dummy.java">
+      <file pinned="false" current-in-tab="false">
+        <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/MoveUtils.java">
+          <provider selected="true" editor-type-id="text-editor">
+            <state relative-caret-position="30">
+              <caret line="2" column="6" selection-start-line="2" selection-start-column="6" selection-end-line="2" selection-end-column="6" />
+            </state>
+          </provider>
+        </entry>
+      </file>
+      <file pinned="false" current-in-tab="false">
+        <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/Perft.java">
           <provider selected="true" editor-type-id="text-editor">
-            <state relative-caret-position="105">
-              <caret line="9" column="4" lean-forward="true" selection-start-line="9" selection-start-column="4" selection-end-line="9" selection-end-column="4" />
+            <state relative-caret-position="205">
+              <caret line="68" column="44" lean-forward="true" selection-start-line="68" selection-start-column="44" selection-end-line="68" selection-end-column="44" />
+              <folding>
+                <element signature="imports" expanded="true" />
+              </folding>
             </state>
           </provider>
         </entry>
@@ -168,68 +437,68 @@
   </component>
   <component name="FindInProjectRecents">
     <findStrings>
-      <find>temp</find>
-      <find>println(board</find>
-      <find>movef</find>
-      <find>legal</find>
-      <find>Master</find>
-      <find>if .* &amp;</find>
-      <find>for (</find>
-      <find>8</find>
-      <find>FILES</find>
-      <find>for (lon</find>
-      <find>enemyPawnsInPosition</find>
-      <find>cal</find>
-      <find>makeRook</find>
-      <find>private</find>
-      <find>ca</find>
-      <find>enemy</find>
-      <find>enemyPaw</find>
-      <find>pawn</find>
-      <find>makeRegul</find>
-      <find>Black</find>
-      <find>global</find>
-      <find>git</find>
-      <find>proper</find>
-      <find>public class</find>
-      <find>whichpiecesare</find>
-      <find>ene</find>
-      <find>sonaty</find>
-      <find>setting</find>
-      <find>autore</find>
-      <find>url</find>
+      <find>index+</find>
+      <find>zobris</find>
+      <find>index-1</find>
+      <find>index++</find>
+      <find>index</find>
+      <find>push(</find>
+      <find>???</find>
+      <find>masterP</find>
+      <find>masterPu</find>
+      <find>ii</find>
+      <find>copy</find>
+      <find>epfö</find>
+      <find>equa</find>
+      <find>toStr</find>
+      <find>adden</find>
+      <find>zobristStackArrayPeek</find>
+      <find>final long</find>
+      <find>master</find>
+      <find>equal</find>
+      <find>equals</find>
+      <find>zobristStack.</find>
+      <find>zobristStack.p</find>
+      <find>zobristStack</find>
+      <find>zobristStack().push</find>
+      <find>masterpop</find>
+      <find>toString</find>
+      <find>epfl</find>
+      <find>epf</find>
+      <find>= index</find>
+      <find>epflag</find>
     </findStrings>
     <replaceStrings>
-      <replace>BitOperations.</replace>
-      <replace>BitOperations</replace>
-      <replace>verifyHashToDepth</replace>
-      <replace>BLACK</replace>
-      <replace>,</replace>
-      <replace>11</replace>
-      <replace>54</replace>
-      <replace>4</replace>
-      <replace>5</replace>
-      <replace>PieceMoveSliding.singleRookTable(board,</replace>
-      <replace>PieceMoveSliding.singleBishopTable</replace>
-      <replace>Square</replace>
-      <replace>Square.toBitboard</replace>
-      <replace>move</replace>
-      <replace>ChessboardIntMoves</replace>
-      <replace>int</replace>
-      <replace>ZobristHashIntMove</replace>
-      <replace>ChessboardIntMove</replace>
-      <replace>MoveParser.</replace>
-      <replace>MoveParserIntMove.</replace>
-      <replace>MoveMakingUtilitiesIntMove</replace>
-      <replace>StackMoveDataIntMove</replace>
-      <replace>PerftIntMove</replace>
-      <replace>new ChessboardIntMove</replace>
-      <replace>Perft</replace>
-      <replace>enemy</replace>
-      <replace>Black</replace>
-      <replace>int[]</replace>
       <replace>public</replace>
       <replace>White</replace>
+      <replace>getWhiteRooks()</replace>
+      <replace>getBlackPawns()</replace>
+      <replace>getAllPieces</replace>
+      <replace>getWhitePawns</replace>
+      <replace>allBlackPieces</replace>
+      <replace>blackPieces</replace>
+      <replace>whitePieces</replace>
+      <replace>allPieces</replace>
+      <replace>BitOperations</replace>
+      <replace>==</replace>
+      <replace>this</replace>
+      <replace>int</replace>
+      <replace>long</replace>
+      <replace>whiteKnights()</replace>
+      <replace>moveStackCool.pop()</replace>
+      <replace>BLACK</replace>
+      <replace>moveStackCool</replace>
+      <replace>board.moveStackCool.push(</replace>
+      <replace>this.moveStackCool.push(</replace>
+      <replace>Evaluator</replace>
+      <replace>QuiescenceSearch</replace>
+      <replace>E</replace>
+      <replace>Engine</replace>
+      <replace>StackData</replace>
+      <replace>StackDataParser</replace>
+      <replace>unMakeMoveAndFlipTurn(move)</replace>
+      <replace>zobristStack</replace>
+      <replace>zobrist</replace>
     </replaceStrings>
     <dirStrings>
       <dir>$PROJECT_DIR$/src/main/miscAdmin</dir>
@@ -239,9 +508,13 @@
       <dir>$PROJECT_DIR$/../ChessCore/src/test/java/programtests</dir>
       <dir>$PROJECT_DIR$/src/main/java/javacode/chessengine</dir>
       <dir>$PROJECT_DIR$/src/main/java/javacode</dir>
-      <dir>$PROJECT_DIR$/../ChessCore/src/main/java</dir>
       <dir>$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram</dir>
       <dir>$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god</dir>
+      <dir>$PROJECT_DIR$/../ChessCore</dir>
+      <dir>$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl</dir>
+      <dir>$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore</dir>
+      <dir>$PROJECT_DIR$/../ChessCore/src/main/java</dir>
+      <dir>$PROJECT_DIR$/../ChessCore/src/main</dir>
     </dirStrings>
   </component>
   <component name="Git.Settings">
@@ -251,65 +524,62 @@
       </list>
     </option>
     <option name="ROOT_SYNC" value="DONT_SYNC" />
-    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
-  </component>
-  <component name="HighlightingSettingsPerFile">
-    <setting file="file://$PROJECT_DIR$/src/main/java/javacode/chessprogram/check/CheckChecker.java" root0="SKIP_INSPECTION" />
+    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$/../ChessCore" />
   </component>
   <component name="IdeDocumentHistory">
     <option name="CHANGED_PATHS">
       <list>
-        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/CheckHelper.java" />
-        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/PinnedManager.java" />
-        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MoveUnmakerIntMove.java" />
-        <option value="$PROJECT_DIR$/../ChessCore/src/test/java/RayPinnedTest.java" />
-        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/ZobristHashIntMove.java" />
-        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/ZobristHash.java" />
-        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/PieceMoveKing.java" />
-        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/PieceMovePawns.java" />
-        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/PieceMoveKnight.java" />
-        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MoveGeneratorPawns.java" />
-        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MoveGeneratorKnight.java" />
-        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MoveGeneratorKingLegal.java" />
-        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MoveGeneratorSliding.java" />
-        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MoveGeneratorPiece.java" />
-        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MoveGeneratorPseudo.java" />
-        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MoveGeneratorRegular.java" />
-        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MoveGeneratorPromotion.java" />
-        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MoveGeneratorEnPassant.java" />
-        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MoveGeneratorCastling.java" />
-        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MoveGeneratorSpecial.java" />
-        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MoveGeneratorCheck.java" />
-        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MoveGeneratorMaster.java" />
-        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MoveAdder.java" />
-        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MovePromotion.java" />
-        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MoveRegular.java" />
-        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MoveUnmaker.java" />
-        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MoveMakingEnPassant.java" />
-        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MakeMoveSpecial.java" />
-        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/PieceMoveSliding.java" />
-        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/PieceMove.java" />
-        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MakeMoveRegular.java" />
-        <option value="$PROJECT_DIR$/../ChessCore/src/test/java/SquareTest.java" />
-        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/BitboardResources.java" />
-        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/Setup.java" />
-        <option value="$PROJECT_DIR$/src/main/java/javacode/chessengine/main/UCIEntry.java" />
-        <option value="$PROJECT_DIR$/../ChessCore/ChessCore.iml" />
-        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/Perft.java" />
-        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/Chessboard.java" />
-        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/IllegalUnmakeException.java" />
-        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/MoveUnmaker.java" />
-        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/MakeMoveAndHashUpdate.java" />
-        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/CopierToBeDeleted.java" />
+        <option value="$PROJECT_DIR$/../ChessCore/pom.xml" />
+        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/MoveGeneratorRegular.java" />
+        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/MoveAdder.java" />
+        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/Piece.java" />
+        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/StackMoveData.java" />
+        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/ZobristHash.java" />
+        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/MoveConstants.java" />
+        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/Square.java" />
+        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/Art.java" />
+        <option value="$PROJECT_DIR$/../ChessCore/src/test/java/MoveTest.java" />
+        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/ChessboardDetails.java" />
+        <option value="$PROJECT_DIR$/../ChessCore/src/test/java/PerftTest.java" />
+        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/PieceMove.java" />
+        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/MoveGeneratorMaster.java" />
+        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/MoveParser.java" />
+        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/PerftDivide.java" />
+        <option value="$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/evaluation/MaterialEval.java" />
+        <option value="$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/evaluation/Evaluator.java" />
+        <option value="$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/search/QuiescentSearchUtils.java" />
+        <option value="$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/moveordering/HistoryMoves.java" />
+        <option value="$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/search/Extensions.java" />
+        <option value="$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/timemanagement/TimeAllocator.java" />
+        <option value="$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/search/SEEPruning.java" />
+        <option value="$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/moveordering/MoveOrderer.java" />
+        <option value="$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/search/Razoring.java" />
+        <option value="$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/search/IterativeDeepeningDFS.java" />
+        <option value="$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/search/AspirationSearch.java" />
+        <option value="$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/utilities/Statistics.java" />
+        <option value="$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/search/Engine.java" />
+        <option value="$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/main/WACTests.java" />
+        <option value="$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/main/StandAlone.java" />
+        <option value="$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/protocolhelperclasses/UCIPrinter.java" />
+        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/StackDataCool.java" />
+        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/StackDataRes.java" />
+        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/ConstantsMoveStackData.java" />
+        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/StackDataParser.java" />
+        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/StackDataUtil.java" />
+        <option value="$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/protocolhelperclasses/PVLine.java" />
+        <option value="$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/search/PrincipleVariationSearch.java" />
+        <option value="$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/search/QuiescenceSearch.java" />
         <option value="$PROJECT_DIR$/../ChessCore/src/test/java/NullMoveTest.java" />
+        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/CheckHelper.java" />
+        <option value="$PROJECT_DIR$/../ChessCore/src/test/java/BoardStateTest.java" />
+        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/Perft.java" />
+        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/ZobristHashUtil.java" />
         <option value="$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/MoveGeneratorSpecial.java" />
-        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/Perft.java" />
         <option value="$PROJECT_DIR$/../ChessCore/src/test/java/ChessboardHashTest.java" />
-        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/BitboardResources.java" />
+        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/MakeMoveRegular.java" />
+        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/MakeMoveAndHashUpdate.java" />
+        <option value="$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/MoveUnmaker.java" />
         <option value="$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/Chessboard.java" />
-        <option value="$PROJECT_DIR$/src/main/java/javacode/chessprogram/miscAdmin/Dummy.java" />
-        <option value="$PROJECT_DIR$/../ChessCore/pom.xml" />
-        <option value="$PROJECT_DIR$/pom.xml" />
       </list>
     </option>
   </component>
@@ -346,7 +616,7 @@
   </component>
   <component name="ProjectFrameBounds" extendedState="6">
     <option name="x" value="-1" />
-    <option name="width" value="684" />
+    <option name="width" value="865" />
     <option name="height" value="741" />
   </component>
   <component name="ProjectLevelVcsManager" settingsEditedManually="true">
@@ -359,71 +629,12 @@
       <foldersAlwaysOnTop value="true" />
     </navigator>
     <panes>
-      <pane id="PackagesPane" />
       <pane id="Scope" />
       <pane id="ProjectPane">
         <subPane>
           <expand>
             <path>
               <item name="Axolotl" type="b2602c69:ProjectViewProjectNode" />
-              <item name="Axolotl" type="462c0819:PsiDirectoryNode" />
-            </path>
-            <path>
-              <item name="Axolotl" type="b2602c69:ProjectViewProjectNode" />
-              <item name="Axolotl" type="462c0819:PsiDirectoryNode" />
-              <item name="src" type="462c0819:PsiDirectoryNode" />
-            </path>
-            <path>
-              <item name="Axolotl" type="b2602c69:ProjectViewProjectNode" />
-              <item name="Axolotl" type="462c0819:PsiDirectoryNode" />
-              <item name="src" type="462c0819:PsiDirectoryNode" />
-              <item name="main" type="462c0819:PsiDirectoryNode" />
-            </path>
-            <path>
-              <item name="Axolotl" type="b2602c69:ProjectViewProjectNode" />
-              <item name="Axolotl" type="462c0819:PsiDirectoryNode" />
-              <item name="src" type="462c0819:PsiDirectoryNode" />
-              <item name="main" type="462c0819:PsiDirectoryNode" />
-              <item name="java" type="462c0819:PsiDirectoryNode" />
-            </path>
-            <path>
-              <item name="Axolotl" type="b2602c69:ProjectViewProjectNode" />
-              <item name="Axolotl" type="462c0819:PsiDirectoryNode" />
-              <item name="src" type="462c0819:PsiDirectoryNode" />
-              <item name="main" type="462c0819:PsiDirectoryNode" />
-              <item name="java" type="462c0819:PsiDirectoryNode" />
-              <item name="javacode" type="462c0819:PsiDirectoryNode" />
-            </path>
-            <path>
-              <item name="Axolotl" type="b2602c69:ProjectViewProjectNode" />
-              <item name="Axolotl" type="462c0819:PsiDirectoryNode" />
-              <item name="src" type="462c0819:PsiDirectoryNode" />
-              <item name="main" type="462c0819:PsiDirectoryNode" />
-              <item name="java" type="462c0819:PsiDirectoryNode" />
-              <item name="javacode" type="462c0819:PsiDirectoryNode" />
-              <item name="chessengine" type="462c0819:PsiDirectoryNode" />
-            </path>
-            <path>
-              <item name="Axolotl" type="b2602c69:ProjectViewProjectNode" />
-              <item name="Axolotl" type="462c0819:PsiDirectoryNode" />
-              <item name="src" type="462c0819:PsiDirectoryNode" />
-              <item name="main" type="462c0819:PsiDirectoryNode" />
-              <item name="java" type="462c0819:PsiDirectoryNode" />
-              <item name="javacode" type="462c0819:PsiDirectoryNode" />
-              <item name="chessprogram" type="462c0819:PsiDirectoryNode" />
-            </path>
-            <path>
-              <item name="Axolotl" type="b2602c69:ProjectViewProjectNode" />
-              <item name="Axolotl" type="462c0819:PsiDirectoryNode" />
-              <item name="src" type="462c0819:PsiDirectoryNode" />
-              <item name="main" type="462c0819:PsiDirectoryNode" />
-              <item name="java" type="462c0819:PsiDirectoryNode" />
-              <item name="javacode" type="462c0819:PsiDirectoryNode" />
-              <item name="chessprogram" type="462c0819:PsiDirectoryNode" />
-              <item name="miscAdmin" type="462c0819:PsiDirectoryNode" />
-            </path>
-            <path>
-              <item name="Axolotl" type="b2602c69:ProjectViewProjectNode" />
               <item name="ChessCore" type="462c0819:PsiDirectoryNode" />
             </path>
             <path>
@@ -469,26 +680,30 @@
           <select />
         </subPane>
       </pane>
+      <pane id="PackagesPane" />
     </panes>
   </component>
   <component name="PropertiesComponent">
     <property name="SearchEverywhereHistoryKey" value="movemaker&#9;FILE&#9;file:///home/louis/IdeaProjects/ChessCore/src/main/java/chessprogram/god/MoveMaker.java&#10;square&#9;FILE&#9;file:///home/louis/IdeaProjects/ChessCore/src/main/java/chessprogram/god/Square.java&#10;MoveGenerat&#9;FILE&#9;file:///home/louis/IdeaProjects/ChessCore/src/main/java/chessprogram/god/MoveGeneratorSliding.java" />
     <property name="WebServerToolWindowFactoryState" value="false" />
     <property name="aspect.path.notification.shown" value="true" />
-    <property name="com.android.tools.idea.instantapp.provision.ProvisionBeforeRunTaskProvider.myTimeStamp" value="1543665020482" />
-    <property name="last_opened_file_path" value="$PROJECT_DIR$/../ChessCore" />
-    <property name="project.structure.last.edited" value="SDKs" />
+    <property name="com.android.tools.idea.instantapp.provision.ProvisionBeforeRunTaskProvider.myTimeStamp" value="1543957896092" />
+    <property name="extract.method.default.visibility" value="private" />
+    <property name="last_opened_file_path" value="$PROJECT_DIR$/src/main/java/tests/enginetests" />
+    <property name="project.structure.last.edited" value="Modules" />
     <property name="project.structure.proportion" value="0.15" />
     <property name="project.structure.side.proportion" value="0.2" />
     <property name="run.code.analysis.last.selected.profile" value="pProject Default" />
-    <property name="settings.editor.selected.configurable" value="preferences.pluginManager" />
+    <property name="settings.editor.selected.configurable" value="reference.projectsettings.compiler.excludes" />
   </component>
   <component name="RecentsManager">
     <key name="MoveMembersDialog.RECENTS_KEY">
+      <recent name="com.github.louism33.chesscore.StackDataParser" />
       <recent name="chessprogram.god.BitOperations" />
       <recent name="chessprogram.magic.Magic" />
     </key>
     <key name="MoveClassesOrPackagesDialog.RECENTS_KEY">
+      <recent name="old" />
       <recent name="com.github.louism33.chesscore" />
       <recent name="chessprogram.god" />
       <recent name="" />
@@ -500,6 +715,9 @@
       <recent name="$PROJECT_DIR$/../ChessCore/src/test" />
     </key>
     <key name="CopyClassDialog.RECENTS_KEY">
+      <recent name="" />
+      <recent name="com.github.louism33.chesscore" />
+      <recent name="com.github.louism33.axolotl.main" />
       <recent name="chessprogram.god" />
       <recent name="chessprogram.zobrist" />
     </key>
@@ -523,20 +741,7 @@
       </list>
     </option>
   </component>
-  <component name="RunManager" selected="Application.Dummy">
-    <configuration name="Dummy" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
-      <option name="MAIN_CLASS_NAME" value="javacode.chessprogram.miscAdmin.Dummy" />
-      <module name="Axolotl" />
-      <extension name="coverage">
-        <pattern>
-          <option name="PATTERN" value="javacode.chessprogram.miscAdmin.*" />
-          <option name="ENABLED" value="true" />
-        </pattern>
-      </extension>
-      <method v="2">
-        <option name="Make" enabled="true" />
-      </method>
-    </configuration>
+  <component name="RunManager" selected="JUnit.ChessboardHashTest">
     <configuration name="All in ChessCore" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
       <module name="ChessCore" />
       <option name="PACKAGE_NAME" value="" />
@@ -545,27 +750,33 @@
         <option name="Make" enabled="true" />
       </method>
     </configuration>
-    <configuration name="PerftTest" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
+    <configuration name="ChessboardHashTest" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
       <module name="ChessCore" />
       <option name="PACKAGE_NAME" value="" />
-      <option name="MAIN_CLASS_NAME" value="PerftTest" />
+      <option name="MAIN_CLASS_NAME" value="ChessboardHashTest" />
       <method v="2">
         <option name="Make" enabled="true" />
       </method>
     </configuration>
-    <configuration name="PerftTestTinyDepths" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
+    <configuration name="ChessboardHashTest.regularBoard" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
       <module name="ChessCore" />
       <option name="PACKAGE_NAME" value="" />
-      <option name="MAIN_CLASS_NAME" value="PerftTestTinyDepths" />
+      <option name="MAIN_CLASS_NAME" value="ChessboardHashTest" />
+      <option name="METHOD_NAME" value="regularBoard" />
+      <option name="TEST_OBJECT" value="method" />
+      <uniqueIds>
+        <uniqueId value="[engine:junit-jupiter]/[class:ChessboardHashTest]" />
+        <uniqueId value="[engine:junit-jupiter]/[class:NullMoveTest]" />
+      </uniqueIds>
       <method v="2">
         <option name="Make" enabled="true" />
       </method>
     </configuration>
-    <configuration name="SquareTest.toBitboard" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
+    <configuration name="ChessboardHashTest.tinyDepths" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
       <module name="ChessCore" />
       <option name="PACKAGE_NAME" value="" />
-      <option name="MAIN_CLASS_NAME" value="SquareTest" />
-      <option name="METHOD_NAME" value="toBitboard" />
+      <option name="MAIN_CLASS_NAME" value="ChessboardHashTest" />
+      <option name="METHOD_NAME" value="tinyDepths" />
       <option name="TEST_OBJECT" value="method" />
       <method v="2">
         <option name="Make" enabled="true" />
@@ -591,21 +802,32 @@
         <option name="Make" enabled="true" />
       </method>
     </configuration>
+    <configuration name="[engine:junit-jupiter]/[class:PerftTestDetail]" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
+      <module name="ChessCore" />
+      <option name="PACKAGE_NAME" value="" />
+      <option name="TEST_OBJECT" value="uniqueId" />
+      <uniqueIds>
+        <uniqueId value="[engine:junit-jupiter]/[class:PerftTestDetail]" />
+      </uniqueIds>
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
     <list>
       <item itemvalue="JUnit.WACTests" />
-      <item itemvalue="JUnit.PerftTest" />
+      <item itemvalue="JUnit.ChessboardHashTest.regularBoard" />
+      <item itemvalue="JUnit.ChessboardHashTest.tinyDepths" />
+      <item itemvalue="JUnit.ChessboardHashTest" />
       <item itemvalue="JUnit.All in ChessCore" />
-      <item itemvalue="JUnit.SquareTest.toBitboard" />
-      <item itemvalue="Application.Dummy" />
-      <item itemvalue="JUnit.PerftTestTinyDepths" />
+      <item itemvalue="JUnit.[engine:junit-jupiter]/[class:PerftTestDetail]" />
     </list>
     <recent_temporary>
       <list>
-        <item itemvalue="Application.Dummy" />
-        <item itemvalue="JUnit.PerftTest" />
+        <item itemvalue="JUnit.ChessboardHashTest" />
+        <item itemvalue="JUnit.ChessboardHashTest.regularBoard" />
+        <item itemvalue="JUnit.[engine:junit-jupiter]/[class:PerftTestDetail]" />
         <item itemvalue="JUnit.All in ChessCore" />
-        <item itemvalue="JUnit.PerftTestTinyDepths" />
-        <item itemvalue="JUnit.SquareTest.toBitboard" />
+        <item itemvalue="JUnit.ChessboardHashTest.tinyDepths" />
       </list>
     </recent_temporary>
   </component>
@@ -729,7 +951,12 @@
       <workItem from="1543483144386" duration="22140000" />
       <workItem from="1543521581521" duration="6449000" />
       <workItem from="1543563392049" duration="37165000" />
-      <workItem from="1543652596395" duration="9500000" />
+      <workItem from="1543652596395" duration="56952000" />
+      <workItem from="1543824167643" duration="10069000" />
+      <workItem from="1543858268128" duration="13494000" />
+      <workItem from="1543904383345" duration="5082000" />
+      <workItem from="1543943293832" duration="5044000" />
+      <workItem from="1543948422769" duration="9564000" />
     </task>
     <task id="LOCAL-00001" summary="moving packages">
       <created>1542576957823</created>
@@ -780,43 +1007,50 @@
       <option name="project" value="LOCAL" />
       <updated>1543483796637</updated>
     </task>
-    <option name="localTasksCounter" value="8" />
+    <task id="LOCAL-00008" summary="clean up!">
+      <created>1543665028478</created>
+      <option name="number" value="00008" />
+      <option name="presentableId" value="LOCAL-00008" />
+      <option name="project" value="LOCAL" />
+      <updated>1543665028479</updated>
+    </task>
+    <option name="localTasksCounter" value="9" />
     <servers />
   </component>
   <component name="TestHistory">
-    <history-entry file="PerftTest - 2018.11.30 at 17h 55m 16s.xml">
-      <configuration name="PerftTest" configurationId="JUnit" />
+    <history-entry file="ChessboardHashTest_regularBoard - 2018.12.04 at 21h 59m 10s.xml">
+      <configuration name="ChessboardHashTest.regularBoard" configurationId="JUnit" />
     </history-entry>
-    <history-entry file="PerftTest - 2018.11.30 at 18h 08m 39s.xml">
-      <configuration name="PerftTest" configurationId="JUnit" />
+    <history-entry file="ChessboardHashTest_regularBoard - 2018.12.04 at 22h 00m 11s.xml">
+      <configuration name="ChessboardHashTest.regularBoard" configurationId="JUnit" />
     </history-entry>
-    <history-entry file="PerftTest - 2018.11.30 at 18h 12m 37s.xml">
-      <configuration name="PerftTest" configurationId="JUnit" />
+    <history-entry file="ChessboardHashTest_regularBoard - 2018.12.04 at 22h 01m 14s.xml">
+      <configuration name="ChessboardHashTest.regularBoard" configurationId="JUnit" />
     </history-entry>
-    <history-entry file="PerftTest - 2018.11.30 at 18h 20m 26s.xml">
-      <configuration name="PerftTest" configurationId="JUnit" />
+    <history-entry file="ChessboardHashTest_regularBoard - 2018.12.04 at 22h 01m 52s.xml">
+      <configuration name="ChessboardHashTest.regularBoard" configurationId="JUnit" />
     </history-entry>
-    <history-entry file="PerftTest - 2018.11.30 at 18h 25m 26s.xml">
-      <configuration name="PerftTest" configurationId="JUnit" />
+    <history-entry file="ChessboardHashTest - 2018.12.04 at 22h 03m 36s.xml">
+      <configuration name="ChessboardHashTest" configurationId="JUnit" />
     </history-entry>
-    <history-entry file="PerftTest - 2018.11.30 at 18h 43m 39s.xml">
-      <configuration name="PerftTest" configurationId="JUnit" />
+    <history-entry file="ChessboardHashTest - 2018.12.04 at 22h 04m 02s.xml">
+      <configuration name="ChessboardHashTest" configurationId="JUnit" />
     </history-entry>
-    <history-entry file="PerftTestTinyDepths - 2018.12.01 at 10h 18m 24s.xml">
-      <configuration name="PerftTestTinyDepths" configurationId="JUnit" />
+    <history-entry file="ChessboardHashTest - 2018.12.04 at 22h 06m 18s.xml">
+      <configuration name="ChessboardHashTest" configurationId="JUnit" />
     </history-entry>
-    <history-entry file="All_in_ChessCore - 2018.12.01 at 10h 18m 35s.xml">
-      <configuration name="All in ChessCore" configurationId="JUnit" />
+    <history-entry file="ChessboardHashTest - 2018.12.04 at 22h 06m 56s.xml">
+      <configuration name="ChessboardHashTest" configurationId="JUnit" />
     </history-entry>
-    <history-entry file="PerftTest - 2018.12.01 at 10h 18m 54s.xml">
-      <configuration name="PerftTest" configurationId="JUnit" />
+    <history-entry file="ChessboardHashTest - 2018.12.04 at 22h 07m 08s.xml">
+      <configuration name="ChessboardHashTest" configurationId="JUnit" />
     </history-entry>
-    <history-entry file="PerftTest - 2018.12.01 at 10h 32m 15s.xml">
-      <configuration name="PerftTest" configurationId="JUnit" />
+    <history-entry file="ChessboardHashTest - 2018.12.04 at 22h 10m 06s.xml">
+      <configuration name="ChessboardHashTest" configurationId="JUnit" />
     </history-entry>
   </component>
   <component name="TimeTrackingManager">
-    <option name="totallyTimeSpent" value="331630000" />
+    <option name="totallyTimeSpent" value="422335000" />
   </component>
   <component name="TodoView">
     <todo-panel id="selected-file">
@@ -831,7 +1065,7 @@
     <frame x="-1" y="0" width="1368" height="741" extended-state="6" />
     <editor active="true" />
     <layout>
-      <window_info active="true" content_ui="combo" id="Project" order="0" sideWeight="0.48322147" visible="true" weight="0.24621212" />
+      <window_info content_ui="combo" id="Project" order="0" sideWeight="0.48322147" visible="true" weight="0.24621212" />
       <window_info id="Structure" order="1" sideWeight="0.5167785" side_tool="true" weight="0.1590909" />
       <window_info id="Designer" order="2" />
       <window_info id="Image Layers" order="3" />
@@ -840,16 +1074,16 @@
       <window_info id="Learn" order="6" weight="0.32954547" />
       <window_info id="Favorites" order="7" sideWeight="0.513347" side_tool="true" weight="0.15681818" />
       <window_info anchor="bottom" id="Message" order="0" />
-      <window_info anchor="bottom" id="Run" order="1" sideWeight="0.49545455" visible="true" weight="0.21682848" />
-      <window_info anchor="bottom" id="Debug" order="2" weight="0.4514563" />
+      <window_info anchor="bottom" x="1" y="25" width="576" height="715" id="Run" order="1" sideWeight="0.49545455" weight="0.22330096" />
+      <window_info anchor="bottom" id="Debug" order="2" weight="0.5631068" />
       <window_info anchor="bottom" id="Cvs" order="3" weight="0.25" />
       <window_info anchor="bottom" id="Inspection" order="4" weight="0.4" />
       <window_info anchor="bottom" id="TODO" order="5" weight="0.07605178" />
-      <window_info anchor="bottom" id="Terminal" order="6" weight="0.0" />
-      <window_info anchor="bottom" id="Version Control" order="7" weight="0.32847896" />
+      <window_info anchor="bottom" id="Terminal" order="6" weight="0.32847896" />
+      <window_info active="true" anchor="bottom" id="Version Control" order="7" visible="true" weight="0.12135922" />
       <window_info anchor="bottom" id="Database Changes" order="8" show_stripe_button="false" />
       <window_info anchor="bottom" id="Event Log" order="9" sideWeight="0.50454545" side_tool="true" weight="0.28317153" />
-      <window_info anchor="bottom" id="Messages" order="10" weight="0.06957929" />
+      <window_info anchor="bottom" id="Messages" order="10" weight="0.32847896" />
       <window_info anchor="bottom" id="Statistic" order="11" weight="0.0" />
       <window_info anchor="bottom" id="Inspection Results" order="12" weight="0.55016184" />
       <window_info anchor="bottom" id="Find" order="13" weight="0.33656958" />
@@ -865,7 +1099,7 @@
       <window_info anchor="right" id="Maven Projects" order="9" weight="0.3280303" />
     </layout>
     <layout-to-restore>
-      <window_info active="true" content_ui="combo" id="Project" order="0" sideWeight="0.48322147" visible="true" weight="0.275" />
+      <window_info active="true" content_ui="combo" id="Project" order="0" sideWeight="0.48322147" visible="true" weight="0.24469697" />
       <window_info id="Structure" order="1" sideWeight="0.5167785" side_tool="true" weight="0.1590909" />
       <window_info id="Designer" order="2" />
       <window_info id="Image Layers" order="3" />
@@ -874,19 +1108,19 @@
       <window_info id="Learn" order="6" weight="0.32954547" />
       <window_info id="Favorites" order="7" sideWeight="0.513347" side_tool="true" weight="0.15681818" />
       <window_info anchor="bottom" id="Message" order="0" />
-      <window_info anchor="bottom" id="Run" order="1" sideWeight="0.49545455" visible="true" weight="0.18608414" />
-      <window_info anchor="bottom" id="Debug" order="2" weight="0.4514563" />
+      <window_info anchor="bottom" id="Run" order="1" sideWeight="0.49545455" visible="true" weight="0.07605178" />
+      <window_info anchor="bottom" id="Debug" order="2" weight="0.22653721" />
       <window_info anchor="bottom" id="Cvs" order="3" weight="0.25" />
       <window_info anchor="bottom" id="Inspection" order="4" weight="0.4" />
       <window_info anchor="bottom" id="TODO" order="5" weight="0.07605178" />
-      <window_info anchor="bottom" id="Terminal" order="6" weight="0.0" />
-      <window_info anchor="bottom" id="Version Control" order="7" weight="0.32847896" />
+      <window_info anchor="bottom" id="Terminal" order="6" weight="0.32847896" />
+      <window_info anchor="bottom" id="Version Control" order="7" weight="0.0" />
       <window_info anchor="bottom" id="Database Changes" order="8" show_stripe_button="false" />
       <window_info anchor="bottom" id="Event Log" order="9" sideWeight="0.50454545" side_tool="true" weight="0.28317153" />
-      <window_info anchor="bottom" id="Messages" order="10" weight="0.08576052" />
+      <window_info anchor="bottom" id="Messages" order="10" weight="0.006472492" />
       <window_info anchor="bottom" id="Statistic" order="11" weight="0.0" />
       <window_info anchor="bottom" id="Inspection Results" order="12" weight="0.55016184" />
-      <window_info anchor="bottom" id="Find" order="13" weight="0.022653721" />
+      <window_info anchor="bottom" id="Find" order="13" weight="0.33656958" />
       <window_info anchor="right" id="Commander" internal_type="SLIDING" order="0" type="SLIDING" weight="0.4" />
       <window_info anchor="right" content_ui="combo" id="Hierarchy" order="1" weight="0.25" />
       <window_info anchor="right" id="Palette" order="2" />
@@ -910,6 +1144,18 @@
     <MESSAGE value="clean up!" />
     <option name="LAST_COMMIT_MESSAGE" value="clean up!" />
   </component>
+  <component name="XDebuggerManager">
+    <breakpoint-manager>
+      <breakpoints>
+        <line-breakpoint enabled="true" type="java-line">
+          <url>file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/ZobristHashUtil.java</url>
+          <line>29</line>
+          <properties />
+          <option name="timeStamp" value="4" />
+        </line-breakpoint>
+      </breakpoints>
+    </breakpoint-manager>
+  </component>
   <component name="debuggerHistoryManager">
     <expressions id="breakpointCondition">
       <expression>
@@ -932,434 +1178,506 @@
     </expressions>
   </component>
   <component name="editorHistoryManager">
-    <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/eMoveParserFromAN.java">
+    <entry file="file://$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/evaluation/Bishop.java">
       <provider selected="true" editor-type-id="text-editor">
-        <state relative-caret-position="-300">
-          <caret line="5" column="6" selection-start-line="5" selection-start-column="6" selection-end-line="5" selection-end-column="6" />
+        <state relative-caret-position="-345">
+          <caret line="12" column="6" selection-start-line="12" selection-start-column="6" selection-end-line="12" selection-end-column="6" />
         </state>
       </provider>
     </entry>
-    <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/MoveConstants.java">
+    <entry file="file://$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/evaluation/MaterialEval.java">
       <provider selected="true" editor-type-id="text-editor">
-        <state relative-caret-position="690">
-          <caret line="46" lean-forward="true" selection-start-line="46" selection-end-line="46" />
+        <state relative-caret-position="351">
+          <caret line="82" column="19" selection-start-line="82" selection-start-column="19" selection-end-line="82" selection-end-column="19" />
         </state>
       </provider>
     </entry>
-    <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/MoveParser.java">
+    <entry file="file://$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/evaluation/Evaluator.java">
       <provider selected="true" editor-type-id="text-editor">
-        <state relative-caret-position="-105">
-          <caret line="30" column="86" lean-forward="true" selection-start-line="30" selection-start-column="86" selection-end-line="30" selection-end-column="86" />
-          <folding>
-            <element signature="imports" expanded="true" />
-          </folding>
+        <state relative-caret-position="68">
+          <caret line="43" column="31" selection-start-line="43" selection-start-column="31" selection-end-line="43" selection-end-column="31" />
         </state>
       </provider>
     </entry>
-    <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/PieceMoveKing.java" />
-    <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/PieceMoveKnight.java" />
-    <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/PieceMovePawns.java" />
-    <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MoveGeneratorPawns.java" />
-    <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MoveGeneratorKnight.java" />
-    <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MoveGeneratorKingLegal.java" />
-    <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MoveGeneratorSliding.java" />
-    <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MoveGeneratorPromotion.java" />
-    <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MoveGeneratorEnPassant.java" />
-    <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MoveGeneratorCastling.java" />
-    <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/MoveGeneratorMaster.java">
+    <entry file="file://$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/search/QuiescentSearchUtils.java">
       <provider selected="true" editor-type-id="text-editor">
-        <state relative-caret-position="117">
-          <caret line="118" column="12" selection-start-line="118" selection-start-column="12" selection-end-line="118" selection-end-column="12" />
-          <folding>
-            <element signature="imports" expanded="true" />
-          </folding>
+        <state relative-caret-position="180">
+          <caret line="13" column="23" selection-start-line="13" selection-start-column="23" selection-end-line="13" selection-end-column="23" />
         </state>
       </provider>
     </entry>
-    <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MovePromotion.java" />
-    <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MoveRegular.java" />
-    <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/MoveUtils.java">
+    <entry file="file://$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/moveordering/HistoryMoves.java">
       <provider selected="true" editor-type-id="text-editor">
-        <state relative-caret-position="30">
-          <caret line="2" column="13" selection-start-line="2" selection-start-column="13" selection-end-line="2" selection-end-column="13" />
+        <state relative-caret-position="285">
+          <caret line="19" column="18" selection-start-line="19" selection-start-column="18" selection-end-line="19" selection-end-column="18" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/search/Extensions.java">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="210">
+          <caret line="14" column="26" lean-forward="true" selection-start-line="14" selection-start-column="26" selection-end-line="14" selection-end-column="26" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/timemanagement/TimeAllocator.java">
+      <provider selected="true" editor-type-id="text-editor">
+        <state>
+          <caret column="51" lean-forward="true" selection-start-column="51" selection-end-column="51" />
         </state>
       </provider>
     </entry>
-    <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/MoveAdder.java">
+    <entry file="file://$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/search/SEEPruning.java">
       <provider selected="true" editor-type-id="text-editor">
-        <state relative-caret-position="465">
-          <caret line="31" column="54" selection-start-line="31" selection-start-column="54" selection-end-line="31" selection-end-column="54" />
+        <state relative-caret-position="60">
+          <caret line="16" selection-start-line="16" selection-end-line="16" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/moveordering/MoveOrderer.java">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="173">
+          <caret line="144" column="20" selection-start-line="144" selection-start-column="20" selection-end-line="144" selection-end-column="20" />
           <folding>
             <element signature="imports" expanded="true" />
+            <element signature="e#10835#10836#0" expanded="true" />
+            <element signature="e#10898#10899#0" expanded="true" />
           </folding>
         </state>
       </provider>
     </entry>
-    <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/MoveGeneratorCheck.java">
+    <entry file="file://$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/search/Razoring.java">
       <provider selected="true" editor-type-id="text-editor">
         <state relative-caret-position="135">
-          <caret line="14" column="143" lean-forward="true" selection-start-line="14" selection-start-column="143" selection-end-line="14" selection-end-column="143" />
+          <caret line="12" column="56" selection-start-line="12" selection-start-column="56" selection-end-line="12" selection-end-column="56" />
         </state>
       </provider>
     </entry>
-    <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/chessprogram/god/MoveMakingEnPassant.java" />
-    <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/MoveGeneratorPseudo.java">
+    <entry file="file://$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/search/IterativeDeepeningDFS.java">
       <provider selected="true" editor-type-id="text-editor">
-        <state relative-caret-position="109">
-          <caret line="12" column="4" selection-start-line="12" selection-start-column="4" selection-end-line="12" selection-end-column="4" />
-          <folding>
-            <element signature="imports" expanded="true" />
-          </folding>
+        <state relative-caret-position="386">
+          <caret line="68" column="26" selection-start-line="68" selection-start-column="26" selection-end-line="68" selection-end-column="26" />
         </state>
       </provider>
     </entry>
-    <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/MoveGeneratorRegular.java">
+    <entry file="file://$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/search/AspirationSearch.java">
       <provider selected="true" editor-type-id="text-editor">
-        <state relative-caret-position="233">
-          <caret line="31" column="52" selection-start-line="31" selection-start-column="52" selection-end-line="31" selection-end-column="52" />
-          <folding>
-            <element signature="imports" expanded="true" />
-          </folding>
+        <state relative-caret-position="386">
+          <caret line="83" column="4" lean-forward="true" selection-start-line="83" selection-start-column="4" selection-end-line="83" selection-end-column="11" />
         </state>
       </provider>
     </entry>
-    <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/PinnedManager.java">
+    <entry file="file://$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/main/WACTests.java">
       <provider selected="true" editor-type-id="text-editor">
-        <state relative-caret-position="345">
-          <caret line="22" column="33" selection-start-line="22" selection-start-column="33" selection-end-line="22" selection-end-column="33" />
-          <folding>
-            <element signature="imports" expanded="true" />
-          </folding>
+        <state relative-caret-position="122">
+          <caret line="65" column="5" lean-forward="true" selection-start-line="65" selection-start-column="5" selection-end-line="65" selection-end-column="5" />
         </state>
       </provider>
     </entry>
-    <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/MakeMoveRegular.java">
+    <entry file="file://$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/main/StandAlone.java">
       <provider selected="true" editor-type-id="text-editor">
-        <state relative-caret-position="163">
-          <caret line="37" column="16" selection-start-line="37" selection-start-column="16" selection-end-line="37" selection-end-column="16" />
-          <folding>
-            <element signature="imports" expanded="true" />
-          </folding>
+        <state relative-caret-position="115">
+          <caret line="62" lean-forward="true" selection-start-line="62" selection-end-line="62" />
         </state>
       </provider>
     </entry>
-    <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/StackMoveData.java">
+    <entry file="file://$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/main/UCIEntry.java">
       <provider selected="true" editor-type-id="text-editor">
-        <state relative-caret-position="105">
-          <caret line="11" column="61" selection-start-line="11" selection-start-column="61" selection-end-line="11" selection-end-column="61" />
+        <state relative-caret-position="96">
+          <caret line="151" selection-start-line="151" selection-end-line="151" />
         </state>
       </provider>
     </entry>
-    <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/Art.java">
+    <entry file="file://$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/protocolhelperclasses/UCIPrinter.java">
       <provider selected="true" editor-type-id="text-editor">
-        <state relative-caret-position="169">
-          <caret line="13" column="44" selection-start-line="13" selection-start-column="44" selection-end-line="13" selection-end-column="44" />
+        <state relative-caret-position="393">
+          <caret line="60" column="9" lean-forward="true" selection-start-line="60" selection-start-column="9" selection-end-line="60" selection-end-column="9" />
         </state>
       </provider>
     </entry>
-    <entry file="file://$PROJECT_DIR$/../ChessCore/src/test/java/SquareTest.java">
+    <entry file="file://$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/utilities/Statistics.java">
       <provider selected="true" editor-type-id="text-editor">
-        <state relative-caret-position="285">
-          <caret line="87" column="8" selection-start-line="87" selection-start-column="8" selection-end-line="87" selection-end-column="8" />
+        <state relative-caret-position="108">
+          <caret line="261" column="39" lean-forward="true" selection-start-line="261" selection-start-column="39" selection-end-line="261" selection-end-column="39" />
         </state>
       </provider>
     </entry>
-    <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/MakeMoveSpecial.java">
+    <entry file="file://$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/search/Engine.java">
       <provider selected="true" editor-type-id="text-editor">
-        <state relative-caret-position="2043">
-          <caret line="145" selection-start-line="145" selection-end-line="145" />
+        <state relative-caret-position="182">
+          <caret line="26" column="32" lean-forward="true" selection-start-line="26" selection-start-column="32" selection-end-line="26" selection-end-column="32" />
         </state>
       </provider>
     </entry>
-    <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/PieceMove.java">
+    <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/StackDataCool.java" />
+    <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/Square.java">
       <provider selected="true" editor-type-id="text-editor">
-        <state relative-caret-position="135">
-          <caret line="9" column="17" selection-start-line="9" selection-start-column="17" selection-end-line="9" selection-end-column="17" />
-          <folding>
-            <element signature="imports" expanded="true" />
-          </folding>
+        <state relative-caret-position="765">
+          <caret line="61" column="4" selection-start-line="61" selection-start-column="4" selection-end-line="61" selection-end-column="4" />
         </state>
       </provider>
     </entry>
     <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/Setup.java">
       <provider selected="true" editor-type-id="text-editor">
-        <state relative-caret-position="255">
-          <caret line="19" selection-start-line="19" selection-end-line="19" />
-          <folding>
-            <element signature="imports" expanded="true" />
-            <element signature="e#326#327#0" expanded="true" />
-            <element signature="e#349#350#0" expanded="true" />
-          </folding>
+        <state relative-caret-position="60">
+          <caret line="9" column="6" selection-start-line="9" selection-start-column="6" selection-end-line="9" selection-end-column="6" />
         </state>
       </provider>
     </entry>
-    <entry file="jar://$MAVEN_REPOSITORY$/com/fluxchess/jcpi/1.4.0/jcpi-1.4.0-sources.jar!/com/fluxchess/jcpi/AbstractEngine.java">
+    <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/PinnedManager.java">
       <provider selected="true" editor-type-id="text-editor">
-        <state relative-caret-position="135">
-          <caret line="33" column="22" selection-start-line="33" selection-start-column="22" selection-end-line="33" selection-end-column="22" />
+        <state relative-caret-position="60">
+          <caret line="7" column="6" selection-start-line="7" selection-start-column="6" selection-end-line="7" selection-end-column="6" />
         </state>
       </provider>
     </entry>
-    <entry file="file://$PROJECT_DIR$/../ChessCore/ChessCore.iml">
+    <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/Art.java">
       <provider selected="true" editor-type-id="text-editor">
-        <state relative-caret-position="180">
-          <caret line="12" column="50" selection-start-line="12" selection-start-column="50" selection-end-line="12" selection-end-column="50" />
+        <state relative-caret-position="60">
+          <caret line="4" column="7" selection-start-line="4" selection-start-column="7" selection-end-line="4" selection-end-column="7" />
         </state>
       </provider>
     </entry>
-    <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/ZobristHash.java">
+    <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/MoveParser.java">
       <provider selected="true" editor-type-id="text-editor">
-        <state relative-caret-position="60">
-          <caret line="367" column="9" selection-start-line="367" selection-start-column="9" selection-end-line="367" selection-end-column="9" />
+        <state relative-caret-position="570">
+          <caret line="44" column="28" lean-forward="true" selection-start-line="44" selection-start-column="28" selection-end-line="44" selection-end-column="28" />
           <folding>
-            <element signature="e#12622#12623#0" expanded="true" />
-            <element signature="e#12664#12665#0" expanded="true" />
+            <element signature="e#578#579#0" expanded="true" />
+            <element signature="e#657#658#0" expanded="true" />
+            <element signature="e#1579#1580#0" expanded="true" />
+            <element signature="e#1644#1645#0" expanded="true" />
           </folding>
         </state>
       </provider>
     </entry>
-    <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/IllegalUnmakeException.java">
+    <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/ConstantsMoveStackData.java">
       <provider selected="true" editor-type-id="text-editor">
-        <state relative-caret-position="135">
-          <caret line="9" column="23" selection-start-line="9" selection-start-column="23" selection-end-line="9" selection-end-column="23" />
-          <folding>
-            <element signature="e#189#190#0" expanded="true" />
-            <element signature="e#209#210#0" expanded="true" />
-          </folding>
+        <state relative-caret-position="30">
+          <caret line="2" column="35" selection-start-line="2" selection-start-column="35" selection-end-line="2" selection-end-column="35" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/protocolhelperclasses/PVLine.java">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="393">
+          <caret line="48" selection-start-line="48" selection-end-line="48" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/search/PrincipleVariationSearch.java">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="160">
+          <caret line="247" column="8" selection-start-line="247" selection-start-column="8" selection-end-line="247" selection-end-column="8" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/src/main/java/com/github/louism33/axolotl/search/QuiescenceSearch.java">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="413">
+          <caret line="95" column="48" selection-start-line="95" selection-start-column="48" selection-end-line="95" selection-end-column="48" />
         </state>
       </provider>
     </entry>
-    <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/MoveUnmaker.java">
+    <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/ChessboardDetails.java">
       <provider selected="true" editor-type-id="text-editor">
-        <state relative-caret-position="150">
-          <caret line="16" column="33" lean-forward="true" selection-start-line="16" selection-start-column="33" selection-end-line="16" selection-end-column="33" />
-          <folding>
-            <element signature="imports" expanded="true" />
-          </folding>
+        <state relative-caret-position="90">
+          <caret line="27" column="4" selection-start-line="27" selection-start-column="4" selection-end-line="27" selection-end-column="4" />
         </state>
       </provider>
     </entry>
-    <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/MakeMoveAndHashUpdate.java">
+    <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/StackDataUtil.java">
       <provider selected="true" editor-type-id="text-editor">
-        <state relative-caret-position="421">
-          <caret line="37" column="19" lean-forward="true" selection-start-line="37" selection-start-column="19" selection-end-line="37" selection-end-column="19" />
+        <state relative-caret-position="90">
+          <caret line="24" column="22" selection-start-line="24" selection-start-column="22" selection-end-line="24" selection-end-column="22" />
           <folding>
-            <element signature="imports" expanded="true" />
+            <element signature="e#749#750#0" expanded="true" />
+            <element signature="e#824#825#0" expanded="true" />
           </folding>
         </state>
       </provider>
     </entry>
-    <entry file="file://$PROJECT_DIR$/../ChessCore/src/test/java/PerftTestTinyDepths.java">
+    <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/CheckHelper.java">
       <provider selected="true" editor-type-id="text-editor">
-        <state relative-caret-position="30">
-          <caret line="5" column="13" selection-start-line="5" selection-start-column="13" selection-end-line="5" selection-end-column="13" />
+        <state relative-caret-position="1020">
+          <caret line="71" column="8" selection-start-line="71" selection-start-column="8" selection-end-line="71" selection-end-column="8" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/../ChessCore/src/test/java/BoardStateTest.java">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="-555">
+          <caret line="11" selection-start-line="11" selection-end-line="11" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="jar:///usr/lib/jvm/jdk-11.0.1/lib/src.zip!/java.base/java/util/Stack.java">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="124">
+          <caret line="79" column="26" selection-start-line="79" selection-start-column="26" selection-end-line="79" selection-end-column="26" />
         </state>
       </provider>
     </entry>
-    <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/CopierToBeDeleted.java">
+    <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/Piece.java">
       <provider selected="true" editor-type-id="text-editor">
-        <state relative-caret-position="60">
-          <caret line="4" column="7" selection-start-line="4" selection-start-column="7" selection-end-line="4" selection-end-column="7" />
+        <state relative-caret-position="128">
+          <caret line="23" column="24" selection-start-line="23" selection-start-column="24" selection-end-line="23" selection-end-column="24" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="jar://$MAVEN_REPOSITORY$/org/junit/platform/junit-platform-commons/1.3.2/junit-platform-commons-1.3.2-sources.jar!/org/junit/platform/commons/util/ReflectionUtils.java">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="93">
+          <caret line="534" selection-start-line="534" selection-end-line="534" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/../ChessCore/src/test/java/CloneTest.java">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="45">
+          <caret line="11" column="13" selection-start-line="11" selection-start-column="13" selection-end-line="11" selection-end-column="13" />
         </state>
       </provider>
     </entry>
     <entry file="file://$PROJECT_DIR$/../ChessCore/src/test/java/NullMoveTest.java">
       <provider selected="true" editor-type-id="text-editor">
-        <state relative-caret-position="15">
-          <caret line="1" column="18" selection-start-line="1" selection-start-column="18" selection-end-line="1" selection-end-column="18" />
+        <state relative-caret-position="1410">
+          <caret line="99" column="39" selection-start-line="99" selection-start-column="39" selection-end-line="99" selection-end-column="39" />
         </state>
       </provider>
     </entry>
-    <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/MoveGeneratorSpecial.java">
+    <entry file="file://$PROJECT_DIR$/../ChessCore/src/test/java/PerftTestsBigDepths.java">
       <provider selected="true" editor-type-id="text-editor">
-        <state relative-caret-position="340">
-          <caret line="141" column="17" lean-forward="true" selection-start-line="141" selection-start-column="17" selection-end-line="141" selection-end-column="17" />
-          <folding>
-            <element signature="imports" expanded="true" />
-          </folding>
+        <state relative-caret-position="537">
+          <caret line="53" column="23" selection-start-line="53" selection-start-column="23" selection-end-line="53" selection-end-column="23" />
         </state>
       </provider>
     </entry>
-    <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/Perft.java">
+    <entry file="file://$PROJECT_DIR$/../ChessCore/src/test/java/PerftTestDetail.java">
       <provider selected="true" editor-type-id="text-editor">
-        <state relative-caret-position="240">
-          <caret line="31" column="44" selection-start-line="31" selection-start-column="44" selection-end-line="31" selection-end-column="44" />
+        <state relative-caret-position="100">
+          <caret line="87" selection-start-line="87" selection-end-line="87" />
         </state>
       </provider>
     </entry>
-    <entry file="file://$PROJECT_DIR$/../ChessCore/src/test/java/ChessboardHashTest.java">
+    <entry file="file://$PROJECT_DIR$/../ChessCore/src/test/java/PerftTest.java">
       <provider selected="true" editor-type-id="text-editor">
-        <state relative-caret-position="255">
-          <caret line="123" column="12" selection-start-line="123" selection-start-column="12" selection-end-line="123" selection-end-column="12" />
-          <folding>
-            <element signature="imports" expanded="true" />
-          </folding>
+        <state relative-caret-position="-4127">
+          <caret line="24" column="13" lean-forward="true" selection-start-line="24" selection-start-column="13" selection-end-line="24" selection-end-column="13" />
         </state>
       </provider>
     </entry>
-    <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/BitOperations.java">
+    <entry file="file://$PROJECT_DIR$/../ChessCore/src/test/java/MoveTest.java">
       <provider selected="true" editor-type-id="text-editor">
-        <state relative-caret-position="69">
-          <caret line="23" column="46" selection-start-line="23" selection-start-column="46" selection-end-line="23" selection-end-column="46" />
+        <state relative-caret-position="160">
+          <caret line="118" column="40" lean-forward="true" selection-start-line="118" selection-start-column="40" selection-end-line="118" selection-end-column="40" />
         </state>
       </provider>
     </entry>
-    <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/Chessboard.java">
+    <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/MoveGeneratorMaster.java">
       <provider selected="true" editor-type-id="text-editor">
-        <state relative-caret-position="210">
-          <caret line="14" column="31" lean-forward="true" selection-start-line="14" selection-start-column="31" selection-end-line="14" selection-end-column="31" />
+        <state relative-caret-position="23">
+          <caret line="32" column="51" lean-forward="true" selection-start-line="32" selection-start-column="51" selection-end-line="32" selection-end-column="51" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/MakeMoveRegular.java">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="165">
+          <caret line="20" column="9" lean-forward="true" selection-start-line="20" selection-start-column="9" selection-end-line="20" selection-end-column="9" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/MoveGeneratorSpecial.java">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="75">
+          <caret line="71" lean-forward="true" selection-start-line="71" selection-end-line="71" />
           <folding>
             <element signature="imports" expanded="true" />
-            <element signature="e#858#859#0" expanded="true" />
-            <element signature="e#890#891#0" expanded="true" />
-            <element signature="e#1296#1297#0" expanded="true" />
-            <element signature="e#1378#1379#0" expanded="true" />
-            <element signature="e#2067#2068#0" expanded="true" />
-            <element signature="e#2134#2135#0" expanded="true" />
-            <element signature="e#2939#2940#0" expanded="true" />
-            <element signature="e#2985#2986#0" expanded="true" />
-            <element signature="e#4670#4671#0" expanded="true" />
-            <element signature="e#4735#4736#0" expanded="true" />
-            <element signature="e#4800#4801#0" expanded="true" />
-            <element signature="e#4857#4858#0" expanded="true" />
-            <element signature="e#8496#8497#0" expanded="true" />
-            <element signature="e#8554#8555#0" expanded="true" />
-            <element signature="e#8583#8584#0" expanded="true" />
-            <element signature="e#8639#8640#0" expanded="true" />
-            <element signature="e#9554#9555#0" expanded="true" />
-            <element signature="e#9606#9607#0" expanded="true" />
-            <element signature="e#9642#9643#0" expanded="true" />
-            <element signature="e#9687#9688#0" expanded="true" />
-            <element signature="e#9738#9739#0" expanded="true" />
-            <element signature="e#9788#9789#0" expanded="true" />
-            <element signature="e#10232#10233#0" expanded="true" />
-            <element signature="e#10300#10301#0" expanded="true" />
-            <element signature="e#10574#10575#0" expanded="true" />
-            <element signature="e#10625#10626#0" expanded="true" />
-            <element signature="e#10688#10689#0" expanded="true" />
-            <element signature="e#10750#10751#0" expanded="true" />
-            <element signature="e#10792#10793#0" expanded="true" />
-            <element signature="e#10838#10839#0" expanded="true" />
-            <element signature="e#10901#10902#0" expanded="true" />
-            <element signature="e#10963#10964#0" expanded="true" />
-            <element signature="e#11005#11006#0" expanded="true" />
-            <element signature="e#11051#11052#0" expanded="true" />
-            <element signature="e#11114#11115#0" expanded="true" />
-            <element signature="e#11176#11177#0" expanded="true" />
-            <element signature="e#11218#11219#0" expanded="true" />
-            <element signature="e#11264#11265#0" expanded="true" />
-            <element signature="e#11327#11328#0" expanded="true" />
-            <element signature="e#11389#11390#0" expanded="true" />
-            <element signature="e#11424#11425#0" expanded="true" />
-            <element signature="e#11470#11471#0" expanded="true" />
-            <element signature="e#11520#11521#0" expanded="true" />
-            <element signature="e#11572#11573#0" expanded="true" />
-            <element signature="e#11609#11610#0" expanded="true" />
-            <element signature="e#11657#11658#0" expanded="true" />
-            <element signature="e#11711#11712#0" expanded="true" />
-            <element signature="e#11767#11768#0" expanded="true" />
-            <element signature="e#11804#11805#0" expanded="true" />
-            <element signature="e#11852#11853#0" expanded="true" />
-            <element signature="e#11906#11907#0" expanded="true" />
-            <element signature="e#11962#11963#0" expanded="true" />
-            <element signature="e#11997#11998#0" expanded="true" />
-            <element signature="e#12043#12044#0" expanded="true" />
-            <element signature="e#12093#12094#0" expanded="true" />
-            <element signature="e#12145#12146#0" expanded="true" />
-            <element signature="e#12180#12181#0" expanded="true" />
-            <element signature="e#12226#12227#0" expanded="true" />
-            <element signature="e#12276#12277#0" expanded="true" />
-            <element signature="e#12328#12329#0" expanded="true" />
-            <element signature="e#12362#12363#0" expanded="true" />
-            <element signature="e#12407#12408#0" expanded="true" />
-            <element signature="e#12455#12456#0" expanded="true" />
-            <element signature="e#12505#12506#0" expanded="true" />
-            <element signature="e#12540#12541#0" expanded="true" />
-            <element signature="e#12586#12587#0" expanded="true" />
-            <element signature="e#12636#12637#0" expanded="true" />
-            <element signature="e#12688#12689#0" expanded="true" />
-            <element signature="e#12725#12726#0" expanded="true" />
-            <element signature="e#12773#12774#0" expanded="true" />
-            <element signature="e#12827#12828#0" expanded="true" />
-            <element signature="e#12883#12884#0" expanded="true" />
-            <element signature="e#12920#12921#0" expanded="true" />
-            <element signature="e#12968#12969#0" expanded="true" />
-            <element signature="e#13022#13023#0" expanded="true" />
-            <element signature="e#13078#13079#0" expanded="true" />
-            <element signature="e#13113#13114#0" expanded="true" />
-            <element signature="e#13159#13160#0" expanded="true" />
-            <element signature="e#13209#13210#0" expanded="true" />
-            <element signature="e#13261#13262#0" expanded="true" />
-            <element signature="e#13296#13297#0" expanded="true" />
-            <element signature="e#13342#13343#0" expanded="true" />
-            <element signature="e#13392#13393#0" expanded="true" />
-            <element signature="e#13444#13445#0" expanded="true" />
-            <element signature="e#13478#13479#0" expanded="true" />
-            <element signature="e#13523#13524#0" expanded="true" />
-            <element signature="e#13571#13572#0" expanded="true" />
-            <element signature="e#13621#13622#0" expanded="true" />
-            <element signature="e#23100#23101#0" expanded="true" />
-            <element signature="e#23130#23131#0" expanded="true" />
-            <element signature="e#23187#23188#0" expanded="true" />
-            <element signature="e#23225#23226#0" expanded="true" />
-            <element signature="e#23268#23269#0" expanded="true" />
-            <element signature="e#23302#23303#0" expanded="true" />
-            <element signature="e#23361#23362#0" expanded="true" />
-            <element signature="e#23407#23408#0" expanded="true" />
-            <element signature="e#23457#23458#0" expanded="true" />
-            <element signature="e#23489#23490#0" expanded="true" />
-            <element signature="e#23553#23554#0" expanded="true" />
-            <element signature="e#23595#23596#0" expanded="true" />
           </folding>
         </state>
       </provider>
     </entry>
-    <entry file="file://$PROJECT_DIR$/../ChessCore/src/test/java/PerftTest.java">
+    <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/ZobristHashUtil.java">
       <provider selected="true" editor-type-id="text-editor">
-        <state relative-caret-position="84">
-          <caret line="250" column="28" selection-start-line="250" selection-start-column="28" selection-end-line="250" selection-end-column="28" />
+        <state relative-caret-position="-62">
+          <caret line="114" column="16" selection-start-line="114" selection-start-column="16" selection-end-line="114" selection-end-column="16" />
         </state>
       </provider>
     </entry>
-    <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/BitboardResources.java">
+    <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/MoveUtils.java">
       <provider selected="true" editor-type-id="text-editor">
-        <state relative-caret-position="60">
-          <caret line="4" column="49" selection-start-line="4" selection-start-column="49" selection-end-line="4" selection-end-column="49" />
+        <state relative-caret-position="30">
+          <caret line="2" column="6" selection-start-line="2" selection-start-column="6" selection-end-line="2" selection-end-column="6" />
         </state>
       </provider>
     </entry>
-    <entry file="file://$PROJECT_DIR$/src/main/java/javacode/chessprogram/miscAdmin/ExtendedPositionDescriptionParser.java">
+    <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/Perft.java">
       <provider selected="true" editor-type-id="text-editor">
-        <state relative-caret-position="60">
-          <caret line="9" column="13" selection-start-line="9" selection-start-column="13" selection-end-line="9" selection-end-column="13" />
+        <state relative-caret-position="205">
+          <caret line="68" column="44" lean-forward="true" selection-start-line="68" selection-start-column="44" selection-end-line="68" selection-end-column="44" />
+          <folding>
+            <element signature="imports" expanded="true" />
+          </folding>
         </state>
       </provider>
     </entry>
-    <entry file="file://$PROJECT_DIR$/src/main/java/javacode/chessengine/main/UCIEntry.java">
+    <entry file="file://$PROJECT_DIR$/../ChessCore/src/test/java/ChessboardHashTest.java">
       <provider selected="true" editor-type-id="text-editor">
-        <state relative-caret-position="60">
-          <caret line="15" column="36" selection-start-line="15" selection-start-column="36" selection-end-line="15" selection-end-column="36" />
+        <state relative-caret-position="88">
+          <caret line="16" selection-start-line="16" selection-end-line="16" />
+          <folding>
+            <element signature="imports" expanded="true" />
+          </folding>
         </state>
       </provider>
     </entry>
-    <entry file="file://$PROJECT_DIR$/../ChessCore/pom.xml">
+    <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/MoveUnmaker.java">
       <provider selected="true" editor-type-id="text-editor">
-        <state relative-caret-position="90">
-          <caret line="6" column="13" selection-start-line="6" selection-start-column="13" selection-end-line="6" selection-end-column="32" />
+        <state relative-caret-position="50">
+          <caret line="11" column="26" lean-forward="true" selection-start-line="11" selection-start-column="26" selection-end-line="11" selection-end-column="26" />
         </state>
       </provider>
     </entry>
-    <entry file="file://$PROJECT_DIR$/pom.xml">
+    <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/MakeMoveAndHashUpdate.java">
       <provider selected="true" editor-type-id="text-editor">
-        <state>
-          <caret column="12" selection-start-column="12" selection-end-column="12" />
+        <state relative-caret-position="148">
+          <caret line="48" column="31" lean-forward="true" selection-start-line="48" selection-start-column="31" selection-end-line="48" selection-end-column="31" />
+          <folding>
+            <element signature="imports" expanded="true" />
+          </folding>
         </state>
       </provider>
     </entry>
-    <entry file="file://$PROJECT_DIR$/src/main/java/javacode/chessprogram/miscAdmin/Dummy.java">
+    <entry file="file://$PROJECT_DIR$/../ChessCore/src/main/java/com/github/louism33/chesscore/Chessboard.java">
       <provider selected="true" editor-type-id="text-editor">
-        <state relative-caret-position="105">
-          <caret line="9" column="4" lean-forward="true" selection-start-line="9" selection-start-column="4" selection-end-line="9" selection-end-column="4" />
+        <state relative-caret-position="325">
+          <caret line="903" lean-forward="true" selection-start-line="903" selection-end-line="903" />
+          <folding>
+            <element signature="imports" expanded="true" />
+            <element signature="e#3375#3376#0" expanded="true" />
+            <element signature="e#3407#3408#0" expanded="true" />
+            <element signature="e#3721#3722#0" expanded="true" />
+            <element signature="e#3803#3804#0" expanded="true" />
+            <element signature="e#4530#4531#0" expanded="true" />
+            <element signature="e#4579#4580#0" expanded="true" />
+            <element signature="e#5647#5648#0" expanded="true" />
+            <element signature="e#5691#5692#0" expanded="true" />
+            <element signature="e#7174#7175#0" expanded="true" />
+            <element signature="e#7221#7222#0" expanded="true" />
+            <element signature="e#7382#7383#0" expanded="true" />
+            <element signature="e#7439#7440#0" expanded="true" />
+            <element signature="e#11840#11841#0" expanded="true" />
+            <element signature="e#11898#11899#0" expanded="true" />
+            <element signature="e#11923#11924#0" expanded="true" />
+            <element signature="e#11991#11992#0" expanded="true" />
+            <element signature="e#12540#12541#0" expanded="true" />
+            <element signature="e#12592#12593#0" expanded="true" />
+            <element signature="e#12628#12629#0" expanded="true" />
+            <element signature="e#12673#12674#0" expanded="true" />
+            <element signature="e#12724#12725#0" expanded="true" />
+            <element signature="e#12774#12775#0" expanded="true" />
+            <element signature="e#13870#13871#0" expanded="true" />
+            <element signature="e#13921#13922#0" expanded="true" />
+            <element signature="e#13984#13985#0" expanded="true" />
+            <element signature="e#14046#14047#0" expanded="true" />
+            <element signature="e#14088#14089#0" expanded="true" />
+            <element signature="e#14134#14135#0" expanded="true" />
+            <element signature="e#14197#14198#0" expanded="true" />
+            <element signature="e#14259#14260#0" expanded="true" />
+            <element signature="e#14301#14302#0" expanded="true" />
+            <element signature="e#14347#14348#0" expanded="true" />
+            <element signature="e#14410#14411#0" expanded="true" />
+            <element signature="e#14472#14473#0" expanded="true" />
+            <element signature="e#14514#14515#0" expanded="true" />
+            <element signature="e#14560#14561#0" expanded="true" />
+            <element signature="e#14623#14624#0" expanded="true" />
+            <element signature="e#14685#14686#0" expanded="true" />
+            <element signature="e#14720#14721#0" expanded="true" />
+            <element signature="e#14766#14767#0" expanded="true" />
+            <element signature="e#14816#14817#0" expanded="true" />
+            <element signature="e#14868#14869#0" expanded="true" />
+            <element signature="e#14905#14906#0" expanded="true" />
+            <element signature="e#14953#14954#0" expanded="true" />
+            <element signature="e#15007#15008#0" expanded="true" />
+            <element signature="e#15063#15064#0" expanded="true" />
+            <element signature="e#15100#15101#0" expanded="true" />
+            <element signature="e#15148#15149#0" expanded="true" />
+            <element signature="e#15202#15203#0" expanded="true" />
+            <element signature="e#15258#15259#0" expanded="true" />
+            <element signature="e#15293#15294#0" expanded="true" />
+            <element signature="e#15339#15340#0" expanded="true" />
+            <element signature="e#15389#15390#0" expanded="true" />
+            <element signature="e#15441#15442#0" expanded="true" />
+            <element signature="e#15476#15477#0" expanded="true" />
+            <element signature="e#15522#15523#0" expanded="true" />
+            <element signature="e#15572#15573#0" expanded="true" />
+            <element signature="e#15624#15625#0" expanded="true" />
+            <element signature="e#15658#15659#0" expanded="true" />
+            <element signature="e#15703#15704#0" expanded="true" />
+            <element signature="e#15751#15752#0" expanded="true" />
+            <element signature="e#15801#15802#0" expanded="true" />
+            <element signature="e#15836#15837#0" expanded="true" />
+            <element signature="e#15882#15883#0" expanded="true" />
+            <element signature="e#15932#15933#0" expanded="true" />
+            <element signature="e#15984#15985#0" expanded="true" />
+            <element signature="e#16021#16022#0" expanded="true" />
+            <element signature="e#16069#16070#0" expanded="true" />
+            <element signature="e#16123#16124#0" expanded="true" />
+            <element signature="e#16179#16180#0" expanded="true" />
+            <element signature="e#16216#16217#0" expanded="true" />
+            <element signature="e#16264#16265#0" expanded="true" />
+            <element signature="e#16318#16319#0" expanded="true" />
+            <element signature="e#16374#16375#0" expanded="true" />
+            <element signature="e#16409#16410#0" expanded="true" />
+            <element signature="e#16455#16456#0" expanded="true" />
+            <element signature="e#16505#16506#0" expanded="true" />
+            <element signature="e#16557#16558#0" expanded="true" />
+            <element signature="e#16592#16593#0" expanded="true" />
+            <element signature="e#16638#16639#0" expanded="true" />
+            <element signature="e#16688#16689#0" expanded="true" />
+            <element signature="e#16740#16741#0" expanded="true" />
+            <element signature="e#16774#16775#0" expanded="true" />
+            <element signature="e#16819#16820#0" expanded="true" />
+            <element signature="e#16867#16868#0" expanded="true" />
+            <element signature="e#16917#16918#0" expanded="true" />
+            <element signature="e#24866#24867#0" expanded="true" />
+            <element signature="e#24896#24897#0" expanded="true" />
+            <element signature="e#24953#24954#0" expanded="true" />
+            <element signature="e#24991#24992#0" expanded="true" />
+            <element signature="e#25025#25026#0" expanded="true" />
+            <element signature="e#25059#25060#0" expanded="true" />
+            <element signature="e#25091#25092#0" expanded="true" />
+            <element signature="e#25125#25126#0" expanded="true" />
+            <element signature="e#25175#25176#0" expanded="true" />
+            <element signature="e#25221#25222#0" expanded="true" />
+            <element signature="e#25265#25266#0" expanded="true" />
+            <element signature="e#25300#25301#0" expanded="true" />
+            <element signature="e#25361#25362#0" expanded="true" />
+            <element signature="e#25409#25410#0" expanded="true" />
+            <element signature="e#25445#25446#0" expanded="true" />
+            <element signature="e#25479#25480#0" expanded="true" />
+            <element signature="e#25531#25532#0" expanded="true" />
+            <element signature="e#25577#25578#0" expanded="true" />
+            <element signature="e#26563#26564#0" expanded="true" />
+            <element signature="e#26624#26625#0" expanded="true" />
+            <element signature="e#27111#27112#0" expanded="true" />
+            <element signature="e#27139#27140#0" expanded="true" />
+            <element signature="e#27178#27179#0" expanded="true" />
+            <element signature="e#27212#27213#0" expanded="true" />
+            <element signature="e#27248#27249#0" expanded="true" />
+            <element signature="e#27280#27281#0" expanded="true" />
+            <element signature="e#27330#27331#0" expanded="true" />
+            <element signature="e#27372#27373#0" expanded="true" />
+            <element signature="e#27410#27411#0" expanded="true" />
+            <element signature="e#27446#27447#0" expanded="true" />
+            <element signature="e#27502#27503#0" expanded="true" />
+            <element signature="e#27552#27553#0" expanded="true" />
+            <element signature="e#27596#27597#0" expanded="true" />
+            <element signature="e#27636#27637#0" expanded="true" />
+            <element signature="e#27702#27703#0" expanded="true" />
+            <element signature="e#27760#27761#0" expanded="true" />
+          </folding>
         </state>
       </provider>
     </entry>
@@ -1422,6 +1740,7 @@
             <option name="proportions">
               <list>
                 <option value="0.2" />
+                <option value="0.6" />
               </list>
             </option>
           </splitter-proportions>
@@ -1429,7 +1748,7 @@
       </state>
       <state key="ProjectLibrariesConfigurable.UI">
         <settings>
-          <last-edited>Maven: chesscore:chesscore:1.0-SNAPSHOT</last-edited>
+          <last-edited>Maven: com.fluxchess:jcpi:1.4.0</last-edited>
           <splitter-proportions>
             <option name="proportions">
               <list>
Index: src/main/java/tests/enginetests/EngineTestMateInThree.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package tests.enginetests;\n\nimport javacode.chessengine.search.Engine;\nimport javacode.chessprogram.chess.Chessboard;\nimport javacode.chessprogram.chess.Move;\nimport javacode.chessprogram.graphicsandui.Art;\nimport javacode.chessprogram.miscAdmin.FenParser;\nimport javacode.chessprogram.miscAdmin.MoveParserFromAN;\nimport javacode.chessprogram.moveGeneration.MoveGeneratorMaster;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.List;\n\nclass EngineTestMateInThree {\n\n    private static final int timeLimit = 10000;\n    \n    @Test\n    void test1() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"r1b1kb1r/pppp1ppp/5q2/4n3/3KP3/2N3PN/PPP4P/R1BQ1B1R b kq - 0 1\");\n        System.out.println(Art.boardArt(chessboard));\n\n        List<Move> moves = MoveGeneratorMaster.generateLegalMoves(chessboard, chessboard.isWhiteTurn());\n        System.out.println(moves);\n        Move correctMove = moves.get(11);\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        Assert.assertEquals(correctMove, move);\n    }\n\n    @Test\n    void test2() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"r3k2r/ppp2Npp/1b5n/4p2b/2B1P2q/BQP2P2/P5PP/RN5K w kq - 1 0\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Bb5+\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n    @Test\n    void test3() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"r1b3kr/ppp1Bp1p/1b6/n2P4/2p3q1/2Q2N2/P4PPP/RN2R1K1 w - - 1 0\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Qxh8+\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n    @Test\n    void test4() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"r2n1rk1/1ppb2pp/1p1p4/3Ppq1n/2B3P1/2P4P/PP1N1P1K/R2Q1RN1 b - - 0 1\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Qxf2+\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n    @Test\n    void test5() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"3q1r1k/2p4p/1p1pBrp1/p2Pp3/2PnP3/5PP1/PP1Q2K1/5R1R w - - 1 0\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Rxh7+\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n\n    @Test\n    void test6() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"4r1k1/5ppp/p2p4/4r3/1pNn4/1P6/1PPK2PP/R3R3 b - - 0 1\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Nf3+\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n\n    @Test\n    void test7() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"k2r3r/p3Rppp/1p4q1/1P1b4/3Q1B2/6N1/PP3PPP/6K1 w - - 1 0\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Rxa7+\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n    @Test\n    void test8() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"r1b5/5p2/5Npk/p1pP2q1/4P2p/1PQ2R1P/6P1/6K1 w - - 1 0\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Ng8+\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n\n    @Test\n    void test9() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"r1b2rk1/1p3pb1/2p3p1/p1B5/P3N3/1B1Q1Pn1/1PP3q1/2KR3R w - - 1 0\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Nf6+\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n\n    @Test\n    void test10theDevil() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"r1bq1rk1/p3b1np/1pp2ppQ/3nB3/3P4/2NB1N1P/PP3PP1/3R1RK1 w - - 1 0\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Ng5\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n    @Test\n    void test11() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"rk5r/2p3pp/p1p5/4N3/4P3/2q4P/P4PP1/R2Q2K1 w - - 1 0\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Rb1+\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n    @Test\n    void test12() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"r3kb1r/1b4p1/pq2pn1p/1N2p3/8/3B2Q1/PPP2PPP/2KRR3 w kq - 1 0\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Bg6+\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n\n    @Test\n    void test13() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"4rk2/5p1b/1p3R1K/p6p/2P2P2/1P6/2q4P/Q5R1 w - - 1 0\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Rxf7+\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n    @Test\n    void test14() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"8/6pk/pb5p/8/1P2qP2/P3p3/2r2PNP/1QR3K1 b - - 0 1\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"exf2+\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n\n    @Test\n    void test15() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"2bkr3/5Q1R/p2pp1N1/1p6/8/2q3P1/P4P1K/8 w - - 1 0\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Ne5\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n    @Test\n    void test16() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"r1b2nrk/1p3p1p/p2p1P2/5P2/2q1P2Q/8/PpP5/1K1R3R w - - 1 0\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Qxh7+\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n    @Test\n    void test17() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"2r5/1Nr1kpRp/p3b3/N3p3/1P3n2/P7/5PPP/K6R b - - 0 1\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Rc1+\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n    @Test\n    void test18() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"r5k1/2p2ppp/p1P2n2/8/1pP2bbQ/1B3PP1/PP1Pq2P/RNB3K1 b - - 0 1\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Qe1+\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n\n    @Test\n    void test19() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"2bqr2k/1r1n2bp/pp1pBp2/2pP1PQ1/P3PN2/1P4P1/1B5P/R3R1K1 w - - 1 0\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Ng6+\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n    @Test\n    void test20() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"rn1q3r/pp2kppp/3Np3/2b1n3/3N2Q1/3B4/PP4PP/R1B2RK1 w - - 1 0\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Rxf7+\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/tests/enginetests/EngineTestMateInThree.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/tests/enginetests/EngineTestMateInThree.java	(date 1543670486000)
@@ -1,12 +1,12 @@
 package tests.enginetests;
 
-import javacode.chessengine.search.Engine;
-import javacode.chessprogram.chess.Chessboard;
-import javacode.chessprogram.chess.Move;
-import javacode.chessprogram.graphicsandui.Art;
-import javacode.chessprogram.miscAdmin.FenParser;
-import javacode.chessprogram.miscAdmin.MoveParserFromAN;
-import javacode.chessprogram.moveGeneration.MoveGeneratorMaster;
+import com.github.louism33.axolotl.search.Engine;
+import old.chessprogram.chess.Chessboard;
+import old.chessprogram.chess.Move;
+import old.chessprogram.graphicsandui.Art;
+import old.chessprogram.miscAdmin.FenParser;
+import old.chessprogram.miscAdmin.MoveParserFromAN;
+import old.chessprogram.moveGeneration.MoveGeneratorMaster;
 import org.junit.Assert;
 import org.junit.jupiter.api.Test;
 
Index: src/main/java/tests/enginetests/BratkoKopecTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package tests.enginetests;\n\nimport javacode.chessengine.search.Engine;\nimport javacode.chessprogram.chess.Move;\nimport javacode.chessprogram.graphicsandui.Art;\nimport javacode.chessprogram.miscAdmin.ExtendedPositionDescriptionParser;\nimport org.junit.Assert;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.Parameterized;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\n\n@RunWith(Parameterized.class)\npublic class BratkoKopecTest {\n\n    private static final int timeLimit = 10000;\n\n    @Parameterized.Parameters(name = \"{index} Test: {1}\")\n    public static Collection<Object[]> data() {\n        List<Object[]> answers = new ArrayList<>();\n        for (String splitUpBK : splitUpBKs) {\n            Object[] objectAndName = new Object[2];\n            ExtendedPositionDescriptionParser.EPDObject EPDObject = ExtendedPositionDescriptionParser.parseEDPPosition(splitUpBK);\n            objectAndName[0] = EPDObject;\n            objectAndName[1] = EPDObject.getId();\n            answers.add(objectAndName);\n        }\n        return answers;\n    }\n\n\n    private static ExtendedPositionDescriptionParser.EPDObject EPDObject;\n\n    public BratkoKopecTest(Object edp, Object name) {\n        EPDObject = (ExtendedPositionDescriptionParser.EPDObject) edp;\n    }\n\n    @Test\n    public void test() {\n        WACTests.reset();\n        System.out.println(Art.boardArt(EPDObject.getBoard()));\n        Move move = new Engine().searchFixedTime(EPDObject.getBoard(), timeLimit);\n        System.out.println(move);\n\n        List<Integer> winningMoveDestination = EPDObject.getBestMoveDestinationIndex();\n        int myMoveDestination = move.destinationIndex;\n\n        Assert.assertTrue(winningMoveDestination.contains(myMoveDestination));\n    }\n\n\n    private static final String bkTests = \"\" +\n            \"1k1r4/pp1b1R2/3q2pp/4p3/2B5/4Q3/PPP2B2/2K5 b - - bm Qd1+; id \\\"BK.01\\\";\\n\" +\n            \"3r1k2/4npp1/1ppr3p/p6P/P2PPPP1/1NR5/5K2/2R5 w - - bm d5; id \\\"BK.02\\\";\\n\" +\n            \"2q1rr1k/3bbnnp/p2p1pp1/2pPp3/PpP1P1P1/1P2BNNP/2BQ1PRK/7R b - - bm f5; id \\\"BK.03\\\";\\n\" +\n            \"rnbqkb1r/p3pppp/1p6/2ppP3/3N4/2P5/PPP1QPPP/R1B1KB1R w KQkq - bm e6; id \\\"BK.04\\\";\\n\" +\n            \"r1b2rk1/2q1b1pp/p2ppn2/1p6/3QP3/1BN1B3/PPP3PP/R4RK1 w - - bm Nd5 a4; id \\\"BK.05\\\";\\n\" +\n            \"2r3k1/pppR1pp1/4p3/4P1P1/5P2/1P4K1/P1P5/8 w - - bm g6; id \\\"BK.06\\\";\\n\" +\n            \"1nk1r1r1/pp2n1pp/4p3/q2pPp1N/b1pP1P2/B1P2R2/2P1B1PP/R2Q2K1 w - - bm Nf6; id \\\"BK.07\\\";\\n\" +\n            \"4b3/p3kp2/6p1/3pP2p/2pP1P2/4K1P1/P3N2P/8 w - - bm f5; id \\\"BK.08\\\";\\n\" +\n            \"2kr1bnr/pbpq4/2n1pp2/3p3p/3P1P1B/2N2N1Q/PPP3PP/2KR1B1R w - - bm f5; id \\\"BK.09\\\";\\n\" +\n            \"3rr1k1/pp3pp1/1qn2np1/8/3p4/PP1R1P2/2P1NQPP/R1B3K1 b - - bm Ne5; id \\\"BK.10\\\";\\n\" +\n            \"2r1nrk1/p2q1ppp/bp1p4/n1pPp3/P1P1P3/2PBB1N1/4QPPP/R4RK1 w - - bm f4; id \\\"BK.11\\\";\\n\" +\n            \"r3r1k1/ppqb1ppp/8/4p1NQ/8/2P5/PP3PPP/R3R1K1 b - - bm Bf5; id \\\"BK.12\\\";\\n\" +\n            \"r2q1rk1/4bppp/p2p4/2pP4/3pP3/3Q4/PP1B1PPP/R3R1K1 w - - bm b4; id \\\"BK.13\\\";\\n\" +\n            \"rnb2r1k/pp2p2p/2pp2p1/q2P1p2/8/1Pb2NP1/PB2PPBP/R2Q1RK1 w - - bm Qd2 Qe1; id \\\"BK.14\\\";\\n\" +\n            \"2r3k1/1p2q1pp/2b1pr2/p1pp4/6Q1/1P1PP1R1/P1PN2PP/5RK1 w - - bm Qxg7+; id \\\"BK.15\\\";\\n\" +\n            \"r1bqkb1r/4npp1/p1p4p/1p1pP1B1/8/1B6/PPPN1PPP/R2Q1RK1 w kq - bm Ne4; id \\\"BK.16\\\";\\n\" +\n            \"r2q1rk1/1ppnbppp/p2p1nb1/3Pp3/2P1P1P1/2N2N1P/PPB1QP2/R1B2RK1 b - - bm h5; id \\\"BK.17\\\";\\n\" +\n            \"r1bq1rk1/pp2ppbp/2np2p1/2n5/P3PP2/N1P2N2/1PB3PP/R1B1QRK1 b - - bm Nb3; id \\\"BK.18\\\";\\n\" +\n            \"3rr3/2pq2pk/p2p1pnp/8/2QBPP2/1P6/P5PP/4RRK1 b - - bm Rxe4; id \\\"BK.19\\\";\\n\" +\n            \"r4k2/pb2bp1r/1p1qp2p/3pNp2/3P1P2/2N3P1/PPP1Q2P/2KRR3 w - - bm g4; id \\\"BK.20\\\";\\n\" +\n            \"3rn2k/ppb2rpp/2ppqp2/5N2/2P1P3/1P5Q/PB3PPP/3RR1K1 w - - bm Nh6; id \\\"BK.21\\\";\\n\" +\n            \"2r2rk1/1bqnbpp1/1p1ppn1p/pP6/N1P1P3/P2B1N1P/1B2QPP1/R2R2K1 b - - bm Bxe4; id \\\"BK.22\\\";\\n\" +\n            \"r1bqk2r/pp2bppp/2p5/3pP3/P2Q1P2/2N1B3/1PP3PP/R4RK1 b kq - bm f6; id \\\"BK.23\\\";\\n\" +\n            \"r2qnrnk/p2b2b1/1p1p2pp/2pPpp2/1PP1P3/PRNBB3/3QNPPP/5RK1 w - - bm f4; id \\\"BK.24\\\";\" +\n            \"\";\n\n    private static final String[] splitUpBKs = bkTests.split(\"\\\\\\n\");\n    static int totalBKs = splitUpBKs.length;\n\n}\n    \n\n    \n    \n    /*\n    https://www.chessprogramming.org/Bratko-Kopec_Test\n    \n1k1r4/pp1b1R2/3q2pp/4p3/2B5/4Q3/PPP2B2/2K5 b - - bm Qd1+; id \"BK.01\";\n3r1k2/4npp1/1ppr3p/p6P/P2PPPP1/1NR5/5K2/2R5 w - - bm d5; id \"BK.02\";\n2q1rr1k/3bbnnp/p2p1pp1/2pPp3/PpP1P1P1/1P2BNNP/2BQ1PRK/7R b - - bm f5; id \"BK.03\";\nrnbqkb1r/p3pppp/1p6/2ppP3/3N4/2P5/PPP1QPPP/R1B1KB1R w KQkq - bm e6; id \"BK.04\";\nr1b2rk1/2q1b1pp/p2ppn2/1p6/3QP3/1BN1B3/PPP3PP/R4RK1 w - - bm Nd5 a4; id \"BK.05\";\n2r3k1/pppR1pp1/4p3/4P1P1/5P2/1P4K1/P1P5/8 w - - bm g6; id \"BK.06\";\n1nk1r1r1/pp2n1pp/4p3/q2pPp1N/b1pP1P2/B1P2R2/2P1B1PP/R2Q2K1 w - - bm Nf6; id \"BK.07\";\n4b3/p3kp2/6p1/3pP2p/2pP1P2/4K1P1/P3N2P/8 w - - bm f5; id \"BK.08\";\n2kr1bnr/pbpq4/2n1pp2/3p3p/3P1P1B/2N2N1Q/PPP3PP/2KR1B1R w - - bm f5; id \"BK.09\";\n3rr1k1/pp3pp1/1qn2np1/8/3p4/PP1R1P2/2P1NQPP/R1B3K1 b - - bm Ne5; id \"BK.10\";\n2r1nrk1/p2q1ppp/bp1p4/n1pPp3/P1P1P3/2PBB1N1/4QPPP/R4RK1 w - - bm f4; id \"BK.11\";\nr3r1k1/ppqb1ppp/8/4p1NQ/8/2P5/PP3PPP/R3R1K1 b - - bm Bf5; id \"BK.12\";\nr2q1rk1/4bppp/p2p4/2pP4/3pP3/3Q4/PP1B1PPP/R3R1K1 w - - bm b4; id \"BK.13\";\nrnb2r1k/pp2p2p/2pp2p1/q2P1p2/8/1Pb2NP1/PB2PPBP/R2Q1RK1 w - - bm Qd2 Qe1; id \"BK.14\";\n2r3k1/1p2q1pp/2b1pr2/p1pp4/6Q1/1P1PP1R1/P1PN2PP/5RK1 w - - bm Qxg7+; id \"BK.15\";\nr1bqkb1r/4npp1/p1p4p/1p1pP1B1/8/1B6/PPPN1PPP/R2Q1RK1 w kq - bm Ne4; id \"BK.16\";\nr2q1rk1/1ppnbppp/p2p1nb1/3Pp3/2P1P1P1/2N2N1P/PPB1QP2/R1B2RK1 b - - bm h5; id \"BK.17\";\nr1bq1rk1/pp2ppbp/2np2p1/2n5/P3PP2/N1P2N2/1PB3PP/R1B1QRK1 b - - bm Nb3; id \"BK.18\";\n3rr3/2pq2pk/p2p1pnp/8/2QBPP2/1P6/P5PP/4RRK1 b - - bm Rxe4; id \"BK.19\";\nr4k2/pb2bp1r/1p1qp2p/3pNp2/3P1P2/2N3P1/PPP1Q2P/2KRR3 w - - bm g4; id \"BK.20\";\n3rn2k/ppb2rpp/2ppqp2/5N2/2P1P3/1P5Q/PB3PPP/3RR1K1 w - - bm Nh6; id \"BK.21\";\n2r2rk1/1bqnbpp1/1p1ppn1p/pP6/N1P1P3/P2B1N1P/1B2QPP1/R2R2K1 b - - bm Bxe4; id \"BK.22\";\nr1bqk2r/pp2bppp/2p5/3pP3/P2Q1P2/2N1B3/1PP3PP/R4RK1 b kq - bm f6; id \"BK.23\";\nr2qnrnk/p2b2b1/1p1p2pp/2pPpp2/1PP1P3/PRNBB3/3QNPPP/5RK1 w - - bm f4; id \"BK.24\";\n     */\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/tests/enginetests/BratkoKopecTest.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/tests/enginetests/BratkoKopecTest.java	(date 1543670486000)
@@ -1,9 +1,9 @@
 package tests.enginetests;
 
-import javacode.chessengine.search.Engine;
-import javacode.chessprogram.chess.Move;
-import javacode.chessprogram.graphicsandui.Art;
-import javacode.chessprogram.miscAdmin.ExtendedPositionDescriptionParser;
+import com.github.louism33.axolotl.search.Engine;
+import old.chessprogram.chess.Move;
+import old.chessprogram.graphicsandui.Art;
+import old.chessprogram.miscAdmin.ExtendedPositionDescriptionParser;
 import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
Index: src/main/java/tests/enginetests/QuickTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package tests.enginetests;\n\nimport javacode.chessengine.search.Engine;\nimport javacode.chessprogram.chess.Move;\nimport javacode.chessprogram.graphicsandui.Art;\nimport javacode.chessprogram.miscAdmin.ExtendedPositionDescriptionParser;\nimport org.junit.Assert;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.Parameterized;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\n\n@RunWith(Parameterized.class )\npublic class QuickTest {\n\n    private static final int timeLimit = 10000;\n    private static final Engine engine = null;\n    \n    @Parameterized.Parameters(name = \"{index} Test: {1}\")\n    public static Collection<Object[]> data() {\n        List<Object[]> answers = new ArrayList<>();\n        for (String splitUpBK : splitUpBKs) {\n            Object[] objectAndName = new Object[2];\n            ExtendedPositionDescriptionParser.EPDObject EPDObject = ExtendedPositionDescriptionParser.parseEDPPosition(splitUpBK);\n            objectAndName[0] = EPDObject;\n            objectAndName[1] = EPDObject.getId();\n            answers.add(objectAndName);\n        }\n        return answers;\n    }\n\n\n    private static ExtendedPositionDescriptionParser.EPDObject EPDObject;\n\n    public QuickTest(Object edp, Object name) {\n        EPDObject = (ExtendedPositionDescriptionParser.EPDObject) edp;\n    }\n\n    @Test\n    public void test() {\n        WACTests.reset();\n        System.out.println(Art.boardArt(EPDObject.getBoard()));\n        Move move = engine.searchFixedTime(EPDObject.getBoard(), timeLimit);\n        System.out.println(move);\n\n        List<Integer> winningMoveDestination = EPDObject.getBestMoveDestinationIndex();\n        int myMoveDestination = move.destinationIndex;\n\n        Assert.assertTrue(winningMoveDestination.contains(myMoveDestination));\n\n        List<Integer> losingMoveDestination = EPDObject.getAvoidMoveDestinationIndex();\n\n        Assert.assertFalse(losingMoveDestination.contains(myMoveDestination));\n    }\n\n\n    private static final String bkTests = \"\" +\n            \"1n1r1rk1/ppq2ppp/3p2b1/3B1NP1/4PB1R/bP2P2P/P1P5/3KQ1R1 w - - bm Qc3; id Quick-01;\\n\" +\n            \"1q6/r4pbk/1r1p2pp/B2Pn3/Q2NP3/1p3P2/6PP/1R3RK1 b - - bm Rxa5; id Quick-02;\\n\" +\n            \"3Q4/3p4/P2p4/N2b4/8/4P3/5p1p/5Kbk w - - bm Qa8; id Quick-03;\\n\" +\n            \"4qrk1/3nppb1/R1Np2p1/3P2P1/1Pr5/4B3/5Q1P/5R1K w - - bm Ra8; id Quick-04;\\n\" +\n            \"r3r3/2R2pk1/p2p1bpp/3P4/q2pQ3/5N1P/5PP1/1R4K1 w - - bm Rxf7+; id Quick-05;\\n\" +\n            \"r1b1Rbk1/pp3p2/2npN2p/2qp2p1/8/1QPB3P/PP3PPB/6K1 b - - bm Bxe6; id Quick-06;\\n\" +\n            \"r5k1/Rb4p1/2q2pBp/1pp5/1b4QN/1P2P2P/5PP1/6K1 w - - bm Rxb7; id Quick-07;\\n\" +\n            \"3R4/5r1p/5ppk/8/1Q3PPq/5P2/6K1/8 w - - bm Rg8; id Quick-08;\\n\" +\n//            \"2kr3r/ppp3pp/2pbbn2/4N3/3Pp3/2P3Pq/PP1NQP1P/R1B2RK1 w - - am Nxe4; id Quick-09;\\n\" +\n            \"2r3k1/pp1bpp1p/3p1npQ/q1r5/4P1P1/2NR1P2/PPP1N3/2K4R w - - bm g5; id Quick-10;\\n\" +\n            \"r1b2rk1/pp3p2/2p2bpQ/8/1q1P4/2N2N2/Pn3PPP/1B1RR1K1 w - - bm Bxg6; id Quick-11;\\n\" +\n            \"r2qk2r/1p1bbp2/1P2p3/p2pPp2/n2N1N1p/3PB3/5QPP/R4RK1 w kq - bm Rxa4; id Quick-12;\\n\" +\n            \"3r1n1r/1p2q1k1/p1p1P1p1/3n4/5Pp1/P5N1/1P3QP1/1BR1R1K1 w - - bm Bxg6; id Quick-13;\\n\" +\n            \"r2q1rk1/p1p3pp/b2bp3/2pp4/6p1/2NPPN2/PPP2PP1/R1BQR1K1 w - - bm Ne5; id Quick-14;\\n\" +\n            \"r2qr1k1/p2b1ppp/5n2/2pp4/5b2/NP6/PBP1NPPP/R3QRK1 b - - bm Bxh2+; id Quick-15;\\n\" +\n            \"3k4/p7/K3BP2/8/7p/8/2P4P/8 w - - bm Kb7; id Quick-16;\\n\" +\n            \"rq4k1/pp1nrppp/4bn2/6R1/3QP3/P4PN1/4B1PP/2B2RK1 w - - bm Rxg7+; id Quick-17;\\n\" +\n            \"2r4k/pb2q2P/1p6/3Pp3/4p3/1P2R3/PBrQ2PP/5RK1 w - - bm Qb4; id Quick-18;\\n\" +\n            \"5k2/6p1/2p2p2/P7/1Q6/2P1pqPP/7K/8 b - - bm c5; id Quick-19;\\n\" +\n            \"rnbq1b1r/ppp1p1pp/1n1p2k1/4P1N1/8/5Q2/PPPP1PPP/RNB1K2R b KQ - bm Qe8; id Quick-20;\\n\" +\n            \"r1b1kb1r/2q2ppp/p2ppP2/1pn3P1/3NP3/2N2Q2/PPP4P/2KR1B1R w kq - bm Bxb5+; id Quick-21;\\n\" +\n//            \"4r2k/3n3p/2q3p1/2p1p1Q1/1pP1P3/1P6/5PP1/R2B2K1 b - - am Qxe4; id Quick-22;\\n\" +\n            \"r3r1k1/1Bp1qppp/3p1n2/pNb5/2P5/PQ6/1P3PPP/R2R2K1 b - - bm Ng4; id Quick-23;\\n\" +\n            \"3B4/1R3p1k/2p4p/2Pp3r/3P4/4Q1K1/6P1/3b1q2 w - - bm Bf6; id Quick-24;\" +\n            \"\";\n\n    private static final String[] splitUpBKs = bkTests.split(\"\\\\\\n\");\n    static int totalBKs = splitUpBKs.length;\n}\n    \n    /*\n    1n1r1rk1/ppq2ppp/3p2b1/3B1NP1/4PB1R/bP2P2P/P1P5/3KQ1R1 w - - bm Qc3; id Quick-01;\n1q6/r4pbk/1r1p2pp/B2Pn3/Q2NP3/1p3P2/6PP/1R3RK1 b - - bm Rxa5; id Quick-02;\n3Q4/3p4/P2p4/N2b4/8/4P3/5p1p/5Kbk w - - bm Qa8; id Quick-03;\n4qrk1/3nppb1/R1Np2p1/3P2P1/1Pr5/4B3/5Q1P/5R1K w - - bm Ra8; id Quick-04;\nr3r3/2R2pk1/p2p1bpp/3P4/q2pQ3/5N1P/5PP1/1R4K1 w - - bm Rxf7+; id Quick-05;\nr1b1Rbk1/pp3p2/2npN2p/2qp2p1/8/1QPB3P/PP3PPB/6K1 b - - bm Bxe6; id Quick-06;\nr5k1/Rb4p1/2q2pBp/1pp5/1b4QN/1P2P2P/5PP1/6K1 w - - bm Rxb7; id Quick-07;\n3R4/5r1p/5ppk/8/1Q3PPq/5P2/6K1/8 w - - bm Rg8; id Quick-08;\n2kr3r/ppp3pp/2pbbn2/4N3/3Pp3/2P3Pq/PP1NQP1P/R1B2RK1 w - - am Nxe4; id Quick-09;\n2r3k1/pp1bpp1p/3p1npQ/q1r5/4P1P1/2NR1P2/PPP1N3/2K4R w - - bm g5; id Quick-10;\nr1b2rk1/pp3p2/2p2bpQ/8/1q1P4/2N2N2/Pn3PPP/1B1RR1K1 w - - bm Bxg6; id Quick-11;\nr2qk2r/1p1bbp2/1P2p3/p2pPp2/n2N1N1p/3PB3/5QPP/R4RK1 w kq - bm Rxa4; id Quick-12;\n3r1n1r/1p2q1k1/p1p1P1p1/3n4/5Pp1/P5N1/1P3QP1/1BR1R1K1 w - - bm Bxg6; id Quick-13;\nr2q1rk1/p1p3pp/b2bp3/2pp4/6p1/2NPPN2/PPP2PP1/R1BQR1K1 w - - bm Ne5; id Quick-14;\nr2qr1k1/p2b1ppp/5n2/2pp4/5b2/NP6/PBP1NPPP/R3QRK1 b - - bm Bxh2+; id Quick-15;\n3k4/p7/K3BP2/8/7p/8/2P4P/8 w - - bm Kb7; id Quick-16;\nrq4k1/pp1nrppp/4bn2/6R1/3QP3/P4PN1/4B1PP/2B2RK1 w - - bm Rxg7+; id Quick-17;\n2r4k/pb2q2P/1p6/3Pp3/4p3/1P2R3/PBrQ2PP/5RK1 w - - bm Qb4; id Quick-18;\n5k2/6p1/2p2p2/P7/1Q6/2P1pqPP/7K/8 b - - bm c5; id Quick-19;\nrnbq1b1r/ppp1p1pp/1n1p2k1/4P1N1/8/5Q2/PPPP1PPP/RNB1K2R b KQ - bm Qe8; id Quick-20;\nr1b1kb1r/2q2ppp/p2ppP2/1pn3P1/3NP3/2N2Q2/PPP4P/2KR1B1R w kq - bm Bxb5+; id Quick-21;\n4r2k/3n3p/2q3p1/2p1p1Q1/1pP1P3/1P6/5PP1/R2B2K1 b - - am Qxe4; id Quick-22;\nr3r1k1/1Bp1qppp/3p1n2/pNb5/2P5/PQ6/1P3PPP/R2R2K1 b - - bm Ng4; id Quick-23;\n3B4/1R3p1k/2p4p/2Pp3r/3P4/4Q1K1/6P1/3b1q2 w - - bm Bf6; id Quick-24;\n     */
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/tests/enginetests/QuickTest.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/tests/enginetests/QuickTest.java	(date 1543670485000)
@@ -1,9 +1,9 @@
 package tests.enginetests;
 
-import javacode.chessengine.search.Engine;
-import javacode.chessprogram.chess.Move;
-import javacode.chessprogram.graphicsandui.Art;
-import javacode.chessprogram.miscAdmin.ExtendedPositionDescriptionParser;
+import com.github.louism33.axolotl.search.Engine;
+import old.chessprogram.chess.Move;
+import old.chessprogram.graphicsandui.Art;
+import old.chessprogram.miscAdmin.ExtendedPositionDescriptionParser;
 import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
Index: src/main/java/tests/enginetests/EngineTestMateInFour.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package tests.enginetests;\n\nimport javacode.chessengine.search.Engine;\nimport javacode.chessprogram.chess.Chessboard;\nimport javacode.chessprogram.chess.Move;\nimport javacode.chessprogram.graphicsandui.Art;\nimport javacode.chessprogram.miscAdmin.FenParser;\nimport javacode.chessprogram.miscAdmin.MoveParserFromAN;\nimport javacode.chessprogram.moveGeneration.MoveGeneratorMaster;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.List;\n\nclass EngineTestMateInFour {\n\n\n    private static final int timeLimit = 20000;\n    \n    @Test\n    void test1() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"r5rk/2p1Nppp/3p3P/pp2p1P1/4P3/2qnPQK1/8/R6R w - - 1 0\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"hxg7+\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n    @Test\n    void test2() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"1r2k1r1/pbppnp1p/1b3P2/8/Q7/B1PB1q2/P4PPP/3R2K1 w - - 1 0\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Qxd7+\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n    @Test\n    void test3Hades() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"Q7/p1p1q1pk/3p2rp/4n3/3bP3/7b/PP3PPK/R1B2R2 b - - 0 1\");\n        System.out.println(Art.boardArt(chessboard));\n\n        List<Move> moves = MoveGeneratorMaster.generateLegalMoves(chessboard, chessboard.isWhiteTurn());\n        System.out.println(moves);\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Bxg2\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n    @Test\n    void test4() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"r1bqr3/ppp1B1kp/1b4p1/n2B4/3PQ1P1/2P5/P4P2/RN4K1 w - - 1 0\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Qe5\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n    @Test\n    void test5Meanie() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"r1b3kr/3pR1p1/ppq4p/5P2/4Q3/B7/P5PP/5RK1 w - - 1 0\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Rxg7\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n    @Test\n    void test6() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"2k4r/1r1q2pp/QBp2p2/1p6/8/8/P4PPP/2R3K1 w - - 1 0\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Qa8\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n    @Test\n    void test7() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"6kr/pp2r2p/n1p1PB1Q/2q5/2B4P/2N3p1/PPP3P1/7K w - - 1 0\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Qg7\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n    @Test\n    void test8() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"r3k3/pbpqb1r1/1p2Q1p1/3pP1B1/3P4/3B4/PPP4P/5RK1 w - - 1 0\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Bxg6\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n    @Test\n    void test9() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"8/6R1/p2kp2r/qb5P/3p1N1Q/1p1Pr3/PP6/1K5R w - - 1 0\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Qe7+\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n    @Test\n    void test10Cruelty() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"r5nr/6Rp/p1NNkp2/1p3b2/2p5/5K2/PP2P3/3R4 w - - 1 0\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Nxf5\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n\n    @Test\n    void test11() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"2b2k2/2p2r1p/p2pR3/1p3PQ1/3q3N/1P6/2P3PP/5K2 w - - 1 0\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Ng6+\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n    \n    \n    @Test\n    void test12() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"1Qb2b1r/1p1k1p1p/3p1p2/3p4/p2NPP2/1R6/q1P3PP/4K2R w K - 0 1\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Rxb7+\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n    @Test\n    void test13() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"3r2k1/3q2p1/1b3p1p/4p3/p1R1P2N/Pr5P/1PQ3P1/5R1K b - - 0 1\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Rxh3+\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n    @Test\n    void test14() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"3r2k1/pp5p/6p1/2Ppq3/4Nr2/4B2b/PP2P2K/R1Q1R2B b - - 0 1\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Rf2+\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n    @Test\n    void test15() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"1q1N4/3k1BQp/5r2/5p2/3P3P/8/3B1PPb/3n3K w - - 1 0\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Be6+\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n    @Test\n    void test16() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"3r1rk1/ppqn3p/1npb1P2/5B2/2P5/2N3B1/PP2Q1PP/R5K1 w - - 1 0\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Qg4+\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n\n    @Test\n    void test17() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"2r1k3/2P3R1/3P2K1/6N1/8/8/8/3r4 w - - 1 0\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Re7+\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n\n    @Test\n    void test18() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"r1b2k1r/pppp4/1bP2qp1/5pp1/4pP2/1BP5/PBP3PP/R2Q1R1K b - - 0 1\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Rxh2+\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n    @Test\n    void test19() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"rr2k3/5p2/p1bppPpQ/2p1n1P1/1q2PB2/2N4R/PP4BP/6K1 w - - 1 0\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Qf8+\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n\n    @Test\n    void test20() {\n        Chessboard chessboard = FenParser.makeBoardBasedOnFEN(\"2r1rk2/p1q3pQ/4p3/1pppP1N1/7p/4P2P/PP3P2/1K4R1 w - - 1 0\");\n        System.out.println(Art.boardArt(chessboard));\n\n        Move move = new Engine().searchFixedTime(chessboard, timeLimit);\n        System.out.println(move);\n\n        int moveToWin = MoveParserFromAN.destinationIndex(chessboard, \"Nxe6+\");\n        int destination = move.destinationIndex;\n        Assert.assertEquals(moveToWin, destination);\n    }\n    \n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/tests/enginetests/EngineTestMateInFour.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/tests/enginetests/EngineTestMateInFour.java	(date 1543670486000)
@@ -1,12 +1,12 @@
 package tests.enginetests;
 
-import javacode.chessengine.search.Engine;
-import javacode.chessprogram.chess.Chessboard;
-import javacode.chessprogram.chess.Move;
-import javacode.chessprogram.graphicsandui.Art;
-import javacode.chessprogram.miscAdmin.FenParser;
-import javacode.chessprogram.miscAdmin.MoveParserFromAN;
-import javacode.chessprogram.moveGeneration.MoveGeneratorMaster;
+import com.github.louism33.axolotl.search.Engine;
+import old.chessprogram.chess.Chessboard;
+import old.chessprogram.chess.Move;
+import old.chessprogram.graphicsandui.Art;
+import old.chessprogram.miscAdmin.FenParser;
+import old.chessprogram.miscAdmin.MoveParserFromAN;
+import old.chessprogram.moveGeneration.MoveGeneratorMaster;
 import org.junit.Assert;
 import org.junit.jupiter.api.Test;
 
Index: src/main/java/tests/enginetests/ArasanTestSuite.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package tests.enginetests;\n\nimport javacode.chessengine.search.Engine;\nimport javacode.chessprogram.chess.Move;\nimport javacode.chessprogram.graphicsandui.Art;\nimport javacode.chessprogram.miscAdmin.ExtendedPositionDescriptionParser;\nimport org.junit.Assert;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.Parameterized;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\n\n@RunWith(Parameterized.class)\npublic class ArasanTestSuite {\n\n    private static final int timeLimit = 10000;\n\n    @Parameterized.Parameters(name = \"{index} Test: {1}\")\n    public static Collection<Object[]> data() {\n        List<Object[]> answers = new ArrayList<>();\n        for (String splitUpArasan : splitUpArasan) {\n            Object[] objectAndName = new Object[2];\n            ExtendedPositionDescriptionParser.EPDObject EPDObject = ExtendedPositionDescriptionParser.parseEDPPosition(splitUpArasan);\n            objectAndName[0] = EPDObject;\n            objectAndName[1] = EPDObject.getId();\n            answers.add(objectAndName);\n        }\n        return answers;\n    }\n\n\n    private static ExtendedPositionDescriptionParser.EPDObject EPDObject;\n\n    public ArasanTestSuite(Object edp, Object name) {\n        EPDObject = (ExtendedPositionDescriptionParser.EPDObject) edp;\n    }\n\n    @Test\n    public void test() {\n        WACTests.reset();\n        System.out.println(Art.boardArt(EPDObject.getBoard()));\n        Move move = new Engine().searchFixedTime(EPDObject.getBoard(), timeLimit);\n        System.out.println(move);\n\n        List<Integer> winningMoveDestination = EPDObject.getBestMoveDestinationIndex();\n        int myMoveDestination = move.destinationIndex;\n\n        Assert.assertTrue(winningMoveDestination.contains(myMoveDestination));\n        \n    }\n\n\n    private static final String arasanTests = \"\" +\n            \"r1bq1r1k/p1pnbpp1/1p2p3/6p1/3PB3/5N2/PPPQ1PPP/2KR3R w - - bm g4; id \\\"arasan20.1\\\"; \\n\" +\n            \"r1b2rk1/1p1nbppp/pq1p4/3B4/P2NP3/2N1p3/1PP3PP/R2Q1R1K w - - bm Rxf7; id \\\"arasan20.2\\\";\\n\" +\n            \"r1q1k2r/1p1nbpp1/2p2np1/p1Pp4/3Pp3/P1N1P1P1/1P1B1P1P/R2QRBK1 b kq - bm Bxc5; id \\\"arasan20.3\\\";\\n\" +\n            \"2rr3k/2qnbppp/p1n1p3/1p1pP3/3P1N2/1Q1BBP2/PP3P1P/1KR3R1 w - - bm Bxh7; id \\\"arasan20.4\\\";\\n\" +\n            \"3q1r1k/1b3ppp/p1n5/1p1pPB2/2rP4/P6N/1P2Q1PP/R4RK1 w - - bm Qh5; id \\\"arasan20.5\\\"; \\n\" +\n            \"r1b1k2r/1p1pppb1/p5pp/3P4/q2p1B2/3P1Q2/PPP2PPP/R3R1K1 w kq - bm Rxe7+; id \\\"arasan20.6\\\"; \\n\" +\n            \"R4bk1/2Bbp2p/2p2pp1/1rPp4/3P4/4P2P/4BPPK/1q1Q4 w - - bm Qa4; id \\\"arasan20.7\\\"; \\n\" +\n            \"r1r3k1/p3bppp/2bp3Q/q2pP1P1/1p1BP3/8/PPP1B2P/2KR2R1 w - - bm e6; id \\\"arasan20.8\\\"; \\n\" +\n            \"b2rk1r1/p3q3/2p5/3nPR2/3P2pp/1R1B2P1/P1Q2P2/6K1 w - - bm Bc4; id \\\"arasan20.9\\\"; \\n\" +\n            \"r2q3r/1p1bbQ2/4p1Bk/3pP3/1n1P1P1p/pP6/Pn4PP/R1B1R1K1 w - - bm g4; id \\\"arasan20.10\\\"; \\n\" +\n            \"1r2brk1/4n1p1/4p2p/p2pP1qP/2pP1NP1/P1Q1BK2/2P4R/6R1 b - - bm Bg6; id \\\"arasan20.11\\\";\\n\" +\n            \"1rb2k1r/2q2pp1/p2b3p/2n3B1/2QN4/3B4/PpP3PP/1K2R2R w - - bm Bd8; id \\\"arasan20.12\\\";\\n\" +\n            \"5rk1/1pp3p1/3ppr1p/pP2p2n/4P2q/P2PQ2P/2P1NPP1/R4RK1 b - - bm Rf3; id \\\"arasan20.13\\\"; \\n\" +\n            \"r4rk1/1b1n1pb1/3p2p1/1p1Pq1Bp/2p1P3/2P2RNP/1PBQ2P1/5R1K w - - bm Nf5; id \\\"arasan20.14\\\";\\n\" +\n            \"2kr2r1/ppq1bp1p/4pn2/2p1n1pb/4P1P1/2P2N1P/PPBNQP2/R1B1R1K1 b - - bm Nfxg4; id \\\"arasan20.15\\\";\\n\" +\n            \"8/3r4/pr1Pk1p1/8/7P/6P1/3R3K/5R2 w - - bm Re2+; id \\\"arasan20.16\\\"; \\n\" +\n            \"3r1rk1/q4pp1/n1bNp2p/p7/pn2P1N1/6P1/1P1Q1PBP/2RR2K1 w - - bm Nxh6+ e5; id \\\"arasan20.17\\\";\\n\" +\n            \"r1q2rk1/ppnbbpp1/n4P1p/4P3/3p4/2N1B1PP/PP4BK/R2Q1R2 w - - bm Bxh6; id \\\"arasan20.18\\\"; \\n\" +\n            \"1R6/5p1k/4bPpp/3pN3/2pP1P1P/2r5/6PK/8 w - - bm h5; id \\\"arasan20.19\\\"; \\n\" +\n            \"3q1rk1/pr1b1p1p/1bp2p2/2ppP3/8/2P1BN2/PPQ3PP/R4RK1 w - - bm Bh6; id \\\"arasan20.20\\\"; \\n\" +\n            \"8/5pk1/p4npp/1pPN4/1P2p3/1P4PP/5P2/5K2 w - - bm Nxf6; id \\\"arasan20.21\\\"; \\n\" +\n            \"8/6p1/P1b1pp2/2p1p3/1k4P1/3PP3/1PK5/5B2 w - - bm Bg2; id \\\"arasan20.22\\\"; \\n\" +\n            \"r5n1/p1p1q2k/4b2p/3pB3/3PP1pP/8/PPPQ2P1/5RK1 w - - bm Qf4; id \\\"arasan20.23\\\"; \\n\" +\n            \"2b2rk1/r3q1pp/1nn1p3/3pP1NP/p1pP2Q1/2P1N3/1P1KBP2/R5R1 w - - bm Nxh7; id \\\"arasan20.24\\\";\\n\" +\n            \"rnb3k1/p3qpr1/2p1p3/2NP3p/1pP3p1/3BQ3/P4PP1/4RRK1 w - - bm Qd4; id \\\"arasan20.25\\\"; \\n\" +\n            \"r3r1k1/p3bppp/q1b2n2/5Q2/1p1B4/1BNR4/PPP3PP/2K2R2 w - - bm Rg3; id \\\"arasan20.26\\\"; ;\\n\" +\n            \"2bq1rk1/rpb2p2/2p1p1p1/p1N3Np/P2P1P1P/1Q2R1P1/1P3P2/3R2K1 w - - bm f5; id \\\"arasan20.27\\\"; \\n\" +\n            \"3q1r1k/2r2pp1/p6p/1pbppP1N/3pP1PP/3P1Q2/PPP4R/5RK1 w - - bm g5; id \\\"arasan20.28\\\";\\n\" +\n            \"1q6/6k1/5Np1/1r4Pp/2p4P/2Nrb3/PP6/KR5Q b - - bm Bd4; id \\\"arasan20.29\\\";\\n\" +\n            \"b2rk3/r4p2/p3p3/P3Q1Np/2Pp3P/8/6P1/6K1 w - - bm Qh8+; id \\\"arasan20.30\\\";\\n\" +\n            \"2kr1b1r/1pp1ppp1/p7/q2P3n/2BB1pb1/2NQ4/P1P1N3/1R3RK1 w - - bm Rxb7; id \\\"arasan20.31\\\"; \\n\" +\n            \"r4rkq/1ppb4/3P2n1/1N1Pp3/P3Pbn1/3B1NP1/1P2QB2/R4RK1 b - - bm Rf7; id \\\"arasan20.32\\\"; \\n\" +\n            \"br4k1/1qrnbppp/pp1ppn2/8/NPPBP3/PN3P2/5QPP/2RR1B1K w - - bm Nxb6; id \\\"arasan20.33\\\"; \\n\" +\n            \"r2q1rk1/ppp2p2/3p1np1/4pNQ1/4P1pP/1PPP4/1P3P2/R3K1R1 w Q - bm Qh6; id \\\"arasan20.34\\\";\\n\" +\n            \"1qb2rk1/3p1pp1/1p6/1pbBp3/r5p1/3QB3/PPP2P1P/2KR2R1 w - - bm b3; id \\\"arasan20.35\\\";\\n\" +\n            \"r1b2q1k/2Qn1p1p/1p1Rpp2/p6B/4P2P/6N1/P4PP1/6K1 w - - bm e5; id \\\"arasan20.36\\\"; \\n\" +\n            \"r2q1rk1/p2pn3/bpp2p1p/3Nb1pQ/7B/8/PPB2PPP/R3R1K1 w - - bm Bxg5; id \\\"arasan20.37\\\"; \\n\" +\n            \"r4rk1/p4ppp/qp2p3/b5B1/n1R5/5N2/PP2QPPP/1R4K1 w - - bm Bf6; id \\\"arasan20.38\\\"; \\n\" +\n            \"r2q1rk1/4bppp/3pb3/2n1pP2/1p2P1PP/1P3Q2/1BP1N1B1/2KR3R b - - bm Ra2; id \\\"arasan20.39\\\";\\n\" +\n            \"2r2rkb/1Q1b3p/p2p3q/2PPnp2/1P2p1p1/2N5/P3BPPB/4RRK1 b - - bm e3; id \\\"arasan20.40\\\"; \\n\" +\n            \"2b1rk2/5p2/p1P5/2p2P2/2p5/7B/P7/2KR4 w - - bm f6; id \\\"arasan20.41\\\";\\n\" +\n            \"rn1qr1k1/1p2bppp/p3p3/3pP3/P2P1B2/2RB1Q1P/1P3PP1/R5K1 w - - bm Bxh7+; id \\\"arasan20.42\\\"; \\n\" +\n            \"1k4rr/p1pq2b1/1p6/1P1pp1p1/6n1/2PP2QN/PN1BP1B1/5RK1 b - - bm e4; id \\\"arasan20.43\\\";\\n\" +\n            \"1n3rk1/3rbppp/p2p4/4pP2/Ppq1P3/1N2B3/1PP3PP/R2Q1R1K w - - bm f6; id \\\"arasan20.44\\\"; \\n\" +\n            \"8/2p1k3/3p3p/2PP1pp1/1P1K1P2/6P1/8/8 w - - bm g4; id \\\"arasan20.45\\\"; \\n\" +\n            \"r1b2rk1/pp2bppp/3p4/q7/3BN1n1/1B3Q2/PPP3PP/R4RK1 w - - bm Qxf7+; id \\\"arasan20.46\\\"; \\n\" +\n            \"r1b1rk2/p1pq2p1/1p1b1p1p/n2P4/2P1NP2/P2B1R2/1BQ3PP/R6K w - - bm Nxf6; id \\\"arasan20.47\\\"; \\n\" +\n            \"r2qr3/2p1b1pk/p5pp/1p2p3/nP2P1P1/1BP2RP1/P3QPK1/R1B5 w - - bm Bxh6; id \\\"arasan20.48\\\"; \\n\" +\n            \"1rbq1rk1/p5bp/3p2p1/2pP4/1p1n1BP1/3P3P/PP2N1B1/1R1Q1RK1 b - - bm Bxg4; id \\\"arasan20.49\\\"; \\n\" +\n            \"k1b4r/1p3p2/pq2pNp1/5n1p/P3QP2/1P1R1BPP/2P5/1K6 b - - am Nxg3; id \\\"arasan20.50\\\";  \\n\" +\n            \"7b/8/kq6/8/8/1N2R3/K2P4/8 w - - bm Nd4; id \\\"arasan20.51\\\";  \\n\" +\n            \"q3nrk1/4bppp/3p4/r3nPP1/4P2P/NpQ1B3/1P4B1/1K1R3R b - - bm Nc7; id \\\"arasan20.52\\\";  \\n\" +\n            \"2r5/8/6k1/P1p3p1/2R5/1P1q4/1K4Q1/8 w - - bm a6; id \\\"arasan20.53\\\";  \\n\" +\n            \"8/3R1P2/1ppP1p2/3r4/8/K7/p4k2/8 w - - bm Kb2; id \\\"arasan20.54\\\";  \\n\" +\n            \"2qrrbk1/1b3ppp/pn1Pp3/6P1/1Pp2B2/1nN2NQB/1P3P1P/3RR1K1 w - - bm g6; id \\\"arasan20.55\\\";  \\n\" +\n            \"r1q1nrk1/3nb2p/3p2p1/p5P1/1pbNPB2/1N6/PPPQ4/2KR1B1R w - - bm Nf5; id \\\"arasan20.56\\\";  \\n\" +\n            \"5rk1/pp3ppp/3q4/8/2Pp2b1/P5Pn/PBQPr1BP/4RR1K b - - bm Rxg2; id \\\"arasan20.57\\\";  \\n\" +\n            \"3b3r/1q3pk1/4b2p/3pPppQ/R1pP1P1P/1rP1N1P1/6N1/2R3K1 w - - bm g4; id \\\"arasan20.58\\\";  \\n\" +\n            \"r1b2rk1/pp1p2pR/8/1pb2p2/5N2/7Q/qPPB1PPP/6K1 w - - bm g3; id \\\"arasan20.59\\\";  \\n\" +\n            \"7q/3k2p1/n1p1p1Pr/1pPpPpQ1/3P1N1p/1P2KP2/6P1/7R w - - bm Nxd5; id \\\"arasan20.60\\\";  \\n\" +\n            \"5rk1/8/pqPp1r1p/1p1Pp1bR/4B3/5PP1/PP2Q1K1/R7 w - - bm Rxg5+; id \\\"arasan20.61\\\";  \\n\" +\n            \"3r2k1/pb3Np1/4pq1p/2pp1n2/3P4/1PQ5/P4PPP/R2R2K1 b - - bm Nxd4; id \\\"arasan20.62\\\";  \\n\" +\n            \"2kr1r2/ppq1b1p1/2n5/2PpPb1N/QP1B1pp1/2P5/P2N1P1P/R4RK1 b - - bm Rh8; id \\\"arasan20.63\\\";  \\n\" +\n            \"r1r2k2/pp2bpp1/2bppn1p/6B1/2qNPPPP/2N5/PPPQ4/1K1RR3 w - - bm f5; id \\\"arasan20.64\\\";  \\n\" +\n            \"3r2k1/6p1/B1R2p1p/1pPr1P2/3P4/8/1P3nP1/2KR4 w - - bm Rc8; id \\\"arasan20.65\\\";  \\n\" +\n            \"3qb1k1/5rb1/r3p1Np/1n1pP2P/p1pB1PQ1/2P5/R1B4K/6R1 w - - bm Bc5; id \\\"arasan20.66\\\";  \\n\" +\n            \"3q1k2/p4pb1/3Pp3/p3P3/r6p/2QB3P/3B1P2/6K1 w - - bm Bb5; id \\\"arasan20.67\\\";  \\n\" +\n            \"r4r1k/ppqbn1pp/3b1p2/2pP3B/2P4N/7P/P2B1PP1/1R1QR1K1 w - - bm Rxe7; id \\\"arasan20.68\\\";  \\n\" +\n            \"1r4k1/1q3pp1/r3b2p/p2N4/3R4/QP3P2/2P3PP/1K1R4 w - - bm Nf6+; id \\\"arasan20.69\\\";  \\n\" +\n            \"r2q1r2/1bp1npk1/3p1p1p/p3p2Q/P3P2N/1BpPP3/1P1N2PP/5RK1 w - - bm Rf3; id \\\"arasan20.70\\\";  \\n\" +\n            \"2r3k1/1bp3pp/pp1pNn1r/3P1p1q/1PP1pP2/P3P1P1/3Q3P/2RR1BK1 w - - bm c5; id \\\"arasan20.71\\\";  \\n\" +\n            \"2r3r1/1p1qb2k/p5pp/2n1Bp2/2RP3P/1P2PNQ1/5P1K/3R4 w - - bm Ng5+; id \\\"arasan20.72\\\";  \\n\" +\n            \"rn3rk1/pp1q3p/4p1B1/2p5/3N1b2/4B3/PPQ2PPP/3R2K1 w - - bm Nf5; id \\\"arasan20.73\\\";  \\n\" +\n            \"rr5k/1q2pPbp/3p2p1/PbpP4/1nB1nP1Q/1NB5/1P4PP/R4R1K w - - bm f5; id \\\"arasan20.74\\\";  \\n\" +\n            \"r4rk1/pp1qbppp/1n6/6R1/P1pP4/5Q1P/2B2PP1/2B2RK1 w - - bm Rxg7+; id \\\"arasan20.75\\\";  \\n\" +\n            \"1r4k1/p7/2P1n1pp/5p2/2QPqP2/PN2p3/5P1P/4RK2 b - - bm Rc8; id \\\"arasan20.76\\\";  \\n\" +\n            \"1qrrbbk1/1p1nnppp/p3p3/4P3/2P5/1PN1N3/PB2Q1PP/1B2RR1K w - - bm Bxh7+; id \\\"arasan20.77\\\";  \\n\" +\n            \"r1b2rk1/qp5p/p1n1ppp1/7N/4P1P1/2N1pP2/PPP5/2KR1QR1 w - - bm e5; id \\\"arasan20.78\\\";  \\n\" +\n            \"3r4/2q5/5pk1/p3n1p1/N3Pp1p/1PPr1P1P/2Q1R1P1/5R1K b - - bm g4; id \\\"arasan20.79\\\";  \\n\" +\n            \"1q2r1k1/3R1pb1/3R2p1/7p/p3N3/2P1BP1P/1P3PK1/8 b - - bm Rxe4; id \\\"arasan20.80\\\";  \\n\" +\n            \"r1b1k2r/2q2pp1/p1p1pn2/2b4p/Pp2P3/3B3P/1PP1QPP1/RNB2RK1 b kq - bm Ng4; id \\\"arasan20.81\\\";  \\n\" +\n            \"2r1rb1k/ppq2pp1/4b2p/3pP2Q/5B2/2PB2R1/P4PPP/1R4K1 w - - bm Rxg7; id \\\"arasan20.82\\\";  \\n\" +\n            \"6k1/p4qp1/1p3r1p/2pPp1p1/1PP1PnP1/2P1KR1P/1B6/7Q b - - bm h5; id \\\"arasan20.83\\\";  \\n\" +\n            \"rnb1kb1r/pp1p1ppp/1q2p3/8/3NP1n1/2N1B3/PPP2PPP/R2QKB1R w KQkq - bm Qxg4; id \\\"arasan20.84\\\";\\n\" +\n            \"r3kb1r/1b1n2p1/p3Nn1p/3Pp3/1p4PP/3QBP2/qPP5/2KR1B1R w kq - bm Qg6+; id \\\"arasan20.85\\\";  \\n\" +\n            \"1r1qrbk1/pb3p2/2p1pPpp/1p4B1/2pP2PQ/2P5/P4PBP/R3R1K1 w - - bm Bxh6; id \\\"arasan20.86\\\";  \\n\" +\n            \"2r1r2k/1b1n1p1p/p3pPp1/1p1pP2q/3N4/P3Q1P1/1PP4P/2KRRB2 w - - bm g4; id \\\"arasan20.87\\\";  \\n\" +\n            \"2r1b1k1/5p2/1R2nB2/1p2P2p/2p5/2Q1P2K/3R1PB1/r3q3 w - - bm Rxe6; id \\\"arasan20.88\\\";  \\n\" +\n            \"rn2r1k1/ppq1pp1p/2b2bp1/8/2BNPP1B/2P4P/P1Q3P1/1R3RK1 w - - bm Bxf7+; id \\\"arasan20.89\\\";  \\n\" +\n            \"1kr5/1p3p2/q3p3/pRbpPp2/P1rNnP2/2P1B1Pp/1P2Q2P/R5K1 b - - bm Bxd4; id \\\"arasan20.90\\\";  \\n\" +\n            \"r3r2k/1pq2pp1/4b2p/3pP3/p1nB3P/P2B1RQ1/1PP3P1/3R3K w - - bm Rf6; id \\\"arasan20.91\\\";  \\n\" +\n            \"r3brk1/2q1bp1p/pnn3p1/1p1pP1N1/3P4/3B2P1/PP1QNR1P/R1B3K1 w - - bm Nxh7; id \\\"arasan20.92\\\";  \\n\" +\n            \"1r3r2/q5k1/4p1n1/1bPpPp1p/pPpR1Pp1/P1B1Q3/2B3PP/3R2K1 w - - bm Rxd5; id \\\"arasan20.93\\\";  \\n\" +\n            \"rq3rk1/1b1n1ppp/ppn1p3/3pP3/5B2/2NBP2P/PP2QPP1/2RR2K1 w - - bm Nxd5; id \\\"arasan20.94\\\";  \\n\" +\n            \"7r/k4pp1/pn2p1pr/2ppP3/1q3P2/1PN2R1P/P1P2QP1/3R3K w - - bm a3; id \\\"arasan20.95\\\";  \\n\" +\n            \"1r3rk1/3bbppp/1qn2P2/p2pP1P1/3P4/2PB1N2/6K1/qNBQ1R2 w - - bm Bxh7+; id \\\"arasan20.96\\\";  \\n\" +\n            \"1r1qrbk1/5ppp/2b1p2B/2npP3/1p4QP/pP1B1N2/P1P2PP1/1K1R3R w - - bm Bxh7+; id \\\"arasan20.97\\\";  \\n\" +\n            \"r5k1/pbpq1pp1/3b2rp/N3n3/1N6/2P3B1/PP1Q1PPP/R4RK1 b - - bm Rxg3; id \\\"arasan20.98\\\";  \\n\" +\n            \"1r2r1k1/2R2p2/1N1Rp2p/p2b3P/4pPP1/8/P4K2/8 w - - bm g5; id \\\"arasan20.99\\\";  \\n\" +\n            \"r4r2/pp1b1ppk/2n1p3/3pPnB1/q1pP2QP/P1P4R/2PKNPP1/R7 w - - bm Qh5+; id \\\"arasan20.100\\\";  \\n\" +\n            \"8/2k2Bp1/2n5/p1P4p/4pPn1/P3PqPb/1r1BQ2P/2R1K1R1 b - - bm Nce5; id \\\"arasan20.101\\\";  \\n\" +\n            \"8/5kpp/8/8/8/5P2/1RPK2PP/6r1 w - - bm c4; id \\\"arasan20.102\\\";  \\n\" +\n            \"r3rnk1/pp2ppb1/1np3p1/3qP2p/3P1B2/4Q1N1/PP2BPP1/1K1R3R w - - bm Bh6; id \\\"arasan20.103\\\";  \\n\" +\n            \"1r1q2k1/2r3bp/B2p1np1/3P1p2/R1P1pP2/4B2P/P5PK/3Q1R2 b - - bm Ng4+; id \\\"arasan20.104\\\";  \\n\" +\n            \"2r1rnk1/1p2pp1p/p1np2p1/q4PP1/3NP2Q/4B2R/PPP4P/3R3K w - - bm b4; id \\\"arasan20.105\\\";  \\n\" +\n            \"2b2qk1/1r4pp/2p1p3/p2n1PPB/2p4P/2p5/P4Q2/4RRK1 w - - bm Qg3; id \\\"arasan20.106\\\";  \\n\" +\n            \"1r1rkb2/2q2p2/p2p1P1B/P1pPp2Q/2P3b1/1P6/2B3PP/5R1K w - - bm Qxg4; id \\\"arasan20.107\\\";  \\n\" +\n            \"r4rk1/3b3p/p1pb4/1p1n2p1/2P2p2/1B1P2Pq/PP1NRP1P/R1BQ2K1 w - - bm Qf1; id \\\"arasan20.108\\\";  \\n\" +\n            \"1r3rk1/4bpp1/p3p2p/q1PpPn2/bn3Q1P/1PN1BN2/2P1BPP1/1KR2R2 b - - bm Bxb3; id \\\"arasan20.109\\\";  \\n\" +\n            \"2nb2k1/1rqb1pp1/p2p1n1p/2pPp3/P1P1P3/2B1NN1P/2B2PP1/Q3R2K w - - bm Nxe5; id \\\"arasan20.110\\\";  \\n\" +\n            \"3r2k1/p1qn1p1p/4p1p1/2p1N3/8/2P3P1/PP2QP1P/4R1K1 w - - bm Nxf7; id \\\"arasan20.111\\\";  \\n\" +\n            \"r2q1rk1/pb1nbp1p/1pp1pp2/8/2BPN2P/5N2/PPP1QPP1/2KR3R w - - bm Nfg5; id \\\"arasan20.112\\\";  \\n\" +\n            \"4rr2/3bp1bk/p2q1np1/2pPp2p/2P4P/1R4N1/1P1BB1P1/1Q3RK1 w - - bm Bxh5; id \\\"arasan20.113\\\";  \\n\" +\n            \"8/8/4b1p1/2Bp3p/5P1P/1pK1Pk2/8/8 b - - bm g5 d4+; id \\\"arasan20.114\\\";  \\n\" +\n            \"8/5p2/3p2p1/1bk4p/p2pBNnP/P5P1/1P3P2/4K3 b - - bm d3; id \\\"arasan20.115\\\";  \\n\" +\n            \"8/4nk2/1p3p2/1r1p2pp/1P1R1N1P/6P1/3KPP2/8 w - - bm Nd3; id \\\"arasan20.116\\\";  \\n\" +\n            \"6k1/1bq1bpp1/p6p/2p1pP2/1rP1P1P1/2NQ4/2P4P/K2RR3 b - - bm Bd5; id \\\"arasan20.117\\\";  \\n\" +\n            \"r3r1k1/1bqnbp1p/pp1pp1p1/6P1/Pn2PP1Q/1NN1BR2/1PPR2BP/6K1 w - - bm Rh3; id \\\"arasan20.118\\\";  \\n\" +\n            \"4rrk1/1pp1n1pp/1bp1P2q/p4p2/P4P2/3R2N1/1PP2P1P/2BQRK2 w - - bm Nh5; id \\\"arasan20.119\\\";  \\n\" +\n            \"3q4/4k3/1p1b1p1r/p2Q4/3B1p1p/7P/1P4P1/3R3K w - - bm b4; id \\\"arasan20.120\\\";  \\n\" +\n            \"8/5p1k/6p1/1p1Q3p/3P4/1R2P1KP/6P1/r4q2 b - - bm h4+; id \\\"arasan20.121\\\";  \\n\" +\n            \"7k/3q1pp1/1p3r2/p1bP4/P1P2p2/1P2rNpP/2Q3P1/4RR1K b - - bm Rxf3; id \\\"arasan20.122\\\";  \\n\" +\n            \"3r3r/k1p2pb1/B1b2q2/2RN3p/3P2p1/1Q2B1Pn/PP3PKP/5R2 w - - bm Rfc1; id \\\"arasan20.123\\\";  \\n\" +\n            \"r1b3kr/pp1n2Bp/2pb2q1/3p3N/3P4/2P2Q2/P1P3PP/4RRK1 w - - bm Re5; id \\\"arasan20.124\\\";  \\n\" +\n            \"2r3k1/1q3pp1/2n1b2p/4P3/3p1BP1/Q6P/1p3PB1/1R4K1 b - - bm Rb8; id \\\"arasan20.125\\\";  \\n\" +\n            \"rn2kb1r/1b1n1p1p/p3p1p1/1p2q1B1/3N3Q/2N5/PPP3PP/2KR1B1R w kq - bm Nxe6; id \\\"arasan20.126\\\";  \\n\" +\n            \"r7/ppp3kp/2bn4/4qp2/2B1pR2/2P1Q2P/P5P1/5RK1 w - - bm Rxf5; id \\\"arasan20.127\\\";  \\n\" +\n            \"1r6/r6k/2np2p1/2pNp1qp/1pP1Pp1b/1P1P1P2/1B3P2/1Q1R1K1R b - - bm Bxf2; id \\\"arasan20.128\\\";  \\n\" +\n            \"1nr3k1/q4rpp/1p1p1n2/3Pp3/1PQ1P1b1/4B1P1/2R2NBP/2R3K1 w - - bm Qxc8+; id \\\"arasan20.129\\\";  \\n\" +\n            \"8/5rk1/p2p4/1p1P1b1p/1P1K2pP/2P3P1/4R3/5B2 w - - bm Rf2; id \\\"arasan20.130\\\";  \\n\" +\n            \"5rk1/2p1R2p/r5q1/2pPR2p/5p2/1p5P/P4PbK/2BQ4 w - - bm d6; id \\\"arasan20.131\\\";  \\n\" +\n            \"r2q1r2/1b2bpkp/p3p1p1/2ppP1P1/7R/1PN1BQR1/1PP2P1P/4K3 w - - bm Qf6+; id \\\"arasan20.132\\\";  \\n\" +\n            \"r1r3k1/1ppn2bp/p1q1p1p1/3pP3/3PB1P1/PQ3NP1/3N4/2BK3R w - - bm Ng5; id \\\"arasan20.133\\\";  \\n\" +\n            \"1rr1b1k1/1pq1bp2/p2p1np1/4p3/P2BP3/2NB2Q1/1PP3PP/4RR1K w - - bm Rxf6; id \\\"arasan20.134\\\";  \\n\" +\n            \"r1r3k1/1q3p1p/4p1pP/1bnpP1P1/pp1Q1P2/1P6/P1PR1N2/1K3B1R b - - bm axb3; id \\\"arasan20.135\\\";  \\n\" +\n            \"r1b2rk1/pppnq3/4ppp1/6N1/3P3Q/2PB4/P1PK2PP/3R3R w - - bm Nxe6; id \\\"arasan20.136\\\";  \\n\" +\n            \"3r1r1k/pp5p/4b1pb/6q1/3P4/4p1BP/PP2Q1PK/3RRB2 b - - bm Qxg3+; id \\\"arasan20.137\\\";  \\n\" +\n            \"r2r2k1/3bb1Pp/3pp1p1/p1q5/1p2PP2/P1N5/1PPQ4/1K1R1B1R w - - bm Nd5; id \\\"arasan20.138\\\";  \\n\" +\n            \"8/2R5/3p4/3P4/3k3P/2p3K1/1r4P1/8 w - - bm Kf3; id \\\"arasan20.139\\\";  \\n\" +\n            \"r1bq2k1/1pp2ppp/3prn2/p3n3/2P5/PQN1PP2/1P1PB2P/R1B2R1K b - - bm Nfg4; id \\\"arasan20.140\\\";  \\n\" +\n            \"2kr3r/pp4pp/4pp2/2pq4/P1Nn4/4Q3/KP2B1PP/2RR4 b - - am Qxg2; id \\\"arasan20.141\\\";  \\n\" +\n            \"5r2/1p4k1/pP1pP1pp/2rP2q1/4Qp2/3Bb3/P5PP/4RR1K w - - bm Rf3; id \\\"arasan20.142\\\";  \\n\" +\n            \"r2qr1k1/1b1pppbp/1p4p1/pP2P1B1/3N4/R7/1PP2PPP/3QR1K1 w - a6 bm Nf5; id \\\"arasan20.143\\\";  \\n\" +\n            \"4k3/1R6/Pb3p2/1P1n4/5p2/8/4K3/8 w - - bm Kd3; id \\\"arasan20.144\\\";  \\n\" +\n            \"r4nk1/2pq1ppp/3p4/p3pNPQ/4P3/2PP1RP1/Pr3PK1/7R w - - bm Ne3; id \\\"arasan20.145\\\";  \\n\" +\n            \"r1q2rk1/1b2bppp/p1p1p3/4B3/PP6/3B3P/2P1QPP1/R2R2K1 w - - bm Bxh7+; id \\\"arasan20.146\\\";  \\n\" +\n            \"r2qrb1k/1p1b2p1/p2ppn1p/8/3NP3/1BN5/PPP3QP/1K3RR1 w - - bm e5; id \\\"arasan20.147\\\";  \\n\" +\n            \"r2q1k1r/pp2n1pp/2nb1p2/1B1p3Q/N2P4/2P1B3/PP4PP/R4RK1 w - - bm Rxf6+; id \\\"arasan20.148\\\";  \\n\" +\n            \"4r1k1/6p1/bp2r2p/3QNp2/P2BnP2/4P2P/5qPK/3RR3 b - - bm Kh7; id \\\"arasan20.149\\\";  \\n\" +\n            \"8/5rk1/p3Q1pp/1p1P1p1b/2p1Pq1P/P4P2/1PKN4/5R2 w - - bm d6; id \\\"arasan20.150\\\";  \\n\" +\n            \"r1bqkb1r/4pppp/p1p5/2ppP3/8/2P2N2/PPP2PPP/R1BQR1K1 w kq - bm e6; id \\\"arasan20.151\\\";  \\n\" +\n            \"3r1rk1/1b2bpp1/2n1p2p/qp1n2N1/4N3/P3P3/1BB1QPPP/2R2RK1 w - - bm Qh5; id \\\"arasan20.152\\\";  \\n\" +\n            \"3R4/pp2r1pk/q1p3bp/2P2r2/PP6/2Q3P1/6BP/5RK1 w - - bm Rxf5; id \\\"arasan20.153\\\";  \\n\" +\n            \"r3k3/1p4p1/1Bb1Bp1p/P1p1bP1P/2Pp2P1/3P4/5K2/4R3 w - - bm g5; id \\\"arasan20.154\\\";  \\n\" +\n            \"1r1rb1k1/5ppp/4p3/1p1p3P/1q2P2Q/pN3P2/PPP4P/1K1R2R1 w - - bm Rxg7+; id \\\"arasan20.155\\\";  \\n\" +\n            \"1r1q1rk1/4bp1p/n3p3/pbNpP1PB/5P2/1P2B1K1/1P1Q4/2RR4 w - - bm Ne4; id \\\"arasan20.156\\\";  \\n\" +\n            \"r1bq1rk1/pp2bppp/1n2p3/3pP3/8/2RBBN2/PP2QPPP/2R3K1 w - - bm Bxh7+; id \\\"arasan20.157\\\";  \\n\" +\n            \"r6k/N1Rb2bp/p2p1nr1/3Pp2q/1P2Pp1P/5N2/P3QBP1/4R1K1 b - - bm Bh3; id \\\"arasan20.158\\\";  \\n\" +\n            \"r1b2rk1/1pq1nppp/pbn1p3/8/3N4/3BBN2/PPP1QPPP/3R1RK1 w - - bm Bxh7+; id \\\"arasan20.159\\\";  \\n\" +\n            \"3r1rk1/1b2qp1p/1p3np1/1N1p4/6n1/2NBP1K1/PBQ2PP1/3RR3 b - - bm d4; id \\\"arasan20.160\\\";  \\n\" +\n            \"br3bk1/3r1p2/3q2p1/3P2Np/2B4P/3QR1P1/3R1P1K/8 w - - bm Nxf7; id \\\"arasan20.161\\\";  \\n\" +\n            \"r3r2k/ppq3np/2p3p1/NPPp1bb1/P2Pnp2/3B1P2/2Q3PP/1RN1BRK1 b - - bm Ng3; id \\\"arasan20.162\\\";  \\n\" +\n            \"7k/5rp1/3q1p1p/2bNpQ1P/4P1P1/8/1R3PK1/8 w - - bm g5; id \\\"arasan20.163\\\";  \\n\" +\n            \"4r3/4r3/1ppqpnk1/p3Rp1p/P2P1R1Q/2PB2P1/1P3P2/6K1 w - - bm Bxf5+; id \\\"arasan20.164\\\";  \\n\" +\n            \"r3nrk1/1pqbbppp/p2pp3/2n1P3/5P2/2NBBNQ1/PPP3PP/R4RK1 w - - bm Bxh7; id \\\"arasan20.165\\\";  \\n\" +\n            \"rnbq3r/ppp2kpp/4pp2/3n4/2BP4/BQ3N2/P4PPP/4RRK1 w - - bm Ng5+; id \\\"arasan20.166\\\";  \\n\" +\n            \"8/2N5/1P2p3/5bPk/1q3b2/3Bp2P/2P5/6QK b - - bm Kh4; id \\\"arasan20.167\\\";  \\n\" +\n            \"1k1r1b1r/1p6/p4pp1/P1p1p3/2NpP1p1/1PPP2Pq/1B3P1P/2RQR1K1 b - - bm f5; id \\\"arasan20.168\\\";  \\n\" +\n            \"5r2/3rkp2/2R2p2/p2Bb2Q/1p2P2P/4q1P1/Pp6/1K1R4 b - - bm b3; id \\\"arasan20.169\\\";  \\n\" +\n            \"5rk1/qp1b1rnp/4p1p1/p2pB3/8/1R1B4/PP1QRPPP/6K1 w - - bm Bxg6; id \\\"arasan20.170\\\";  \\n\" +\n            \"6k1/5r1p/1p2Q1p1/p7/P1P2P2/2K1R1P1/2N2qb1/8 w - - bm Qd6 Qe8+; id \\\"arasan20.171\\\";  \\n\" +\n            \"4r1k1/1p4p1/p1qBp1Qp/b1pnP3/8/5NP1/1P3PKP/3R4 w - - bm Rxd5; id \\\"arasan20.172\\\";  \\n\" +\n            \"2r1k2r/pp1bb1pp/6n1/3Q1p2/1B1N4/P7/1q4PP/4RRK1 w k - bm Bxe7; id \\\"arasan20.173\\\";  \\n\" +\n            \"3b2k1/4qp2/2P4Q/3B3p/1P6/1K6/8/8 w - - bm Bc4; id \\\"arasan20.174\\\";  \\n\" +\n            \"1r2brk1/6p1/1q2p1Pp/pN1pPPb1/np1N4/5Q2/1PP1B3/1K1R3R w - - bm f6; id \\\"arasan20.175\\\";  \\n\" +\n            \"2rq1Nk1/pb3pp1/4p3/1p6/3b1Pn1/P1N5/1PQ3PP/R1B2R1K b - - bm f5; id \\\"arasan20.176\\\";  \\n\" +\n            \"r1b2rk1/1p4p1/p1n1p3/3p1pB1/NqP3n1/b2BP3/1PQN1P1P/1K4RR w - - bm Rxg4; id \\\"arasan20.177\\\";  \\n\" +\n            \"q2rn1k1/1b3p1p/1p4p1/2n1B1P1/r1PN3P/P4P2/4Q1B1/3RR1K1 w - - bm Bf6; id \\\"arasan20.178\\\";  \\n\" +\n            \"r1b3r1/5p1k/p1n2P1p/P1qpp1P1/1p1p4/3P2Q1/BPPB2P1/R4RK1 w - - bm Kf2; id \\\"arasan20.179\\\";  \\n\" +\n            \"r2q1rk1/2p2ppp/pb1p1n2/n3p3/P2PP3/2P2NN1/R4PPP/2BQ1RK1 w - - bm Bg5; id \\\"arasan20.180\\\";  \\n\" +\n            \"1r2rbk1/1p1n1p2/p3b1p1/q2NpNPp/4P2Q/1P5R/6BP/5R1K w - h6 bm Ng3; id \\\"arasan20.181\\\";  \\n\" +\n            \"r4rk1/1bqnppBp/pp1p1np1/8/P2pP3/2N1QN1P/1PP1BPP1/R4RK1 w - - bm Qh6; id \\\"arasan20.182\\\";  \\n\" +\n            \"5b2/1b2qp1k/2pp1npp/1p6/1P2PP2/r1PQ2NP/2B3P1/3RB1K1 w - - bm e5; id \\\"arasan20.183\\\";  \\n\" +\n            \"r1qr1bk1/2p2pp1/ppn1p2p/8/1PPPN1nP/P4NP1/2Q2PK1/2BRR3 w - - bm Neg5; id \\\"arasan20.184\\\";  \\n\" +\n            \"r1b2r1k/4qp1p/p2ppb1Q/4nP2/1p1NP3/2N5/PPP4P/2KR1BR1 w - - bm Nc6; id \\\"arasan20.185\\\";  \\n\" +\n            \"5rk1/1p3n2/1q2pB2/1P1p1b1p/5Q1P/3p1NP1/5P2/2R3K1 w - - bm Ne5; id \\\"arasan20.186\\\";  \\n\" +\n            \"8/2k5/2PrR1p1/7p/5p1P/5P1K/6P1/8 w - - bm Rxd6; id \\\"arasan20.187\\\";  \\n\" +\n            \"8/4bBpp/3p4/P6P/2PN2p1/3k1b2/P7/6K1 w - - bm h6; id \\\"arasan20.188\\\";  \\n\" +\n            \"4K1k1/8/1p5p/1Pp3b1/8/1P3P2/P1B2P2/8 w - - bm f4; id \\\"arasan20.189\\\";  \\n\" +\n            \"5rn1/1p3p1k/r5pp/p1ppPPq1/6N1/1PPP3Q/1P5P/R4R1K w - - bm e6; id \\\"arasan20.190\\\";  \\n\" +\n            \"8/k3qrpR/1p1p4/p2QpPp1/P1P1P1K1/1P6/8/8 w - - bm b4; id \\\"arasan20.191\\\";  \\n\" +\n            \"3r1rk1/pbq1bp1p/1n1Rp1p1/2p1P1N1/4N2P/1P3Q2/PB3PP1/K6R w - - bm h5; id \\\"arasan20.192\\\";  \\n\" +\n            \"r2qk2r/2p1bpp1/p5B1/1p1pP3/3P2p1/5PnP/PP3R2/RNBQ2K1 b kq - bm Rxh3; id \\\"arasan20.193\\\";  \\n\" +\n            \"rn2r1k1/p4pn1/1p2p3/qPppP1Q1/3P4/2P2N2/2P2PPP/1R3RK1 w - - bm Nh4; id \\\"arasan20.194\\\";  \\n\" +\n            \"k6r/ppqb4/2n5/4p2r/P2p1P1P/B1pQ2P1/2P3B1/RR4K1 w - - bm a5; id \\\"arasan20.195\\\";  \\n\" +\n            \"1r1q2k1/p4p1p/2Pp2p1/2p1P3/1r1n4/1P4P1/3R1PBP/3QR1K1 w - - bm e6; id \\\"arasan20.196\\\";  \\n\" +\n            \"1rr5/5R2/6k1/3B2P1/1p2P1n1/1PpK4/8/R7 w - - bm Ra6+; id \\\"arasan20.197\\\";  \\n\" +\n            \"b1r1r1k1/p2n1p2/1p5p/2qp1Rn1/2P3pN/6P1/P2N1P1P/Q3RBK1 b - - bm Qb4; id \\\"arasan20.198\\\";  \\n\" +\n            \"1q4rk/R1nbp3/1n1p3p/QP1P4/3pPp2/2N2P1P/1P1N3K/5B2 w - - bm Nb3; id \\\"arasan20.199\\\";  \\n\" +\n            \"4rrk1/1bq1pp2/p2p1n1Q/1pn2p1p/4P3/P1N2P2/BPP3PP/2KRR3 w - - bm g4; id \\\"arasan20.200\\\";  \" +\n            \"\";\n\n    private static final String[] splitUpArasan = arasanTests.split(\"\\\\\\n\");\n\n}\n\n\n/*\nr1bq1r1k/p1pnbpp1/1p2p3/6p1/3PB3/5N2/PPPQ1PPP/2KR3R w - - bm g4; id \"arasan20.1\"; \nr1b2rk1/1p1nbppp/pq1p4/3B4/P2NP3/2N1p3/1PP3PP/R2Q1R1K w - - bm Rxf7; id \"arasan20.2\";\nr1q1k2r/1p1nbpp1/2p2np1/p1Pp4/3Pp3/P1N1P1P1/1P1B1P1P/R2QRBK1 b kq - bm Bxc5; id \"arasan20.3\";\n2rr3k/2qnbppp/p1n1p3/1p1pP3/3P1N2/1Q1BBP2/PP3P1P/1KR3R1 w - - bm Bxh7; id \"arasan20.4\";\n3q1r1k/1b3ppp/p1n5/1p1pPB2/2rP4/P6N/1P2Q1PP/R4RK1 w - - bm Qh5; id \"arasan20.5\"; \nr1b1k2r/1p1pppb1/p5pp/3P4/q2p1B2/3P1Q2/PPP2PPP/R3R1K1 w kq - bm Rxe7+; id \"arasan20.6\"; \nR4bk1/2Bbp2p/2p2pp1/1rPp4/3P4/4P2P/4BPPK/1q1Q4 w - - bm Qa4; id \"arasan20.7\"; \nr1r3k1/p3bppp/2bp3Q/q2pP1P1/1p1BP3/8/PPP1B2P/2KR2R1 w - - bm e6; id \"arasan20.8\"; \nb2rk1r1/p3q3/2p5/3nPR2/3P2pp/1R1B2P1/P1Q2P2/6K1 w - - bm Bc4; id \"arasan20.9\"; \nr2q3r/1p1bbQ2/4p1Bk/3pP3/1n1P1P1p/pP6/Pn4PP/R1B1R1K1 w - - bm g4; id \"arasan20.10\"; \n1r2brk1/4n1p1/4p2p/p2pP1qP/2pP1NP1/P1Q1BK2/2P4R/6R1 b - - bm Bg6; id \"arasan20.11\";\n1rb2k1r/2q2pp1/p2b3p/2n3B1/2QN4/3B4/PpP3PP/1K2R2R w - - bm Bd8; id \"arasan20.12\";\n5rk1/1pp3p1/3ppr1p/pP2p2n/4P2q/P2PQ2P/2P1NPP1/R4RK1 b - - bm Rf3; id \"arasan20.13\"; \nr4rk1/1b1n1pb1/3p2p1/1p1Pq1Bp/2p1P3/2P2RNP/1PBQ2P1/5R1K w - - bm Nf5; id \"arasan20.14\";\n2kr2r1/ppq1bp1p/4pn2/2p1n1pb/4P1P1/2P2N1P/PPBNQP2/R1B1R1K1 b - - bm Nfxg4; id \"arasan20.15\";\n8/3r4/pr1Pk1p1/8/7P/6P1/3R3K/5R2 w - - bm Re2+; id \"arasan20.16\"; \n3r1rk1/q4pp1/n1bNp2p/p7/pn2P1N1/6P1/1P1Q1PBP/2RR2K1 w - - bm Nxh6+ e5; id \"arasan20.17\";\nr1q2rk1/ppnbbpp1/n4P1p/4P3/3p4/2N1B1PP/PP4BK/R2Q1R2 w - - bm Bxh6; id \"arasan20.18\"; \n1R6/5p1k/4bPpp/3pN3/2pP1P1P/2r5/6PK/8 w - - bm h5; id \"arasan20.19\"; \n3q1rk1/pr1b1p1p/1bp2p2/2ppP3/8/2P1BN2/PPQ3PP/R4RK1 w - - bm Bh6; id \"arasan20.20\"; \n8/5pk1/p4npp/1pPN4/1P2p3/1P4PP/5P2/5K2 w - - bm Nxf6; id \"arasan20.21\"; \n8/6p1/P1b1pp2/2p1p3/1k4P1/3PP3/1PK5/5B2 w - - bm Bg2; id \"arasan20.22\"; \nr5n1/p1p1q2k/4b2p/3pB3/3PP1pP/8/PPPQ2P1/5RK1 w - - bm Qf4; id \"arasan20.23\"; \n2b2rk1/r3q1pp/1nn1p3/3pP1NP/p1pP2Q1/2P1N3/1P1KBP2/R5R1 w - - bm Nxh7; id \"arasan20.24\";\nrnb3k1/p3qpr1/2p1p3/2NP3p/1pP3p1/3BQ3/P4PP1/4RRK1 w - - bm Qd4; id \"arasan20.25\"; \nr3r1k1/p3bppp/q1b2n2/5Q2/1p1B4/1BNR4/PPP3PP/2K2R2 w - - bm Rg3; id \"arasan20.26\"; ;\n2bq1rk1/rpb2p2/2p1p1p1/p1N3Np/P2P1P1P/1Q2R1P1/1P3P2/3R2K1 w - - bm f5; id \"arasan20.27\"; \n3q1r1k/2r2pp1/p6p/1pbppP1N/3pP1PP/3P1Q2/PPP4R/5RK1 w - - bm g5; id \"arasan20.28\";\n1q6/6k1/5Np1/1r4Pp/2p4P/2Nrb3/PP6/KR5Q b - - bm Bd4; id \"arasan20.29\";\nb2rk3/r4p2/p3p3/P3Q1Np/2Pp3P/8/6P1/6K1 w - - bm Qh8+; id \"arasan20.30\";\n2kr1b1r/1pp1ppp1/p7/q2P3n/2BB1pb1/2NQ4/P1P1N3/1R3RK1 w - - bm Rxb7; id \"arasan20.31\"; \nr4rkq/1ppb4/3P2n1/1N1Pp3/P3Pbn1/3B1NP1/1P2QB2/R4RK1 b - - bm Rf7; id \"arasan20.32\"; \nbr4k1/1qrnbppp/pp1ppn2/8/NPPBP3/PN3P2/5QPP/2RR1B1K w - - bm Nxb6; id \"arasan20.33\"; \nr2q1rk1/ppp2p2/3p1np1/4pNQ1/4P1pP/1PPP4/1P3P2/R3K1R1 w Q - bm Qh6; id \"arasan20.34\";\n1qb2rk1/3p1pp1/1p6/1pbBp3/r5p1/3QB3/PPP2P1P/2KR2R1 w - - bm b3; id \"arasan20.35\";\nr1b2q1k/2Qn1p1p/1p1Rpp2/p6B/4P2P/6N1/P4PP1/6K1 w - - bm e5; id \"arasan20.36\"; \nr2q1rk1/p2pn3/bpp2p1p/3Nb1pQ/7B/8/PPB2PPP/R3R1K1 w - - bm Bxg5; id \"arasan20.37\"; \nr4rk1/p4ppp/qp2p3/b5B1/n1R5/5N2/PP2QPPP/1R4K1 w - - bm Bf6; id \"arasan20.38\"; \nr2q1rk1/4bppp/3pb3/2n1pP2/1p2P1PP/1P3Q2/1BP1N1B1/2KR3R b - - bm Ra2; id \"arasan20.39\";\n2r2rkb/1Q1b3p/p2p3q/2PPnp2/1P2p1p1/2N5/P3BPPB/4RRK1 b - - bm e3; id \"arasan20.40\"; \n2b1rk2/5p2/p1P5/2p2P2/2p5/7B/P7/2KR4 w - - bm f6; id \"arasan20.41\";\nrn1qr1k1/1p2bppp/p3p3/3pP3/P2P1B2/2RB1Q1P/1P3PP1/R5K1 w - - bm Bxh7+; id \"arasan20.42\"; \n1k4rr/p1pq2b1/1p6/1P1pp1p1/6n1/2PP2QN/PN1BP1B1/5RK1 b - - bm e4; id \"arasan20.43\";\n1n3rk1/3rbppp/p2p4/4pP2/Ppq1P3/1N2B3/1PP3PP/R2Q1R1K w - - bm f6; id \"arasan20.44\"; \n8/2p1k3/3p3p/2PP1pp1/1P1K1P2/6P1/8/8 w - - bm g4; id \"arasan20.45\"; \nr1b2rk1/pp2bppp/3p4/q7/3BN1n1/1B3Q2/PPP3PP/R4RK1 w - - bm Qxf7+; id \"arasan20.46\"; \nr1b1rk2/p1pq2p1/1p1b1p1p/n2P4/2P1NP2/P2B1R2/1BQ3PP/R6K w - - bm Nxf6; id \"arasan20.47\"; \nr2qr3/2p1b1pk/p5pp/1p2p3/nP2P1P1/1BP2RP1/P3QPK1/R1B5 w - - bm Bxh6; id \"arasan20.48\"; \n1rbq1rk1/p5bp/3p2p1/2pP4/1p1n1BP1/3P3P/PP2N1B1/1R1Q1RK1 b - - bm Bxg4; id \"arasan20.49\"; \nk1b4r/1p3p2/pq2pNp1/5n1p/P3QP2/1P1R1BPP/2P5/1K6 b - - am Nxg3; id \"arasan20.50\";  \n7b/8/kq6/8/8/1N2R3/K2P4/8 w - - bm Nd4; id \"arasan20.51\";  \nq3nrk1/4bppp/3p4/r3nPP1/4P2P/NpQ1B3/1P4B1/1K1R3R b - - bm Nc7; id \"arasan20.52\";  \n2r5/8/6k1/P1p3p1/2R5/1P1q4/1K4Q1/8 w - - bm a6; id \"arasan20.53\";  \n8/3R1P2/1ppP1p2/3r4/8/K7/p4k2/8 w - - bm Kb2; id \"arasan20.54\";  \n2qrrbk1/1b3ppp/pn1Pp3/6P1/1Pp2B2/1nN2NQB/1P3P1P/3RR1K1 w - - bm g6; id \"arasan20.55\";  \nr1q1nrk1/3nb2p/3p2p1/p5P1/1pbNPB2/1N6/PPPQ4/2KR1B1R w - - bm Nf5; id \"arasan20.56\";  \n5rk1/pp3ppp/3q4/8/2Pp2b1/P5Pn/PBQPr1BP/4RR1K b - - bm Rxg2; id \"arasan20.57\";  \n3b3r/1q3pk1/4b2p/3pPppQ/R1pP1P1P/1rP1N1P1/6N1/2R3K1 w - - bm g4; id \"arasan20.58\";  \nr1b2rk1/pp1p2pR/8/1pb2p2/5N2/7Q/qPPB1PPP/6K1 w - - bm g3; id \"arasan20.59\";  \n7q/3k2p1/n1p1p1Pr/1pPpPpQ1/3P1N1p/1P2KP2/6P1/7R w - - bm Nxd5; id \"arasan20.60\";  \n5rk1/8/pqPp1r1p/1p1Pp1bR/4B3/5PP1/PP2Q1K1/R7 w - - bm Rxg5+; id \"arasan20.61\";  \n3r2k1/pb3Np1/4pq1p/2pp1n2/3P4/1PQ5/P4PPP/R2R2K1 b - - bm Nxd4; id \"arasan20.62\";  \n2kr1r2/ppq1b1p1/2n5/2PpPb1N/QP1B1pp1/2P5/P2N1P1P/R4RK1 b - - bm Rh8; id \"arasan20.63\";  \nr1r2k2/pp2bpp1/2bppn1p/6B1/2qNPPPP/2N5/PPPQ4/1K1RR3 w - - bm f5; id \"arasan20.64\";  \n3r2k1/6p1/B1R2p1p/1pPr1P2/3P4/8/1P3nP1/2KR4 w - - bm Rc8; id \"arasan20.65\";  \n3qb1k1/5rb1/r3p1Np/1n1pP2P/p1pB1PQ1/2P5/R1B4K/6R1 w - - bm Bc5; id \"arasan20.66\";  \n3q1k2/p4pb1/3Pp3/p3P3/r6p/2QB3P/3B1P2/6K1 w - - bm Bb5; id \"arasan20.67\";  \nr4r1k/ppqbn1pp/3b1p2/2pP3B/2P4N/7P/P2B1PP1/1R1QR1K1 w - - bm Rxe7; id \"arasan20.68\";  \n1r4k1/1q3pp1/r3b2p/p2N4/3R4/QP3P2/2P3PP/1K1R4 w - - bm Nf6+; id \"arasan20.69\";  \nr2q1r2/1bp1npk1/3p1p1p/p3p2Q/P3P2N/1BpPP3/1P1N2PP/5RK1 w - - bm Rf3; id \"arasan20.70\";  \n2r3k1/1bp3pp/pp1pNn1r/3P1p1q/1PP1pP2/P3P1P1/3Q3P/2RR1BK1 w - - bm c5; id \"arasan20.71\";  \n2r3r1/1p1qb2k/p5pp/2n1Bp2/2RP3P/1P2PNQ1/5P1K/3R4 w - - bm Ng5+; id \"arasan20.72\";  \nrn3rk1/pp1q3p/4p1B1/2p5/3N1b2/4B3/PPQ2PPP/3R2K1 w - - bm Nf5; id \"arasan20.73\";  \nrr5k/1q2pPbp/3p2p1/PbpP4/1nB1nP1Q/1NB5/1P4PP/R4R1K w - - bm f5; id \"arasan20.74\";  \nr4rk1/pp1qbppp/1n6/6R1/P1pP4/5Q1P/2B2PP1/2B2RK1 w - - bm Rxg7+; id \"arasan20.75\";  \n1r4k1/p7/2P1n1pp/5p2/2QPqP2/PN2p3/5P1P/4RK2 b - - bm Rc8; id \"arasan20.76\";  \n1qrrbbk1/1p1nnppp/p3p3/4P3/2P5/1PN1N3/PB2Q1PP/1B2RR1K w - - bm Bxh7+; id \"arasan20.77\";  \nr1b2rk1/qp5p/p1n1ppp1/7N/4P1P1/2N1pP2/PPP5/2KR1QR1 w - - bm e5; id \"arasan20.78\";  \n3r4/2q5/5pk1/p3n1p1/N3Pp1p/1PPr1P1P/2Q1R1P1/5R1K b - - bm g4; id \"arasan20.79\";  \n1q2r1k1/3R1pb1/3R2p1/7p/p3N3/2P1BP1P/1P3PK1/8 b - - bm Rxe4; id \"arasan20.80\";  \nr1b1k2r/2q2pp1/p1p1pn2/2b4p/Pp2P3/3B3P/1PP1QPP1/RNB2RK1 b kq - bm Ng4; id \"arasan20.81\";  \n2r1rb1k/ppq2pp1/4b2p/3pP2Q/5B2/2PB2R1/P4PPP/1R4K1 w - - bm Rxg7; id \"arasan20.82\";  \n6k1/p4qp1/1p3r1p/2pPp1p1/1PP1PnP1/2P1KR1P/1B6/7Q b - - bm h5; id \"arasan20.83\";  \nrnb1kb1r/pp1p1ppp/1q2p3/8/3NP1n1/2N1B3/PPP2PPP/R2QKB1R w KQkq - bm Qxg4; id \"arasan20.84\";\nr3kb1r/1b1n2p1/p3Nn1p/3Pp3/1p4PP/3QBP2/qPP5/2KR1B1R w kq - bm Qg6+; id \"arasan20.85\";  \n1r1qrbk1/pb3p2/2p1pPpp/1p4B1/2pP2PQ/2P5/P4PBP/R3R1K1 w - - bm Bxh6; id \"arasan20.86\";  \n2r1r2k/1b1n1p1p/p3pPp1/1p1pP2q/3N4/P3Q1P1/1PP4P/2KRRB2 w - - bm g4; id \"arasan20.87\";  \n2r1b1k1/5p2/1R2nB2/1p2P2p/2p5/2Q1P2K/3R1PB1/r3q3 w - - bm Rxe6; id \"arasan20.88\";  \nrn2r1k1/ppq1pp1p/2b2bp1/8/2BNPP1B/2P4P/P1Q3P1/1R3RK1 w - - bm Bxf7+; id \"arasan20.89\";  \n1kr5/1p3p2/q3p3/pRbpPp2/P1rNnP2/2P1B1Pp/1P2Q2P/R5K1 b - - bm Bxd4; id \"arasan20.90\";  \nr3r2k/1pq2pp1/4b2p/3pP3/p1nB3P/P2B1RQ1/1PP3P1/3R3K w - - bm Rf6; id \"arasan20.91\";  \nr3brk1/2q1bp1p/pnn3p1/1p1pP1N1/3P4/3B2P1/PP1QNR1P/R1B3K1 w - - bm Nxh7; id \"arasan20.92\";  \n1r3r2/q5k1/4p1n1/1bPpPp1p/pPpR1Pp1/P1B1Q3/2B3PP/3R2K1 w - - bm Rxd5; id \"arasan20.93\";  \nrq3rk1/1b1n1ppp/ppn1p3/3pP3/5B2/2NBP2P/PP2QPP1/2RR2K1 w - - bm Nxd5; id \"arasan20.94\";  \n7r/k4pp1/pn2p1pr/2ppP3/1q3P2/1PN2R1P/P1P2QP1/3R3K w - - bm a3; id \"arasan20.95\";  \n1r3rk1/3bbppp/1qn2P2/p2pP1P1/3P4/2PB1N2/6K1/qNBQ1R2 w - - bm Bxh7+; id \"arasan20.96\";  \n1r1qrbk1/5ppp/2b1p2B/2npP3/1p4QP/pP1B1N2/P1P2PP1/1K1R3R w - - bm Bxh7+; id \"arasan20.97\";  \nr5k1/pbpq1pp1/3b2rp/N3n3/1N6/2P3B1/PP1Q1PPP/R4RK1 b - - bm Rxg3; id \"arasan20.98\";  \n1r2r1k1/2R2p2/1N1Rp2p/p2b3P/4pPP1/8/P4K2/8 w - - bm g5; id \"arasan20.99\";  \nr4r2/pp1b1ppk/2n1p3/3pPnB1/q1pP2QP/P1P4R/2PKNPP1/R7 w - - bm Qh5+; id \"arasan20.100\";  \n8/2k2Bp1/2n5/p1P4p/4pPn1/P3PqPb/1r1BQ2P/2R1K1R1 b - - bm Nce5; id \"arasan20.101\";  \n8/5kpp/8/8/8/5P2/1RPK2PP/6r1 w - - bm c4; id \"arasan20.102\";  \nr3rnk1/pp2ppb1/1np3p1/3qP2p/3P1B2/4Q1N1/PP2BPP1/1K1R3R w - - bm Bh6; id \"arasan20.103\";  \n1r1q2k1/2r3bp/B2p1np1/3P1p2/R1P1pP2/4B2P/P5PK/3Q1R2 b - - bm Ng4+; id \"arasan20.104\";  \n2r1rnk1/1p2pp1p/p1np2p1/q4PP1/3NP2Q/4B2R/PPP4P/3R3K w - - bm b4; id \"arasan20.105\";  \n2b2qk1/1r4pp/2p1p3/p2n1PPB/2p4P/2p5/P4Q2/4RRK1 w - - bm Qg3; id \"arasan20.106\";  \n1r1rkb2/2q2p2/p2p1P1B/P1pPp2Q/2P3b1/1P6/2B3PP/5R1K w - - bm Qxg4; id \"arasan20.107\";  \nr4rk1/3b3p/p1pb4/1p1n2p1/2P2p2/1B1P2Pq/PP1NRP1P/R1BQ2K1 w - - bm Qf1; id \"arasan20.108\";  \n1r3rk1/4bpp1/p3p2p/q1PpPn2/bn3Q1P/1PN1BN2/2P1BPP1/1KR2R2 b - - bm Bxb3; id \"arasan20.109\";  \n2nb2k1/1rqb1pp1/p2p1n1p/2pPp3/P1P1P3/2B1NN1P/2B2PP1/Q3R2K w - - bm Nxe5; id \"arasan20.110\";  \n3r2k1/p1qn1p1p/4p1p1/2p1N3/8/2P3P1/PP2QP1P/4R1K1 w - - bm Nxf7; id \"arasan20.111\";  \nr2q1rk1/pb1nbp1p/1pp1pp2/8/2BPN2P/5N2/PPP1QPP1/2KR3R w - - bm Nfg5; id \"arasan20.112\";  \n4rr2/3bp1bk/p2q1np1/2pPp2p/2P4P/1R4N1/1P1BB1P1/1Q3RK1 w - - bm Bxh5; id \"arasan20.113\";  \n8/8/4b1p1/2Bp3p/5P1P/1pK1Pk2/8/8 b - - bm g5 d4+; id \"arasan20.114\";  \n8/5p2/3p2p1/1bk4p/p2pBNnP/P5P1/1P3P2/4K3 b - - bm d3; id \"arasan20.115\";  \n8/4nk2/1p3p2/1r1p2pp/1P1R1N1P/6P1/3KPP2/8 w - - bm Nd3; id \"arasan20.116\";  \n6k1/1bq1bpp1/p6p/2p1pP2/1rP1P1P1/2NQ4/2P4P/K2RR3 b - - bm Bd5; id \"arasan20.117\";  \nr3r1k1/1bqnbp1p/pp1pp1p1/6P1/Pn2PP1Q/1NN1BR2/1PPR2BP/6K1 w - - bm Rh3; id \"arasan20.118\";  \n4rrk1/1pp1n1pp/1bp1P2q/p4p2/P4P2/3R2N1/1PP2P1P/2BQRK2 w - - bm Nh5; id \"arasan20.119\";  \n3q4/4k3/1p1b1p1r/p2Q4/3B1p1p/7P/1P4P1/3R3K w - - bm b4; id \"arasan20.120\";  \n8/5p1k/6p1/1p1Q3p/3P4/1R2P1KP/6P1/r4q2 b - - bm h4+; id \"arasan20.121\";  \n7k/3q1pp1/1p3r2/p1bP4/P1P2p2/1P2rNpP/2Q3P1/4RR1K b - - bm Rxf3; id \"arasan20.122\";  \n3r3r/k1p2pb1/B1b2q2/2RN3p/3P2p1/1Q2B1Pn/PP3PKP/5R2 w - - bm Rfc1; id \"arasan20.123\";  \nr1b3kr/pp1n2Bp/2pb2q1/3p3N/3P4/2P2Q2/P1P3PP/4RRK1 w - - bm Re5; id \"arasan20.124\";  \n2r3k1/1q3pp1/2n1b2p/4P3/3p1BP1/Q6P/1p3PB1/1R4K1 b - - bm Rb8; id \"arasan20.125\";  \nrn2kb1r/1b1n1p1p/p3p1p1/1p2q1B1/3N3Q/2N5/PPP3PP/2KR1B1R w kq - bm Nxe6; id \"arasan20.126\";  \nr7/ppp3kp/2bn4/4qp2/2B1pR2/2P1Q2P/P5P1/5RK1 w - - bm Rxf5; id \"arasan20.127\";  \n1r6/r6k/2np2p1/2pNp1qp/1pP1Pp1b/1P1P1P2/1B3P2/1Q1R1K1R b - - bm Bxf2; id \"arasan20.128\";  \n1nr3k1/q4rpp/1p1p1n2/3Pp3/1PQ1P1b1/4B1P1/2R2NBP/2R3K1 w - - bm Qxc8+; id \"arasan20.129\";  \n8/5rk1/p2p4/1p1P1b1p/1P1K2pP/2P3P1/4R3/5B2 w - - bm Rf2; id \"arasan20.130\";  \n5rk1/2p1R2p/r5q1/2pPR2p/5p2/1p5P/P4PbK/2BQ4 w - - bm d6; id \"arasan20.131\";  \nr2q1r2/1b2bpkp/p3p1p1/2ppP1P1/7R/1PN1BQR1/1PP2P1P/4K3 w - - bm Qf6+; id \"arasan20.132\";  \nr1r3k1/1ppn2bp/p1q1p1p1/3pP3/3PB1P1/PQ3NP1/3N4/2BK3R w - - bm Ng5; id \"arasan20.133\";  \n1rr1b1k1/1pq1bp2/p2p1np1/4p3/P2BP3/2NB2Q1/1PP3PP/4RR1K w - - bm Rxf6; id \"arasan20.134\";  \nr1r3k1/1q3p1p/4p1pP/1bnpP1P1/pp1Q1P2/1P6/P1PR1N2/1K3B1R b - - bm axb3; id \"arasan20.135\";  \nr1b2rk1/pppnq3/4ppp1/6N1/3P3Q/2PB4/P1PK2PP/3R3R w - - bm Nxe6; id \"arasan20.136\";  \n3r1r1k/pp5p/4b1pb/6q1/3P4/4p1BP/PP2Q1PK/3RRB2 b - - bm Qxg3+; id \"arasan20.137\";  \nr2r2k1/3bb1Pp/3pp1p1/p1q5/1p2PP2/P1N5/1PPQ4/1K1R1B1R w - - bm Nd5; id \"arasan20.138\";  \n8/2R5/3p4/3P4/3k3P/2p3K1/1r4P1/8 w - - bm Kf3; id \"arasan20.139\";  \nr1bq2k1/1pp2ppp/3prn2/p3n3/2P5/PQN1PP2/1P1PB2P/R1B2R1K b - - bm Nfg4; id \"arasan20.140\";  \n2kr3r/pp4pp/4pp2/2pq4/P1Nn4/4Q3/KP2B1PP/2RR4 b - - am Qxg2; id \"arasan20.141\";  \n5r2/1p4k1/pP1pP1pp/2rP2q1/4Qp2/3Bb3/P5PP/4RR1K w - - bm Rf3; id \"arasan20.142\";  \nr2qr1k1/1b1pppbp/1p4p1/pP2P1B1/3N4/R7/1PP2PPP/3QR1K1 w - a6 bm Nf5; id \"arasan20.143\";  \n4k3/1R6/Pb3p2/1P1n4/5p2/8/4K3/8 w - - bm Kd3; id \"arasan20.144\";  \nr4nk1/2pq1ppp/3p4/p3pNPQ/4P3/2PP1RP1/Pr3PK1/7R w - - bm Ne3; id \"arasan20.145\";  \nr1q2rk1/1b2bppp/p1p1p3/4B3/PP6/3B3P/2P1QPP1/R2R2K1 w - - bm Bxh7+; id \"arasan20.146\";  \nr2qrb1k/1p1b2p1/p2ppn1p/8/3NP3/1BN5/PPP3QP/1K3RR1 w - - bm e5; id \"arasan20.147\";  \nr2q1k1r/pp2n1pp/2nb1p2/1B1p3Q/N2P4/2P1B3/PP4PP/R4RK1 w - - bm Rxf6+; id \"arasan20.148\";  \n4r1k1/6p1/bp2r2p/3QNp2/P2BnP2/4P2P/5qPK/3RR3 b - - bm Kh7; id \"arasan20.149\";  \n8/5rk1/p3Q1pp/1p1P1p1b/2p1Pq1P/P4P2/1PKN4/5R2 w - - bm d6; id \"arasan20.150\";  \nr1bqkb1r/4pppp/p1p5/2ppP3/8/2P2N2/PPP2PPP/R1BQR1K1 w kq - bm e6; id \"arasan20.151\";  \n3r1rk1/1b2bpp1/2n1p2p/qp1n2N1/4N3/P3P3/1BB1QPPP/2R2RK1 w - - bm Qh5; id \"arasan20.152\";  \n3R4/pp2r1pk/q1p3bp/2P2r2/PP6/2Q3P1/6BP/5RK1 w - - bm Rxf5; id \"arasan20.153\";  \nr3k3/1p4p1/1Bb1Bp1p/P1p1bP1P/2Pp2P1/3P4/5K2/4R3 w - - bm g5; id \"arasan20.154\";  \n1r1rb1k1/5ppp/4p3/1p1p3P/1q2P2Q/pN3P2/PPP4P/1K1R2R1 w - - bm Rxg7+; id \"arasan20.155\";  \n1r1q1rk1/4bp1p/n3p3/pbNpP1PB/5P2/1P2B1K1/1P1Q4/2RR4 w - - bm Ne4; id \"arasan20.156\";  \nr1bq1rk1/pp2bppp/1n2p3/3pP3/8/2RBBN2/PP2QPPP/2R3K1 w - - bm Bxh7+; id \"arasan20.157\";  \nr6k/N1Rb2bp/p2p1nr1/3Pp2q/1P2Pp1P/5N2/P3QBP1/4R1K1 b - - bm Bh3; id \"arasan20.158\";  \nr1b2rk1/1pq1nppp/pbn1p3/8/3N4/3BBN2/PPP1QPPP/3R1RK1 w - - bm Bxh7+; id \"arasan20.159\";  \n3r1rk1/1b2qp1p/1p3np1/1N1p4/6n1/2NBP1K1/PBQ2PP1/3RR3 b - - bm d4; id \"arasan20.160\";  \nbr3bk1/3r1p2/3q2p1/3P2Np/2B4P/3QR1P1/3R1P1K/8 w - - bm Nxf7; id \"arasan20.161\";  \nr3r2k/ppq3np/2p3p1/NPPp1bb1/P2Pnp2/3B1P2/2Q3PP/1RN1BRK1 b - - bm Ng3; id \"arasan20.162\";  \n7k/5rp1/3q1p1p/2bNpQ1P/4P1P1/8/1R3PK1/8 w - - bm g5; id \"arasan20.163\";  \n4r3/4r3/1ppqpnk1/p3Rp1p/P2P1R1Q/2PB2P1/1P3P2/6K1 w - - bm Bxf5+; id \"arasan20.164\";  \nr3nrk1/1pqbbppp/p2pp3/2n1P3/5P2/2NBBNQ1/PPP3PP/R4RK1 w - - bm Bxh7; id \"arasan20.165\";  \nrnbq3r/ppp2kpp/4pp2/3n4/2BP4/BQ3N2/P4PPP/4RRK1 w - - bm Ng5+; id \"arasan20.166\";  \n8/2N5/1P2p3/5bPk/1q3b2/3Bp2P/2P5/6QK b - - bm Kh4; id \"arasan20.167\";  \n1k1r1b1r/1p6/p4pp1/P1p1p3/2NpP1p1/1PPP2Pq/1B3P1P/2RQR1K1 b - - bm f5; id \"arasan20.168\";  \n5r2/3rkp2/2R2p2/p2Bb2Q/1p2P2P/4q1P1/Pp6/1K1R4 b - - bm b3; id \"arasan20.169\";  \n5rk1/qp1b1rnp/4p1p1/p2pB3/8/1R1B4/PP1QRPPP/6K1 w - - bm Bxg6; id \"arasan20.170\";  \n6k1/5r1p/1p2Q1p1/p7/P1P2P2/2K1R1P1/2N2qb1/8 w - - bm Qd6 Qe8+; id \"arasan20.171\";  \n4r1k1/1p4p1/p1qBp1Qp/b1pnP3/8/5NP1/1P3PKP/3R4 w - - bm Rxd5; id \"arasan20.172\";  \n2r1k2r/pp1bb1pp/6n1/3Q1p2/1B1N4/P7/1q4PP/4RRK1 w k - bm Bxe7; id \"arasan20.173\";  \n3b2k1/4qp2/2P4Q/3B3p/1P6/1K6/8/8 w - - bm Bc4; id \"arasan20.174\";  \n1r2brk1/6p1/1q2p1Pp/pN1pPPb1/np1N4/5Q2/1PP1B3/1K1R3R w - - bm f6; id \"arasan20.175\";  \n2rq1Nk1/pb3pp1/4p3/1p6/3b1Pn1/P1N5/1PQ3PP/R1B2R1K b - - bm f5; id \"arasan20.176\";  \nr1b2rk1/1p4p1/p1n1p3/3p1pB1/NqP3n1/b2BP3/1PQN1P1P/1K4RR w - - bm Rxg4; id \"arasan20.177\";  \nq2rn1k1/1b3p1p/1p4p1/2n1B1P1/r1PN3P/P4P2/4Q1B1/3RR1K1 w - - bm Bf6; id \"arasan20.178\";  \nr1b3r1/5p1k/p1n2P1p/P1qpp1P1/1p1p4/3P2Q1/BPPB2P1/R4RK1 w - - bm Kf2; id \"arasan20.179\";  \nr2q1rk1/2p2ppp/pb1p1n2/n3p3/P2PP3/2P2NN1/R4PPP/2BQ1RK1 w - - bm Bg5; id \"arasan20.180\";  \n1r2rbk1/1p1n1p2/p3b1p1/q2NpNPp/4P2Q/1P5R/6BP/5R1K w - h6 bm Ng3; id \"arasan20.181\";  \nr4rk1/1bqnppBp/pp1p1np1/8/P2pP3/2N1QN1P/1PP1BPP1/R4RK1 w - - bm Qh6; id \"arasan20.182\";  \n5b2/1b2qp1k/2pp1npp/1p6/1P2PP2/r1PQ2NP/2B3P1/3RB1K1 w - - bm e5; id \"arasan20.183\";  \nr1qr1bk1/2p2pp1/ppn1p2p/8/1PPPN1nP/P4NP1/2Q2PK1/2BRR3 w - - bm Neg5; id \"arasan20.184\";  \nr1b2r1k/4qp1p/p2ppb1Q/4nP2/1p1NP3/2N5/PPP4P/2KR1BR1 w - - bm Nc6; id \"arasan20.185\";  \n5rk1/1p3n2/1q2pB2/1P1p1b1p/5Q1P/3p1NP1/5P2/2R3K1 w - - bm Ne5; id \"arasan20.186\";  \n8/2k5/2PrR1p1/7p/5p1P/5P1K/6P1/8 w - - bm Rxd6; id \"arasan20.187\";  \n8/4bBpp/3p4/P6P/2PN2p1/3k1b2/P7/6K1 w - - bm h6; id \"arasan20.188\";  \n4K1k1/8/1p5p/1Pp3b1/8/1P3P2/P1B2P2/8 w - - bm f4; id \"arasan20.189\";  \n5rn1/1p3p1k/r5pp/p1ppPPq1/6N1/1PPP3Q/1P5P/R4R1K w - - bm e6; id \"arasan20.190\";  \n8/k3qrpR/1p1p4/p2QpPp1/P1P1P1K1/1P6/8/8 w - - bm b4; id \"arasan20.191\";  \n3r1rk1/pbq1bp1p/1n1Rp1p1/2p1P1N1/4N2P/1P3Q2/PB3PP1/K6R w - - bm h5; id \"arasan20.192\";  \nr2qk2r/2p1bpp1/p5B1/1p1pP3/3P2p1/5PnP/PP3R2/RNBQ2K1 b kq - bm Rxh3; id \"arasan20.193\";  \nrn2r1k1/p4pn1/1p2p3/qPppP1Q1/3P4/2P2N2/2P2PPP/1R3RK1 w - - bm Nh4; id \"arasan20.194\";  \nk6r/ppqb4/2n5/4p2r/P2p1P1P/B1pQ2P1/2P3B1/RR4K1 w - - bm a5; id \"arasan20.195\";  \n1r1q2k1/p4p1p/2Pp2p1/2p1P3/1r1n4/1P4P1/3R1PBP/3QR1K1 w - - bm e6; id \"arasan20.196\";  \n1rr5/5R2/6k1/3B2P1/1p2P1n1/1PpK4/8/R7 w - - bm Ra6+; id \"arasan20.197\";  \nb1r1r1k1/p2n1p2/1p5p/2qp1Rn1/2P3pN/6P1/P2N1P1P/Q3RBK1 b - - bm Qb4; id \"arasan20.198\";  \n1q4rk/R1nbp3/1n1p3p/QP1P4/3pPp2/2N2P1P/1P1N3K/5B2 w - - bm Nb3; id \"arasan20.199\";  \n4rrk1/1bq1pp2/p2p1n1Q/1pn2p1p/4P3/P1N2P2/BPP3PP/2KRR3 w - - bm g4; id \"arasan20.200\";  \n */
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/tests/enginetests/ArasanTestSuite.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/tests/enginetests/ArasanTestSuite.java	(date 1543670486000)
@@ -1,9 +1,9 @@
 package tests.enginetests;
 
-import javacode.chessengine.search.Engine;
-import javacode.chessprogram.chess.Move;
-import javacode.chessprogram.graphicsandui.Art;
-import javacode.chessprogram.miscAdmin.ExtendedPositionDescriptionParser;
+import com.github.louism33.axolotl.search.Engine;
+import old.chessprogram.chess.Move;
+import old.chessprogram.graphicsandui.Art;
+import old.chessprogram.miscAdmin.ExtendedPositionDescriptionParser;
 import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
Index: src/main/java/tests/enginetests/ZugzwangPositions.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package tests.enginetests;\n\nimport javacode.chessengine.search.Engine;\nimport javacode.chessprogram.chess.Move;\nimport javacode.chessprogram.graphicsandui.Art;\nimport javacode.chessprogram.miscAdmin.ExtendedPositionDescriptionParser;\nimport org.junit.Assert;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.Parameterized;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\n\n@RunWith(Parameterized.class)\npublic class ZugzwangPositions {\n\n    private static final int timeLimit = 10000;\n\n    @Parameterized.Parameters(name = \"{index} Test: {1}\")\n    public static Collection<Object[]> data() {\n        List<Object[]> answers = new ArrayList<>();\n        for (String splitUpZZ : splitUpZZs) {\n            Object[] objectAndName = new Object[2];\n            ExtendedPositionDescriptionParser.EPDObject EPDObject = ExtendedPositionDescriptionParser.parseEDPPosition(splitUpZZ);\n            objectAndName[0] = EPDObject;\n            objectAndName[1] = EPDObject.getId();\n            answers.add(objectAndName);\n        }\n        return answers;\n    }\n\n\n    private static ExtendedPositionDescriptionParser.EPDObject EPDObject;\n\n    public ZugzwangPositions(Object edp, Object name) {\n        EPDObject = (ExtendedPositionDescriptionParser.EPDObject) edp;\n    }\n\n    @Test\n    public void test() {\n        WACTests.reset();\n        System.out.println(Art.boardArt(EPDObject.getBoard()));\n        Move move = new Engine().searchFixedTime(EPDObject.getBoard(), timeLimit);\n        System.out.println(move);\n\n        List<Integer> winningMoveDestination = EPDObject.getBestMoveDestinationIndex();\n        int myMoveDestination = move.destinationIndex;\n\n        Assert.assertTrue(winningMoveDestination.contains(myMoveDestination));\n    }\n\n\n    private static final String zzTests = \"\" +\n            \"8/8/1p1r1k2/p1pPN1p1/P3KnP1/1P6/8/3R4 b - - bm Nxd5; id \\\"ZPTS.01\\\"; \\n\" +\n            \"4KBkr/7p/6PP/4P3/8/3P1p2/8/8 w - - bm g7; id \\\"ZPTS.02\\\"; \\n\" +\n            \"8/6B1/p5p1/Pp4kp/1P5r/5P1Q/4q1PK/8 w - - bm Qxh4; id \\\"ZPTS.03\\\"; \\n\" +\n            \"8/8/8/2p5/1pp5/brpp4/1pprp2P/qnkbK3 w - - bm h3; id \\\"ZPTS.04\\\"; \\n\" +\n            \"6Q1/8/8/7k/8/8/3p1pp1/3Kbrrb w - - bm Qg7; id \\\"ZPTS.05\\\"; \\n\" +\n            \"n1QBq1k1/5p1p/5KP1/p7/8/8/8/8 w - - bm Bc7; id \\\"ZPTS.06\\\"; \\n\" +\n            \"3nQ1k1/p2P2p1/1p6/8/5q1P/8/PP6/1K6 b - - bm Kh7; id \\\"ZPTS.07\\\"; \\n\" +\n            \"8/8/8/1B6/6p1/8/4KPpp/3N2kr w - - bm Kd3 Ke3; id \\\"ZPTS.08\\\"; \\n\" +\n            \"8/3p1p2/5Ppp/K2R2bk/4pPrr/6Pp/4B2P/3N4 w - - bm Nc3; id \\\"ZPTS.09\\\"; \\n\" +\n            \"8/1B6/8/5p2/8/8/5Qrq/1K1R2bk w - - bm Qa7; id \\\"ZPTS.10\\\"; \\n\" +\n            \"5R2/2K5/1pP5/4k2p/3pp3/2p4N/B4N1b/n1R1B2b w - - bm Rxc4; id \\\"ZPTS.11\\\";\\n\" +\n            \"4B3/8/p7/k2N4/7p/K6p/PP5P/2q5 w - - bm Ba4; id \\\"ZPTS.12\\\"; \\n\" +\n            \"3k4/8/4K3/2R5/8/8/8/8 w - - bm Rc6; id \\\"ZPTS.13\\\"; \\n\" +\n            \"1k6/7R/2K5/8/8/8/8/8 w - - bm Rh8; id \\\"ZPTS.14\\\"; \\n\" +\n            \"8/3k4/8/8/3PK3/8/8/8 w - - bm Kd5; id \\\"ZPTS.15\\\"; \\n\" +\n            \"2k5/8/1K1P4/8/8/8/8/8 w - - bm Kc6; id \\\"ZPTS.16\\\";\\n\" +\n            \"1b6/8/8/7p/6k1/6P1/8/6K1 w - - bm Kg2; id \\\"ZPTS.17\\\"; \\n\" +\n            \"k2N2K1/8/8/8/5R2/3n4/3p4/8 w - - bm Rf7; id \\\"ZPTS.18\\\"; \\n\" +\n            \"2n5/8/Pp5n/5N2/8/5k2/3P4/7K w - - bm d4; id \\\"ZPTS.19\\\"; \\n\" +\n            \"8/5b2/p2k4/1p1p1p1p/1P1K1P1P/2P1PB2/8/8 w - - bm Be2; id \\\"ZPTS.20\\\"; \\n\" +\n            \"8/8/p3R3/1p5p/1P5p/6rp/5K1p/7k w - - bm Re1; id \\\"ZPTS.21\\\"; \\n\" +\n            \"8/p7/1p6/p7/kq1Q4/8/K7/8 w - - bm Qd3; id \\\"ZPTS.22\\\"; \\n\" +\n            \"8/8/8/4N3/8/7p/8/5K1k w - - bm Ng4; id \\\"ZPTS.23\\\"; \\n\" +\n            \"1r4RK/2n5/7k/8/8/8/8/8 b - - bm Ne8; id \\\"ZPTS.24\\\"; \\n\" +\n            \"8/8/1p1K4/Pp6/2k1p3/8/1P6/8 w - - bm a6; id \\\"ZPTS.25\\\";\\n\" +\n            \"6k1/3p4/P2P4/8/5Kp1/1p4Q1/p5p1/b7 w - - bm Qxg2; id \\\"ZPTS.26\\\"; \\n\" +\n            \"8/5p2/4b1p1/7R/5K1P/2r3B1/7N/4b1k1 w - - bm Nf3; id \\\"ZPTS.27\\\"; \\n\" +\n            \"8/8/7p/2R5/4pp1K/8/8/3k2b1 w - - bm Rc4; id \\\"ZPTS.28\\\";  \\n\" +\n            \"8/1p5k/1P1p4/3p4/3Pp2p/2K1P2p/7P/8 w - - bm Kb2; id \\\"ZPTS.29\\\"; \\n\" +\n            \"8/3p1N2/8/4B3/2K2p2/b3P3/pP2P3/k7 b - - bm d6; id \\\"ZPTS.30\\\";\" +\n            \"\";\n\n    private static final String[] splitUpZZs = zzTests.split(\"\\\\\\n\");\n\n}\n\n/*\n8/8/1p1r1k2/p1pPN1p1/P3KnP1/1P6/8/3R4 b - - bm Nxd5; id \"ZPTS.01\"; \n4KBkr/7p/6PP/4P3/8/3P1p2/8/8 w - - bm g7; id \"ZPTS.02\"; \n8/6B1/p5p1/Pp4kp/1P5r/5P1Q/4q1PK/8 w - - bm Qxh4; id \"ZPTS.03\"; \n8/8/8/2p5/1pp5/brpp4/1pprp2P/qnkbK3 w - - bm h3; id \"ZPTS.04\"; \n6Q1/8/8/7k/8/8/3p1pp1/3Kbrrb w - - bm Qg7; id \"ZPTS.05\"; \nn1QBq1k1/5p1p/5KP1/p7/8/8/8/8 w - - bm Bc7; id \"ZPTS.06\"; \n3nQ1k1/p2P2p1/1p6/8/5q1P/8/PP6/1K6 b - - bm Kh7; id \"ZPTS.07\"; \n8/8/8/1B6/6p1/8/4KPpp/3N2kr w - - bm Kd3 Ke3; id \"ZPTS.08\"; \n8/3p1p2/5Ppp/K2R2bk/4pPrr/6Pp/4B2P/3N4 w - - bm Nc3; id \"ZPTS.09\"; \n8/1B6/8/5p2/8/8/5Qrq/1K1R2bk w - - bm Qa7; id \"ZPTS.10\"; \n5R2/2K5/1pP5/4k2p/3pp3/2p4N/B4N1b/n1R1B2b w - - bm Rxc4; id \"ZPTS.11\";\n4B3/8/p7/k2N4/7p/K6p/PP5P/2q5 w - - bm Ba4; id \"ZPTS.12\"; \n3k4/8/4K3/2R5/8/8/8/8 w - - bm Rc6; id \"ZPTS.13\"; \n1k6/7R/2K5/8/8/8/8/8 w - - bm Rh8; id \"ZPTS.14\"; \n8/3k4/8/8/3PK3/8/8/8 w - - bm Kd5; id \"ZPTS.15\"; \n2k5/8/1K1P4/8/8/8/8/8 w - - bm Kc6; id \"ZPTS.16\";\n1b6/8/8/7p/6k1/6P1/8/6K1 w - - bm Kg2; id \"ZPTS.17\"; \nk2N2K1/8/8/8/5R2/3n4/3p4/8 w - - bm Rf7; id \"ZPTS.18\"; \n2n5/8/Pp5n/5N2/8/5k2/3P4/7K w - - bm d4; id \"ZPTS.19\"; \n8/5b2/p2k4/1p1p1p1p/1P1K1P1P/2P1PB2/8/8 w - - bm Be2; id \"ZPTS.20\"; \n8/8/p3R3/1p5p/1P5p/6rp/5K1p/7k w - - bm Re1; id \"ZPTS.21\"; \n8/p7/1p6/p7/kq1Q4/8/K7/8 w - - bm Qd3; id \"ZPTS.22\"; \n8/8/8/4N3/8/7p/8/5K1k w - - bm Ng4; id \"ZPTS.23\"; \n1r4RK/2n5/7k/8/8/8/8/8 b - - bm Ne8; id \"ZPTS.24\"; \n8/8/1p1K4/Pp6/2k1p3/8/1P6/8 w - - bm a6; id \"ZPTS.25\";\n6k1/3p4/P2P4/8/5Kp1/1p4Q1/p5p1/b7 w - - bm Qxg2; id \"ZPTS.26\"; \n8/5p2/4b1p1/7R/5K1P/2r3B1/7N/4b1k1 w - - bm Nf3; id \"ZPTS.27\"; \n8/8/7p/2R5/4pp1K/8/8/3k2b1 w - - bm Rc4; id \"ZPTS.28\";  \n8/1p5k/1P1p4/3p4/3Pp2p/2K1P2p/7P/8 w - - bm Kb2; id \"ZPTS.29\"; \n8/3p1N2/8/4B3/2K2p2/b3P3/pP2P3/k7 b - - bm d6; id \"ZPTS.30\";\n\n */
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/tests/enginetests/ZugzwangPositions.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/tests/enginetests/ZugzwangPositions.java	(date 1543670485000)
@@ -1,9 +1,9 @@
 package tests.enginetests;
 
-import javacode.chessengine.search.Engine;
-import javacode.chessprogram.chess.Move;
-import javacode.chessprogram.graphicsandui.Art;
-import javacode.chessprogram.miscAdmin.ExtendedPositionDescriptionParser;
+import com.github.louism33.axolotl.search.Engine;
+import old.chessprogram.chess.Move;
+import old.chessprogram.graphicsandui.Art;
+import old.chessprogram.miscAdmin.ExtendedPositionDescriptionParser;
 import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
Index: src/main/java/tests/enginetests/LapuceII.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package tests.enginetests;\n\nimport javacode.chessengine.search.Engine;\nimport javacode.chessprogram.chess.Move;\nimport javacode.chessprogram.graphicsandui.Art;\nimport javacode.chessprogram.miscAdmin.ExtendedPositionDescriptionParser;\nimport org.junit.Assert;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.Parameterized;\nimport org.junit.runners.Parameterized.Parameters;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\n\n@RunWith(Parameterized.class)\npublic class LapuceII {\n    /*\n    Arasan = \t600 sec.\t33/35\n(rating: 2890)\n     */\n\n    private static final int timeLimit = 600000;\n    private static final Engine engine = null;\n\n    @Parameters(name = \"{index} Test: {1}\")\n    public static Collection<Object[]> data() {\n        List<Object[]> answers = new ArrayList<>();\n        for (String splitUpWAC : splitUpWACs) {\n            Object[] objectAndName = new Object[2];\n            ExtendedPositionDescriptionParser.EPDObject EPDObject = ExtendedPositionDescriptionParser.parseEDPPosition(splitUpWAC);\n            objectAndName[0] = EPDObject;\n            objectAndName[1] = EPDObject.getId();\n            answers.add(objectAndName);\n        }\n        return answers;\n    }\n\n\n    private static ExtendedPositionDescriptionParser.EPDObject EPDObject;\n\n    public LapuceII(Object edp, Object name) {\n        EPDObject = (ExtendedPositionDescriptionParser.EPDObject) edp;\n    }\n\n    @Test\n    public void test() {\n        WACTests.reset();\n        System.out.println(Art.boardArt(EPDObject.getBoard()));\n        Move move = engine.searchFixedTime(EPDObject.getBoard(), timeLimit);\n        System.out.println(move);\n\n        List<Integer> winningMoveDestination = EPDObject.getBestMoveDestinationIndex();\n        int myMoveDestination = move.destinationIndex;\n\n        Assert.assertTrue(winningMoveDestination.contains(myMoveDestination));\n\n        List<Integer> losingMoveDestination = EPDObject.getAvoidMoveDestinationIndex();\n\n        Assert.assertFalse(losingMoveDestination.contains(myMoveDestination));\n    }\n\n\n\n    private static final String wacTests = \"\" +\n            \"r3kb1r/3n1pp1/p6p/2pPp2q/Pp2N3/3B2PP/1PQ2P2/R3K2R w KQkq - bm d6; id \\\"LCTPOS01 (d6!)\\\";\\n\" +\n            \"1k1r3r/pp2qpp1/3b1n1p/3pNQ2/2pP1P2/2N1P3/PP4PP/1K1RR3 b - - bm Bb4; id \\\"LCTPOS02 (...Bb4!)\\\";\\n\" +\n            \"r6k/pp4p1/2p1b3/3pP3/7q/P2B3r/1PP2Q1P/2K1R1R1 w - - bm Qc5; id \\\"LCTPOS03 (Qc5!)\\\";\\n\" +\n            \"1nr5/2rbkppp/p3p3/Np6/2PRPP2/8/PKP1B1PP/3R4 b - - bm e5; id \\\"LCTPOS04 (....e5!)\\\";\\n\" +\n            \"2r2rk1/1p1bq3/p3p2p/3pPpp1/1P1Q4/P7/2P2PPP/2R1RBK1 b - - bm Bb5; id \\\"LCTPOS05 (...Bb5!)\\\";\\n\" +\n            \"3r1bk1/p4ppp/Qp2p3/8/1P1B4/Pq2P1P1/2r2P1P/R3R1K1 b - - bm e5; id \\\"LCTPOS06 (...e5!)\\\";\\n\" +\n            \"r1b2r1k/pp2q1pp/2p2p2/2p1n2N/4P3/1PNP2QP/1PP2RP1/5RK1 w - - bm Nd1; id \\\"LCTPOS07 (Nd1!)\\\";\\n\" +\n            \"r2qrnk1/pp3ppb/3b1n1p/1Pp1p3/2P1P2N/P5P1/1B1NQPBP/R4RK1 w - - bm Bh3; id \\\"LCTPOS08 (Bh3!)\\\";\\n\" +\n            \"5nk1/Q4bpp/5p2/8/P1n1PN2/q4P2/6PP/1R4K1 w - - bm Qd4; id \\\"LCTPOS09 (Qd4!)\\\";\\n\" +\n            \"r3k2r/3bbp1p/p1nppp2/5P2/1p1NP3/5NP1/PPPK3P/3R1B1R b kq - bm Bf8; id \\\"LCTPOS10 (...Bf8!)\\\";\\n\" +\n            \"bn6/1q4n1/1p1p1kp1/2pPp1pp/1PP1P1P1/3N1P1P/4B1K1/2Q2N2 w - - bm h4; id \\\"LCTPOS11 (h4!)\\\";\\n\" +\n            \"3r2k1/pp2npp1/2rqp2p/8/3PQ3/1BR3P1/PP3P1P/3R2K1 b - - bm Rb6; id \\\"LCTPOS12 (...Rb6!)\\\";\\n\" +\n            \"1r2r1k1/4ppbp/B5p1/3P4/pp1qPB2/2n2Q1P/P4PP1/4RRK1 b - - bm Nxa2; id \\\"LCTPOS13 (...Nxa2!)\\\";\\n\" +\n            \"r2qkb1r/1b3ppp/p3pn2/1p6/1n1P4/1BN2N2/PP2QPPP/R1BR2K1 w kq - bm d5; id \\\"LCTPOS14 (d5!)\\\";\\n\" +\n            \"1r4k1/1q2bp2/3p2p1/2pP4/p1N4R/2P2QP1/1P3PK1/8 w - - bm Nxd6; id \\\"LCTCMB01 (Nxd6!)\\\";\\n\" +\n            \"rn3rk1/pbppq1pp/1p2pb2/4N2Q/3PN3/3B4/PPP2PPP/R3K2R w KQ - bm Qxh7+; id \\\"LCTCMB02 (Qxh7!)\\\";\\n\" +\n            \"4r1k1/3b1p2/5qp1/1BPpn2p/7n/r3P1N1/2Q1RPPP/1R3NK1 b - - bm Qf3; id \\\"LCTCMB03 (...Qf3!)\\\";\\n\" +\n            \"2k2b1r/1pq3p1/2p1pp2/p1n1PnNp/2P2B2/2N4P/PP2QPP1/3R2K1 w - - bm exf6; id \\\"LCTCMB04 (exf6!)\\\";\\n\" +\n            \"2r2r2/3qbpkp/p3n1p1/2ppP3/6Q1/1P1B3R/PBP3PP/5R1K w - - bm Rxh7+; id \\\"LCTCMB05 (Rxh7!)\\\";\\n\" +\n            \"2r1k2r/2pn1pp1/1p3n1p/p3PP2/4q2B/P1P5/2Q1N1PP/R4RK1 w - - bm exf6; id \\\"LCTCMB06 (exf6!)\\\";\\n\" +\n            \"2rr2k1/1b3ppp/pb2p3/1p2P3/1P2BPnq/P1N3P1/1B2Q2P/R4R1K b - - bm Rxc3; id \\\"LCTCMB07 (...Rxc3!)\\\";\\n\" +\n            \"2b1r1k1/r4ppp/p7/2pNP3/4Q3/q6P/2P2PP1/3RR1K1 w - - bm Nf6+; id \\\"LCTCMB08 (Nf6!)\\\";\\n\" +\n            \"6k1/5p2/3P2p1/7n/3QPP2/7q/r2N3P/6RK b - - bm Rxd2; id \\\"LCTCMB09 (...Rxd2!)\\\";\\n\" +\n            \"rq2rbk1/6p1/p2p2Pp/1p1Rn3/4PB2/6Q1/PPP1B3/2K3R1 w - - bm Bxh6; id \\\"LCTCMB10 (Bxh6!)\\\";\\n\" +\n            \"rnbq2k1/p1r2p1p/1p1p1Pp1/1BpPn1N1/P7/2P5/6PP/R1B1QRK1 w - - bm Nxh7; id \\\"LCTCMB11 (Nxh7!)\\\";\\n\" +\n            \"r2qrb1k/1p1b2p1/p2ppn1p/8/3NP3/1BN5/PPP3QP/1K3RR1 w - - bm e5; id \\\"LCTCMB12 (e5!)\\\";\\n\" +\n            \"8/1p3pp1/7p/5P1P/2k3P1/8/2K2P2/8 w - - bm f6; id \\\"LCTFIN01 (f6!)\\\";\\n\" +\n            \"8/pp2r1k1/2p1p3/3pP2p/1P1P1P1P/P5KR/8/8 w - - bm f5; id \\\"LCTFIN02 (f5!)\\\";\\n\" +\n            \"8/3p4/p1bk3p/Pp6/1Kp1PpPp/2P2P1P/2P5/5B2 b - - bm Bxe4; id \\\"LCTFIN03 (...Bxe4!)\\\";\\n\" +\n            \"5k2/7R/4P2p/5K2/p1r2P1p/8/8/8 b - - bm h3; id \\\"LCTFIN04 (...h3!)\\\";\\n\" +\n            \"6k1/6p1/7p/P1N5/1r3p2/7P/1b3PP1/3bR1K1 w - - bm a6; id \\\"LCTFIN05 (a6!)\\\";\\n\" +\n            \"8/3b4/5k2/2pPnp2/1pP4N/pP1B2P1/P3K3/8 b - - bm f4; id \\\"LCTFIN06 (...f4!)\\\";\\n\" +\n            \"6k1/4pp1p/3p2p1/P1pPb3/R7/1r2P1PP/3B1P2/6K1 w - - bm Bb4; id \\\"LCTFIN07 (Bb4!)\\\";\\n\" +\n            \"2k5/p7/Pp1p1b2/1P1P1p2/2P2P1p/3K3P/5B2/8 w - - bm c5; id \\\"LCTFIN08 (c5!)\\\";\\n\" +\n            \"8/5Bp1/4P3/6pP/1b1k1P2/5K2/8/8 w - - bm Kg4; id \\\"LCTFIN09 (Kg4!)\\\";\\n\" +\n            \"\";\n\n    private static final String[] splitUpWACs = wacTests.split(\"\\\\\\n\");\n    static int totalWACS = splitUpWACs.length;\n\n}\n    \n    \n\n    /*\nr3kb1r/3n1pp1/p6p/2pPp2q/Pp2N3/3B2PP/1PQ2P2/R3K2R w KQkq - bm d6; id \"LCTPOS01 (d6!)\";\n1k1r3r/pp2qpp1/3b1n1p/3pNQ2/2pP1P2/2N1P3/PP4PP/1K1RR3 b - - bm Bb4; id \"LCTPOS02 (...Bb4!)\";\nr6k/pp4p1/2p1b3/3pP3/7q/P2B3r/1PP2Q1P/2K1R1R1 w - - bm Qc5; id \"LCTPOS03 (Qc5!)\";\n1nr5/2rbkppp/p3p3/Np6/2PRPP2/8/PKP1B1PP/3R4 b - - bm e5; id \"LCTPOS04 (....e5!)\";\n2r2rk1/1p1bq3/p3p2p/3pPpp1/1P1Q4/P7/2P2PPP/2R1RBK1 b - - bm Bb5; id \"LCTPOS05 (...Bb5!)\";\n3r1bk1/p4ppp/Qp2p3/8/1P1B4/Pq2P1P1/2r2P1P/R3R1K1 b - - bm e5; id \"LCTPOS06 (...e5!)\";\nr1b2r1k/pp2q1pp/2p2p2/2p1n2N/4P3/1PNP2QP/1PP2RP1/5RK1 w - - bm Nd1; id \"LCTPOS07 (Nd1!)\";\nr2qrnk1/pp3ppb/3b1n1p/1Pp1p3/2P1P2N/P5P1/1B1NQPBP/R4RK1 w - - bm Bh3; id \"LCTPOS08 (Bh3!)\";\n5nk1/Q4bpp/5p2/8/P1n1PN2/q4P2/6PP/1R4K1 w - - bm Qd4; id \"LCTPOS09 (Qd4!)\";\nr3k2r/3bbp1p/p1nppp2/5P2/1p1NP3/5NP1/PPPK3P/3R1B1R b kq - bm Bf8; id \"LCTPOS10 (...Bf8!)\";\nbn6/1q4n1/1p1p1kp1/2pPp1pp/1PP1P1P1/3N1P1P/4B1K1/2Q2N2 w - - bm h4; id \"LCTPOS11 (h4!)\";\n3r2k1/pp2npp1/2rqp2p/8/3PQ3/1BR3P1/PP3P1P/3R2K1 b - - bm Rb6; id \"LCTPOS12 (...Rb6!)\";\n1r2r1k1/4ppbp/B5p1/3P4/pp1qPB2/2n2Q1P/P4PP1/4RRK1 b - - bm Nxa2; id \"LCTPOS13 (...Nxa2!)\";\nr2qkb1r/1b3ppp/p3pn2/1p6/1n1P4/1BN2N2/PP2QPPP/R1BR2K1 w kq - bm d5; id \"LCTPOS14 (d5!)\";\n1r4k1/1q2bp2/3p2p1/2pP4/p1N4R/2P2QP1/1P3PK1/8 w - - bm Nxd6; id \"LCTCMB01 (Nxd6!)\";\nrn3rk1/pbppq1pp/1p2pb2/4N2Q/3PN3/3B4/PPP2PPP/R3K2R w KQ - bm Qxh7+; id \"LCTCMB02 (Qxh7!)\";\n4r1k1/3b1p2/5qp1/1BPpn2p/7n/r3P1N1/2Q1RPPP/1R3NK1 b - - bm Qf3; id \"LCTCMB03 (...Qf3!)\";\n2k2b1r/1pq3p1/2p1pp2/p1n1PnNp/2P2B2/2N4P/PP2QPP1/3R2K1 w - - bm exf6; id \"LCTCMB04 (exf6!)\";\n2r2r2/3qbpkp/p3n1p1/2ppP3/6Q1/1P1B3R/PBP3PP/5R1K w - - bm Rxh7+; id \"LCTCMB05 (Rxh7!)\";\n2r1k2r/2pn1pp1/1p3n1p/p3PP2/4q2B/P1P5/2Q1N1PP/R4RK1 w - - bm exf6; id \"LCTCMB06 (exf6!)\";\n2rr2k1/1b3ppp/pb2p3/1p2P3/1P2BPnq/P1N3P1/1B2Q2P/R4R1K b - - bm Rxc3; id \"LCTCMB07 (...Rxc3!)\";\n2b1r1k1/r4ppp/p7/2pNP3/4Q3/q6P/2P2PP1/3RR1K1 w - - bm Nf6+; id \"LCTCMB08 (Nf6!)\";\n6k1/5p2/3P2p1/7n/3QPP2/7q/r2N3P/6RK b - - bm Rxd2; id \"LCTCMB09 (...Rxd2!)\";\nrq2rbk1/6p1/p2p2Pp/1p1Rn3/4PB2/6Q1/PPP1B3/2K3R1 w - - bm Bxh6; id \"LCTCMB10 (Bxh6!)\";\nrnbq2k1/p1r2p1p/1p1p1Pp1/1BpPn1N1/P7/2P5/6PP/R1B1QRK1 w - - bm Nxh7; id \"LCTCMB11 (Nxh7!)\";\nr2qrb1k/1p1b2p1/p2ppn1p/8/3NP3/1BN5/PPP3QP/1K3RR1 w - - bm e5; id \"LCTCMB12 (e5!)\";\n8/1p3pp1/7p/5P1P/2k3P1/8/2K2P2/8 w - - bm f6; id \"LCTFIN01 (f6!)\";\n8/pp2r1k1/2p1p3/3pP2p/1P1P1P1P/P5KR/8/8 w - - bm f5; id \"LCTFIN02 (f5!)\";\n8/3p4/p1bk3p/Pp6/1Kp1PpPp/2P2P1P/2P5/5B2 b - - bm Bxe4; id \"LCTFIN03 (...Bxe4!)\";\n5k2/7R/4P2p/5K2/p1r2P1p/8/8/8 b - - bm h3; id \"LCTFIN04 (...h3!)\";\n6k1/6p1/7p/P1N5/1r3p2/7P/1b3PP1/3bR1K1 w - - bm a6; id \"LCTFIN05 (a6!)\";\n8/3b4/5k2/2pPnp2/1pP4N/pP1B2P1/P3K3/8 b - - bm f4; id \"LCTFIN06 (...f4!)\";\n6k1/4pp1p/3p2p1/P1pPb3/R7/1r2P1PP/3B1P2/6K1 w - - bm Bb4; id \"LCTFIN07 (Bb4!)\";\n2k5/p7/Pp1p1b2/1P1P1p2/2P2P1p/3K3P/5B2/8 w - - bm c5; id \"LCTFIN08 (c5!)\";\n8/5Bp1/4P3/6pP/1b1k1P2/5K2/8/8 w - - bm Kg4; id \"LCTFIN09 (Kg4!)\";\n\n     */\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/tests/enginetests/LapuceII.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/tests/enginetests/LapuceII.java	(date 1543670486000)
@@ -1,9 +1,9 @@
 package tests.enginetests;
 
-import javacode.chessengine.search.Engine;
-import javacode.chessprogram.chess.Move;
-import javacode.chessprogram.graphicsandui.Art;
-import javacode.chessprogram.miscAdmin.ExtendedPositionDescriptionParser;
+import com.github.louism33.axolotl.search.Engine;
+import old.chessprogram.chess.Move;
+import old.chessprogram.graphicsandui.Art;
+import old.chessprogram.miscAdmin.ExtendedPositionDescriptionParser;
 import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
Index: src/main/java/javacode/chessengine/protocolhelperclasses/UCIBoardParser.java
===================================================================
--- src/main/java/javacode/chessengine/protocolhelperclasses/UCIBoardParser.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/com/github/louism33/axolotl/main/UCIBoardParser.java	(date 1543758440000)
@@ -1,24 +1,19 @@
-package javacode.chessengine.protocolhelperclasses;
+package com.github.louism33.axolotl.main;
 
 import com.fluxchess.jcpi.models.GenericBoard;
 import com.fluxchess.jcpi.models.GenericMove;
 import com.fluxchess.jcpi.models.IllegalNotationException;
-import javacode.chessprogram.chess.Chessboard;
-import javacode.chessprogram.chess.Move;
-import javacode.chessprogram.miscAdmin.FenParser;
+import com.github.louism33.chesscore.Chessboard;
+import com.github.louism33.chesscore.MoveParser;
 
 import java.util.List;
 
-import static javacode.chessprogram.moveGeneration.MoveGeneratorMaster.generateLegalMoves;
-import static javacode.chessprogram.moveMaking.MoveOrganiser.flipTurn;
-import static javacode.chessprogram.moveMaking.MoveOrganiser.makeMoveMaster;
-
 public class UCIBoardParser {
     
-    public static GenericMove convertMyMoveToGenericMove(Move move){
+    public static GenericMove convertMyMoveToGenericMove(int move){
         GenericMove genericMove = null;
         try {
-            genericMove = new GenericMove(move.toString());
+            genericMove = new GenericMove(MoveParser.toString(move));
         } catch (IllegalNotationException e) {
             System.out.println("Problem with: " +move);
             e.printStackTrace();
@@ -30,10 +25,9 @@
         if (genericBoard == null || moves == null){
             return null;
         }
-        Chessboard board = FenParser.makeBoardBasedOnFEN(genericBoard.toString());
+        Chessboard board = new Chessboard(genericBoard.toString());
         for (GenericMove genericMove : moves){
-            makeMoveMaster(board, moveFromGenericMove(board, genericMove));
-            flipTurn(board);
+            board.makeMoveAndFlipTurn(moveFromGenericMove(board, genericMove));
         }
         return board;
     }
@@ -42,25 +36,25 @@
 
         for (int i = moves.size() - 2; i < moves.size(); i++) {
             GenericMove genericMove = moves.get(i);
-            makeMoveMaster(board, moveFromGenericMove(board, genericMove));
-            flipTurn(board);
+            board.makeMoveAndFlipTurn(moveFromGenericMove(board, genericMove));
         }
         return board;
     }
     
     //avoid move gen if possible
-    private static Move moveFromGenericMove(Chessboard board, GenericMove genericMove){
+    private static int moveFromGenericMove(Chessboard board, GenericMove genericMove){
         String s = genericMove.toString();
-        List<Move> moves = generateLegalMoves(board, board.isWhiteTurn());
-        Move move = null;
-        
-        for (Move myMove : moves) {
-            if (s.equalsIgnoreCase(myMove.toString())) {
+        int[] moves = board.generateLegalMoves();
+        int move = 0;
+
+        for (int i = 0; i < moves.length; i++) {
+            int myMove = moves[i];
+            if (s.equalsIgnoreCase(MoveParser.toString(myMove))) {
                 move = myMove;
                 break;
             }
         }
-        if (move == null){
+        if (move == 0){
             throw new RuntimeException("Could not parse move: "+ s);
         }
         return move;
Index: src/main/java/tests/enginetests/WACTests.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package tests.enginetests;\n\nimport javacode.chessengine.search.Engine;\nimport javacode.chessprogram.chess.Move;\nimport javacode.chessprogram.graphicsandui.Art;\nimport javacode.chessprogram.miscAdmin.ExtendedPositionDescriptionParser;\nimport org.junit.Assert;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.Parameterized;\nimport org.junit.runners.Parameterized.Parameters;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\n\n@RunWith(Parameterized.class)\npublic class WACTests {\n    /*\n    Arasan = 10 sec.\t298/300\n     */\n\n    private static Engine engine = null;\n    \n    private static final int timeLimit = 10_000;\n\n    @Parameters(name = \"{index} Test: {1}\")\n    public static Collection<Object[]> data() {\n        List<Object[]> answers = new ArrayList<>();\n\n        // inclusive\n        int counter = 0;\n        int until = 72;\n        int from = 70;\n        \n        for (String splitUpWAC : splitUpWACs) {\n            counter++;\n            \n            if (counter < from){\n//                continue;\n            }\n            \n            Object[] objectAndName = new Object[2];\n            ExtendedPositionDescriptionParser.EPDObject EPDObject = ExtendedPositionDescriptionParser.parseEDPPosition(splitUpWAC);\n            objectAndName[0] = EPDObject;\n            objectAndName[1] = EPDObject.getId();\n            answers.add(objectAndName);\n            \n\n            if (counter >= until){\n//                break;\n            }\n        }\n        return answers;\n    }\n\n\n    private static ExtendedPositionDescriptionParser.EPDObject EPDObject;\n\n    public WACTests(Object edp, Object name) {\n        EPDObject = (ExtendedPositionDescriptionParser.EPDObject) edp;\n    }\n\n\n    public static void reset(){\n        engine = new Engine();\n    }\n\n    @Test\n    public void test() {\n        WACTests.reset();\n        System.out.println(Art.boardArt(EPDObject.getBoard()));\n\n        Move move = engine.searchFixedTime(EPDObject.getBoard(), timeLimit);\n        System.out.println(move);\n\n        List<Integer> winningMoveDestination = EPDObject.getBestMoveDestinationIndex();\n        int myMoveDestination = move.destinationIndex;\n\n        Assert.assertTrue(winningMoveDestination.contains(myMoveDestination));\n\n\n        List<Integer> losingMoveDestination = EPDObject.getAvoidMoveDestinationIndex();\n\n        Assert.assertFalse(losingMoveDestination.contains(myMoveDestination));\n    }\n\n    private static final String wacTests = \"\" +\n            \"2rr3k/pp3pp1/1nnqbN1p/3pN3/2pP4/2P3Q1/PPB4P/R4RK1 w - - bm Qg6; id \\\"WAC.001\\\";\\n\" +\n            \"8/7p/5k2/5p2/p1p2P2/Pr1pPK2/1P1R3P/8 b - - bm Rxb2; id \\\"WAC.002\\\";\\n\" +\n            \"5rk1/1ppb3p/p1pb4/6q1/3P1p1r/2P1R2P/PP1BQ1P1/5RKN w - - bm Rg3; id \\\"WAC.003\\\";\\n\" +\n            \"r1bq2rk/pp3pbp/2p1p1pQ/7P/3P4/2PB1N2/PP3PPR/2KR4 w - - bm Qxh7+; id \\\"WAC.004\\\";\\n\" +\n            \"5k2/6pp/p1qN4/1p1p4/3P4/2PKP2Q/PP3r2/3R4 b - - bm Qc4+; id \\\"WAC.005\\\";\\n\" +\n            \"7k/p7/1R5K/6r1/6p1/6P1/8/8 w - - bm Rb7; id \\\"WAC.006\\\";\\n\" +\n            \"rnbqkb1r/pppp1ppp/8/4P3/6n1/7P/PPPNPPP1/R1BQKBNR b KQkq - bm Ne3; id \\\"WAC.007\\\";\\n\" +\n            \"r4q1k/p2bR1rp/2p2Q1N/5p2/5p2/2P5/PP3PPP/R5K1 w - - bm Rf7; id \\\"WAC.008\\\";\\n\" +\n            \"3q1rk1/p4pp1/2pb3p/3p4/6Pr/1PNQ4/P1PB1PP1/4RRK1 b - - bm Bh2+; id \\\"WAC.009\\\";\\n\" +\n            \"2br2k1/2q3rn/p2NppQ1/2p1P3/Pp5R/4P3/1P3PPP/3R2K1 w - - bm Rxh7; id \\\"WAC.010\\\";\\n\" +\n            \"r1b1kb1r/3q1ppp/pBp1pn2/8/Np3P2/5B2/PPP3PP/R2Q1RK1 w kq - bm Bxc6; id \\\"WAC.011\\\";\\n\" +\n            \"4k1r1/2p3r1/1pR1p3/3pP2p/3P2qP/P4N2/1PQ4P/5R1K b - - bm Qxf3+; id \\\"WAC.012\\\";\\n\" +\n            \"5rk1/pp4p1/2n1p2p/2Npq3/2p5/6P1/P3P1BP/R4Q1K w - - bm Qxf8+; id \\\"WAC.013\\\";\\n\" +\n            \"r2rb1k1/pp1q1p1p/2n1p1p1/2bp4/5P2/PP1BPR1Q/1BPN2PP/R5K1 w - - bm Qxh7+; id \\\"WAC.014\\\";\\n\" +\n            \"1R6/1brk2p1/4p2p/p1P1Pp2/P7/6P1/1P4P1/2R3K1 w - - bm Rxb7; id \\\"WAC.015\\\";\\n\" +\n            \"r4rk1/ppp2ppp/2n5/2bqp3/8/P2PB3/1PP1NPPP/R2Q1RK1 w - - bm Nc3; id \\\"WAC.016\\\";\\n\" +\n            \"1k5r/pppbn1pp/4q1r1/1P3p2/2NPp3/1QP5/P4PPP/R1B1R1K1 w - - bm Ne5; id \\\"WAC.017\\\";\\n\" +\n            \"R7/P4k2/8/8/8/8/r7/6K1 w - - bm Rh8; id \\\"WAC.018\\\";\\n\" +\n            \"r1b2rk1/ppbn1ppp/4p3/1QP4q/3P4/N4N2/5PPP/R1B2RK1 w - - bm c6; id \\\"WAC.019\\\";\\n\" +\n            \"r2qkb1r/1ppb1ppp/p7/4p3/P1Q1P3/2P5/5PPP/R1B2KNR b kq - bm Bb5; id \\\"WAC.020\\\";\\n\" +\n            \"5rk1/1b3p1p/pp3p2/3n1N2/1P6/P1qB1PP1/3Q3P/4R1K1 w - - bm Qh6; id \\\"WAC.021\\\";\\n\" +\n            \"r1bqk2r/ppp1nppp/4p3/n5N1/2BPp3/P1P5/2P2PPP/R1BQK2R w KQkq - bm Ba2 Nxf7; id \\\"WAC.022\\\";\\n\" +\n            \"r3nrk1/2p2p1p/p1p1b1p1/2NpPq2/3R4/P1N1Q3/1PP2PPP/4R1K1 w - - bm g4; id \\\"WAC.023\\\";\\n\" +\n            \"6k1/1b1nqpbp/pp4p1/5P2/1PN5/4Q3/P5PP/1B2B1K1 b - - bm Bd4; id \\\"WAC.024\\\";\\n\" +\n            \"3R1rk1/8/5Qpp/2p5/2P1p1q1/P3P3/1P2PK2/8 b - - bm Qh4+; id \\\"WAC.025\\\";\\n\" +\n            \"3r2k1/1p1b1pp1/pq5p/8/3NR3/2PQ3P/PP3PP1/6K1 b - - bm Bf5; id \\\"WAC.026\\\";\\n\" +\n            \"7k/pp4np/2p3p1/3pN1q1/3P4/Q7/1r3rPP/2R2RK1 w - - bm Qf8+; id \\\"WAC.027\\\";\\n\" +\n            \"1r1r2k1/4pp1p/2p1b1p1/p3R3/RqBP4/4P3/1PQ2PPP/6K1 b - - bm Qe1+; id \\\"WAC.028\\\";\\n\" +\n            \"r2q2k1/pp1rbppp/4pn2/2P5/1P3B2/6P1/P3QPBP/1R3RK1 w - - bm c6; id \\\"WAC.029\\\";\\n\" +\n            \"1r3r2/4q1kp/b1pp2p1/5p2/pPn1N3/6P1/P3PPBP/2QRR1K1 w - - bm Nxd6; id \\\"WAC.030\\\";\\n\" +\n            \"rb3qk1/pQ3ppp/4p3/3P4/8/1P3N2/1P3PPP/3R2K1 w - - bm Qxa8 d6 dxe6 g3; id \\\"WAC.031\\\";\\n\" +\n            \"6k1/p4p1p/1p3np1/2q5/4p3/4P1N1/PP3PPP/3Q2K1 w - - bm Qd8+; id \\\"WAC.032\\\";\\n\" +\n            \"8/p1q2pkp/2Pr2p1/8/P3Q3/6P1/5P1P/2R3K1 w - - bm Qe5+ Qf4; id \\\"WAC.033\\\";\\n\" +\n            \"7k/1b1r2p1/p6p/1p2qN2/3bP3/3Q4/P5PP/1B1R3K b - - bm Bg1; id \\\"WAC.034\\\";\\n\" +\n            \"r3r2k/2R3pp/pp1q1p2/8/3P3R/7P/PP3PP1/3Q2K1 w - - bm Rxh7+; id \\\"WAC.035\\\";\\n\" +\n            \"3r4/2p1rk2/1pQq1pp1/7p/1P1P4/P4P2/6PP/R1R3K1 b - - bm Re1+; id \\\"WAC.036\\\";\\n\" +\n            \"2r5/2rk2pp/1pn1pb2/pN1p4/P2P4/1N2B3/nPR1KPPP/3R4 b - - bm Nxd4+; id \\\"WAC.037\\\";\\n\" +\n            \"4k3/p4prp/1p6/2b5/8/2Q3P1/P2R1PKP/4q3 w - - bm Qd3 Rd8+; id \\\"WAC.038\\\";\\n\" +\n            \"r1br2k1/pp2bppp/2nppn2/8/2P1PB2/2N2P2/PqN1B1PP/R2Q1R1K w - - bm Na4; id \\\"WAC.039\\\";\\n\" +\n            \"3r1r1k/1p4pp/p4p2/8/1PQR4/6Pq/P3PP2/2R3K1 b - - bm Rc8; id \\\"WAC.040\\\";\\n\" +\n            \"1k6/5RP1/1P6/1K6/6r1/8/8/8 w - - bm Ka5 Kc5 b7; id \\\"WAC.041\\\";\\n\" +\n            \"r1b1r1k1/pp1n1pbp/1qp3p1/3p4/1B1P4/Q3PN2/PP2BPPP/R4RK1 w - - bm Ba5; id \\\"WAC.042\\\";\\n\" +\n            \"r2q3k/p2P3p/1p3p2/3QP1r1/8/B7/P5PP/2R3K1 w - - bm Be7 Qxa8; id \\\"WAC.043\\\";\\n\" +\n            \"3rb1k1/pq3pbp/4n1p1/3p4/2N5/2P2QB1/PP3PPP/1B1R2K1 b - - bm dxc4; id \\\"WAC.044\\\";\\n\" +\n            \"7k/2p1b1pp/8/1p2P3/1P3r2/2P3Q1/1P5P/R4qBK b - - bm Qxa1; id \\\"WAC.045\\\";\\n\" +\n            \"r1bqr1k1/pp1nb1p1/4p2p/3p1p2/3P4/P1N1PNP1/1PQ2PP1/3RKB1R w K - bm Nb5; id \\\"WAC.046\\\";\\n\" +\n            \"r1b2rk1/pp2bppp/2n1pn2/q5B1/2BP4/2N2N2/PP2QPPP/2R2RK1 b - - bm Nxd4; id \\\"WAC.047\\\";\\n\" +\n            \"1rbq1rk1/p1p1bppp/2p2n2/8/Q1BP4/2N5/PP3PPP/R1B2RK1 b - - bm Rb4; id \\\"WAC.048\\\";\\n\" +\n            \"2b3k1/4rrpp/p2p4/2pP2RQ/1pP1Pp1N/1P3P1P/1q6/6RK w - - bm Qxh7+; id \\\"WAC.049\\\";\\n\" +\n            \"k4r2/1R4pb/1pQp1n1p/3P4/5p1P/3P2P1/r1q1R2K/8 w - - bm Rxb6+; id \\\"WAC.050\\\";\\n\" +\n            \"r1bq1r2/pp4k1/4p2p/3pPp1Q/3N1R1P/2PB4/6P1/6K1 w - - bm Rg4+; id \\\"WAC.051\\\";\\n\" +\n            \"r1k5/1p3q2/1Qpb4/3N1p2/5Pp1/3P2Pp/PPPK3P/4R3 w - - bm Re7 c4; id \\\"WAC.052\\\";\\n\" +\n            \"6k1/6p1/p7/3Pn3/5p2/4rBqP/P4RP1/5QK1 b - - bm Re1; id \\\"WAC.053\\\";\\n\" +\n            \"r3kr2/1pp4p/1p1p4/7q/4P1n1/2PP2Q1/PP4P1/R1BB2K1 b q - bm Qh1+; id \\\"WAC.054\\\";\\n\" +\n            \"r3r1k1/pp1q1pp1/4b1p1/3p2B1/3Q1R2/8/PPP3PP/4R1K1 w - - bm Qxg7+; id \\\"WAC.055\\\";\\n\" +\n            \"r1bqk2r/pppp1ppp/5n2/2b1n3/4P3/1BP3Q1/PP3PPP/RNB1K1NR b KQkq - bm Bxf2+; id \\\"WAC.056\\\";\\n\" +\n            \"r3q1kr/ppp5/3p2pQ/8/3PP1b1/5R2/PPP3P1/5RK1 w - - bm Rf8+; id \\\"WAC.057\\\";\\n\" +\n            \"8/8/2R5/1p2qp1k/1P2r3/2PQ2P1/5K2/8 w - - bm Qd1+; id \\\"WAC.058\\\";\\n\" +\n            \"r1b2rk1/2p1qnbp/p1pp2p1/5p2/2PQP3/1PN2N1P/PB3PP1/3R1RK1 w - - bm Nd5; id \\\"WAC.059\\\";\\n\" +\n            \"rn1qr1k1/1p2np2/2p3p1/8/1pPb4/7Q/PB1P1PP1/2KR1B1R w - - bm Qh8+; id \\\"WAC.060\\\";\\n\" +\n            \"3qrbk1/ppp1r2n/3pP2p/3P4/2P4P/1P3Q2/PB6/R4R1K w - - bm Qf7+; id \\\"WAC.061\\\";\\n\" +\n            \"6r1/3Pn1qk/p1p1P1rp/2Q2p2/2P5/1P4P1/P3R2P/5RK1 b - - bm Rxg3+; id \\\"WAC.062\\\";\\n\" +\n            \"r1brnbk1/ppq2pp1/4p2p/4N3/3P4/P1PB1Q2/3B1PPP/R3R1K1 w - - bm Nxf7; id \\\"WAC.063\\\";\\n\" +\n            \"8/6pp/3q1p2/3n1k2/1P6/3NQ2P/5PP1/6K1 w - - bm g4+; id \\\"WAC.064\\\";\\n\" +\n            \"1r1r1qk1/p2n1p1p/bp1Pn1pQ/2pNp3/2P2P1N/1P5B/P6P/3R1RK1 w - - bm Ne7+; id \\\"WAC.065\\\";\\n\" +\n            \"1k1r2r1/ppq5/1bp4p/3pQ3/8/2P2N2/PP4P1/R4R1K b - - bm Qxe5; id \\\"WAC.066\\\";\\n\" +\n            \"3r2k1/p2q4/1p4p1/3rRp1p/5P1P/6PK/P3R3/3Q4 w - - bm Rxd5; id \\\"WAC.067\\\";\\n\" +\n            \"6k1/5ppp/1q6/2b5/8/2R1pPP1/1P2Q2P/7K w - - bm Qxe3; id \\\"WAC.068\\\";\\n\" +\n            \"2k5/pppr4/4R3/4Q3/2pp2q1/8/PPP2PPP/6K1 w - - bm f3 h3; id \\\"WAC.069\\\";\\n\" +\n            \"2kr3r/pppq1ppp/3p1n2/bQ2p3/1n1PP3/1PN1BN1P/1PP2PP1/2KR3R b - - bm Na2+; id \\\"WAC.070\\\";\\n\" +\n            \"2kr3r/pp1q1ppp/5n2/1Nb5/2Pp1B2/7Q/P4PPP/1R3RK1 w - - bm Nxa7+; id \\\"WAC.071\\\";\\n\" +\n            \"r3r1k1/pp1n1ppp/2p5/4Pb2/2B2P2/B1P5/P5PP/R2R2K1 w - - bm e6; id \\\"WAC.072\\\";\\n\" +\n            \"r1q3rk/1ppbb1p1/4Np1p/p3pP2/P3P3/2N4R/1PP1Q1PP/3R2K1 w - - bm Qd2; id \\\"WAC.073\\\";\\n\" +\n            \"5r1k/pp4pp/2p5/2b1P3/4Pq2/1PB1p3/P3Q1PP/3N2K1 b - - bm Qf1+; id \\\"WAC.074\\\";\\n\" +\n            \"r3r1k1/pppq1ppp/8/8/1Q4n1/7P/PPP2PP1/RNB1R1K1 b - - bm Qd6; id \\\"WAC.075\\\";\\n\" +\n            \"r1b1qrk1/2p2ppp/pb1pnn2/1p2pNB1/3PP3/1BP5/PP2QPPP/RN1R2K1 w - - bm Bxf6; id \\\"WAC.076\\\";\\n\" +\n            \"3r2k1/ppp2ppp/6q1/b4n2/3nQB2/2p5/P4PPP/RN3RK1 b - - bm Ng3; id \\\"WAC.077\\\";\\n\" +\n            \"r2q3r/ppp2k2/4nbp1/5Q1p/2P1NB2/8/PP3P1P/3RR1K1 w - - bm Ng5+; id \\\"WAC.078\\\";\\n\" +\n            \"r3k2r/pbp2pp1/3b1n2/1p6/3P3p/1B2N1Pq/PP1PQP1P/R1B2RK1 b kq - bm Qxh2+; id \\\"WAC.079\\\";\\n\" +\n            \"r4rk1/p1B1bpp1/1p2pn1p/8/2PP4/3B1P2/qP2QP1P/3R1RK1 w - - bm Ra1; id \\\"WAC.080\\\";\\n\" +\n            \"r4rk1/1bR1bppp/4pn2/1p2N3/1P6/P3P3/4BPPP/3R2K1 b - - bm Bd6; id \\\"WAC.081\\\";\\n\" +\n            \"3rr1k1/pp3pp1/4b3/8/2P1B2R/6QP/P3q1P1/5R1K w - - bm Bh7+; id \\\"WAC.082\\\";\\n\" +\n            \"3rr1k1/ppqbRppp/2p5/8/3Q1n2/2P3N1/PPB2PPP/3R2K1 w - - bm Qxd7; id \\\"WAC.083\\\";\\n\" +\n            \"r2q1r1k/2p1b1pp/p1n5/1p1Q1bN1/4n3/1BP1B3/PP3PPP/R4RK1 w - - bm Qg8+; id \\\"WAC.084\\\";\\n\" +\n            \"kr2R3/p4r2/2pq4/2N2p1p/3P2p1/Q5P1/5P1P/5BK1 w - - bm Na6; id \\\"WAC.085\\\";\\n\" +\n            \"8/p7/1ppk1n2/5ppp/P1PP4/2P1K1P1/5N1P/8 b - - bm Ng4+; id \\\"WAC.086\\\";\\n\" +\n            \"8/p3k1p1/4r3/2ppNpp1/PP1P4/2P3KP/5P2/8 b - - bm Rxe5; id \\\"WAC.087\\\";\\n\" +\n            \"r6k/p1Q4p/2p1b1rq/4p3/B3P3/4P3/PPP3P1/4RRK1 b - - bm Rxg2+; id \\\"WAC.088\\\";\\n\" +\n            \"1r3b1k/p4rpp/4pp2/3q4/2ppbPPQ/6RK/PP5P/2B1NR2 b - - bm g5; id \\\"WAC.089\\\";\\n\" +\n            \"3qrrk1/1pp2pp1/1p2bn1p/5N2/2P5/P1P3B1/1P4PP/2Q1RRK1 w - - bm Nxg7; id \\\"WAC.090\\\";\\n\" +\n            \"2qr2k1/4b1p1/2p2p1p/1pP1p3/p2nP3/PbQNB1PP/1P3PK1/4RB2 b - - bm Be6; id \\\"WAC.091\\\";\\n\" +\n            \"r4rk1/1p2ppbp/p2pbnp1/q7/3BPPP1/2N2B2/PPP4P/R2Q1RK1 b - - bm Bxg4; id \\\"WAC.092\\\";\\n\" +\n            \"r1b1k1nr/pp3pQp/4pq2/3pn3/8/P1P5/2P2PPP/R1B1KBNR w KQkq - bm Bh6; id \\\"WAC.093\\\";\\n\" +\n            \"8/k7/p7/3Qp2P/n1P5/3KP3/1q6/8 b - - bm e4+; id \\\"WAC.094\\\";\\n\" +\n            \"2r5/1r6/4pNpk/3pP1qp/8/2P1QP2/5PK1/R7 w - - bm Ng4+; id \\\"WAC.095\\\";\\n\" +\n            \"r1b4k/ppp2Bb1/6Pp/3pP3/1qnP1p1Q/8/PPP3P1/1K1R3R w - - bm Qd8+ b3; id \\\"WAC.096\\\";\\n\" +\n            \"6k1/5p2/p5np/4B3/3P4/1PP1q3/P3r1QP/6RK w - - bm Qa8+; id \\\"WAC.097\\\";\\n\" +\n            \"1r3rk1/5pb1/p2p2p1/Q1n1q2p/1NP1P3/3p1P1B/PP1R3P/1K2R3 b - - bm Nxe4; id \\\"WAC.098\\\";\\n\" +\n            \"r1bq1r1k/1pp1Np1p/p2p2pQ/4R3/n7/8/PPPP1PPP/R1B3K1 w - - bm Rh5; id \\\"WAC.099\\\";\\n\" +\n            \"8/k1b5/P4p2/1Pp2p1p/K1P2P1P/8/3B4/8 w - - bm Be3 b6+; id \\\"WAC.100\\\";\\n\" +\n            \"5rk1/p5pp/8/8/2Pbp3/1P4P1/7P/4RN1K b - - bm Bc3; id \\\"WAC.101\\\";\\n\" +\n            \"2Q2n2/2R4p/1p1qpp1k/8/3P3P/3B2P1/5PK1/r7 w - - bm Qxf8+; id \\\"WAC.102\\\";\\n\" +\n            \"6k1/2pb1r1p/3p1PpQ/p1nPp3/1q2P3/2N2P2/PrB5/2K3RR w - - bm Qxg6+; id \\\"WAC.103\\\";\\n\" +\n            \"b4r1k/pq2rp2/1p1bpn1p/3PN2n/2P2P2/P2B3K/1B2Q2N/3R2R1 w - - bm Qxh5; id \\\"WAC.104\\\";\\n\" +\n            \"r2r2k1/pb3ppp/1p1bp3/7q/3n2nP/PP1B2P1/1B1N1P2/RQ2NRK1 b - - bm Bxg3 Qxh4; id \\\"WAC.105\\\";\\n\" +\n            \"4rrk1/pppb4/7p/3P2pq/3Qn3/P5P1/1PP4P/R3RNNK b - - bm Nf2+; id \\\"WAC.106\\\";\\n\" +\n            \"5n2/pRrk2p1/P4p1p/4p3/3N4/5P2/6PP/6K1 w - - bm Nb5; id \\\"WAC.107\\\";\\n\" +\n            \"r5k1/1q4pp/2p5/p1Q5/2P5/5R2/4RKPP/r7 w - - bm Qe5; id \\\"WAC.108\\\";\\n\" +\n            \"rn2k1nr/pbp2ppp/3q4/1p2N3/2p5/QP6/PB1PPPPP/R3KB1R b KQkq - bm c3; id \\\"WAC.109\\\";\\n\" +\n            \"2kr4/bp3p2/p2p2b1/P7/2q5/1N4B1/1PPQ2P1/2KR4 b - - bm Be3; id \\\"WAC.110\\\";\\n\" +\n            \"6k1/p5p1/5p2/2P2Q2/3pN2p/3PbK1P/7P/6q1 b - - bm Qf1+; id \\\"WAC.111\\\";\\n\" +\n            \"r4kr1/ppp5/4bq1b/7B/2PR1Q1p/2N3P1/PP3P1P/2K1R3 w - - bm Rxe6; id \\\"WAC.112\\\";\\n\" +\n            \"rnbqkb1r/1p3ppp/5N2/1p2p1B1/2P5/8/PP2PPPP/R2QKB1R b KQkq - bm Qxf6; id \\\"WAC.113\\\";\\n\" +\n            \"r1b1rnk1/1p4pp/p1p2p2/3pN2n/3P1PPq/2NBPR1P/PPQ5/2R3K1 w - - bm Bxh7+; id \\\"WAC.114\\\";\\n\" +\n            \"4N2k/5rpp/1Q6/p3q3/8/P5P1/1P3P1P/5K2 w - - bm Nd6; id \\\"WAC.115\\\";\\n\" +\n            \"r2r2k1/2p2ppp/p7/1p2P1n1/P6q/5P2/1PB1QP1P/R5RK b - - bm Rd2; id \\\"WAC.116\\\";\\n\" +\n            \"3r1rk1/q4ppp/p1Rnp3/8/1p6/1N3P2/PP3QPP/3R2K1 b - - bm Ne4; id \\\"WAC.117\\\";\\n\" +\n            \"r5k1/pb2rpp1/1p6/2p4q/5R2/2PB2Q1/P1P3PP/5R1K w - - bm Rh4; id \\\"WAC.118\\\";\\n\" +\n            \"r2qr1k1/p1p2ppp/2p5/2b5/4nPQ1/3B4/PPP3PP/R1B2R1K b - - bm Qxd3; id \\\"WAC.119\\\";\\n\" +\n            \"r4rk1/1bn2qnp/3p1B1Q/p2P1pP1/1pp5/5N1P/PPB2P2/2KR3R w - - bm Rhg1 g6; id \\\"WAC.120\\\";\\n\" +\n            \"6k1/5p1p/2bP2pb/4p3/2P5/1p1pNPPP/1P1Q1BK1/1q6 b - - bm Bxf3+; id \\\"WAC.121\\\";\\n\" +\n            \"1k6/ppp4p/1n2pq2/1N2Rb2/2P2Q2/8/P4KPP/3r1B2 b - - bm Rxf1+; id \\\"WAC.122\\\";\\n\" +\n            \"6k1/1b2rp2/1p4p1/3P4/PQ4P1/2N2q2/5P2/3R2K1 b - - bm Bxd5 Rc7 Re6; id \\\"WAC.123\\\";\\n\" +\n            \"6k1/3r4/2R5/P5P1/1P4p1/8/4rB2/6K1 b - - bm g3; id \\\"WAC.124\\\";\\n\" +\n            \"r1bqr1k1/pp3ppp/1bp5/3n4/3B4/2N2P1P/PPP1B1P1/R2Q1RK1 b - - bm Bxd4+; id \\\"WAC.125\\\";\\n\" +\n            \"r5r1/pQ5p/1qp2R2/2k1p3/4P3/2PP4/P1P3PP/6K1 w - - bm Rxc6+; id \\\"WAC.126\\\";\\n\" +\n            \"2k4r/1pr1n3/p1p1q2p/5pp1/3P1P2/P1P1P3/1R2Q1PP/1RB3K1 w - - bm Rxb7; id \\\"WAC.127\\\";\\n\" +\n            \"6rk/1pp2Qrp/3p1B2/1pb1p2R/3n1q2/3P4/PPP3PP/R6K w - - bm Qg6; id \\\"WAC.128\\\";\\n\" +\n            \"3r1r1k/1b2b1p1/1p5p/2p1Pp2/q1B2P2/4P2P/1BR1Q2K/6R1 b - - bm Bf3; id \\\"WAC.129\\\";\\n\" +\n            \"6k1/1pp3q1/5r2/1PPp4/3P1pP1/3Qn2P/3B4/4R1K1 b - - bm Qh6 Qh8; id \\\"WAC.130\\\";\\n\" +\n            \"2rq1bk1/p4p1p/1p4p1/3b4/3B1Q2/8/P4PpP/3RR1K1 w - - bm Re8; id \\\"WAC.131\\\";\\n\" +\n            \"4r1k1/5bpp/2p5/3pr3/8/1B3pPq/PPR2P2/2R2QK1 b - - bm Re1; id \\\"WAC.132\\\";\\n\" +\n            \"r1b1k2r/1pp1q2p/p1n3p1/3QPp2/8/1BP3B1/P5PP/3R1RK1 w kq - bm Bh4; id \\\"WAC.133\\\";\\n\" +\n            \"3r2k1/p6p/2Q3p1/4q3/2P1p3/P3Pb2/1P3P1P/2K2BR1 b - - bm Rd1+; id \\\"WAC.134\\\";\\n\" +\n            \"3r1r1k/N2qn1pp/1p2np2/2p5/2Q1P2N/3P4/PP4PP/3R1RK1 b - - bm Nd4; id \\\"WAC.135\\\";\\n\" +\n            \"6kr/1q2r1p1/1p2N1Q1/5p2/1P1p4/6R1/7P/2R3K1 w - - bm Rc8+; id \\\"WAC.136\\\";\\n\" +\n            \"3b1rk1/1bq3pp/5pn1/1p2rN2/2p1p3/2P1B2Q/1PB2PPP/R2R2K1 w - - bm Rd7; id \\\"WAC.137\\\";\\n\" +\n            \"r1bq3r/ppppR1p1/5n1k/3P4/6pP/3Q4/PP1N1PP1/5K1R w - - bm h5; id \\\"WAC.138\\\";\\n\" +\n            \"rnb3kr/ppp2ppp/1b6/3q4/3pN3/Q4N2/PPP2KPP/R1B1R3 w - - bm Nf6+; id \\\"WAC.139\\\";\\n\" +\n            \"r2b1rk1/pq4p1/4ppQP/3pB1p1/3P4/2R5/PP3PP1/5RK1 w - - bm Bc7 Rc7; id \\\"WAC.140\\\";\\n\" +\n            \"4r1k1/p1qr1p2/2pb1Bp1/1p5p/3P1n1R/1B3P2/PP3PK1/2Q4R w - - bm Qxf4; id \\\"WAC.141\\\";\\n\" +\n            \"r2q3n/ppp2pk1/3p4/5Pr1/2NP1Qp1/2P2pP1/PP3K2/4R2R w - - bm Re8 f6+; id \\\"WAC.142\\\";\\n\" +\n            \"5b2/pp2r1pk/2pp1pRp/4rP1N/2P1P3/1P4QP/P3q1P1/5R1K w - - bm Rxh6+; id \\\"WAC.143\\\";\\n\" +\n            \"r2q1rk1/pp3ppp/2p2b2/8/B2pPPb1/7P/PPP1N1P1/R2Q1RK1 b - - bm d3; id \\\"WAC.144\\\";\\n\" +\n            \"r1bq4/1p4kp/3p1n2/p4pB1/2pQ4/8/1P4PP/4RRK1 w - - bm Re8; id \\\"WAC.145\\\";\\n\" +\n            \"8/8/2Kp4/3P1B2/2P2k2/5p2/8/8 w - - bm Bc8 Bd3 Bh3; id \\\"WAC.146\\\";\\n\" +\n            \"r2r2k1/ppqbppbp/2n2np1/2pp4/6P1/1P1PPNNP/PBP2PB1/R2QK2R b KQ - bm Nxg4; id \\\"WAC.147\\\";\\n\" +\n            \"2r1k3/6pr/p1nBP3/1p3p1p/2q5/2P5/P1R4P/K2Q2R1 w - - bm Rxg7; id \\\"WAC.148\\\";\\n\" +\n            \"6k1/6p1/2p4p/4Pp2/4b1qP/2Br4/1P2RQPK/8 b - - bm Bxg2; id \\\"WAC.149\\\";\\n\" +\n            \"r3r1k1/5p2/pQ1b2pB/1p6/4p3/6P1/Pq2BP1P/2R3K1 b - - bm Ba3 Be5 Bf8 e3; c0 \\\"All win but e3 is best.\\\"; id \\\"WAC.150\\\";\\n\" +\n            \"8/3b2kp/4p1p1/pr1n4/N1N4P/1P4P1/1K3P2/3R4 w - - bm Nc3; id \\\"WAC.151\\\";\\n\" +\n            \"1br2rk1/1pqb1ppp/p3pn2/8/1P6/P1N1PN1P/1B3PP1/1QRR2K1 w - - bm Ne4; id \\\"WAC.152\\\";\\n\" +\n            \"2r3k1/q4ppp/p3p3/pnNp4/2rP4/2P2P2/4R1PP/2R1Q1K1 b - - bm Nxd4; id \\\"WAC.153\\\";\\n\" +\n            \"r1b2rk1/2p2ppp/p7/1p6/3P3q/1BP3bP/PP3QP1/RNB1R1K1 w - - bm Qxf7+; id \\\"WAC.154\\\";\\n\" +\n            \"5bk1/1rQ4p/5pp1/2pP4/3n1PP1/7P/1q3BB1/4R1K1 w - - bm d6; id \\\"WAC.155\\\";\\n\" +\n            \"r1b1qN1k/1pp3p1/p2p3n/4p1B1/8/1BP4Q/PP3KPP/8 w - - bm Qxh6+; id \\\"WAC.156\\\";\\n\" +\n            \"5rk1/p4ppp/2p1b3/3Nq3/4P1n1/1p1B2QP/1PPr2P1/1K2R2R w - - bm Ne7+; id \\\"WAC.157\\\";\\n\" +\n            \"5rk1/n1p1R1bp/p2p4/1qpP1QB1/7P/2P3P1/PP3P2/6K1 w - - bm Rxg7+; id \\\"WAC.158\\\";\\n\" +\n            \"r1b2r2/5P1p/ppn3pk/2p1p1Nq/1bP1PQ2/3P4/PB4BP/1R3RK1 w - - bm Ne6+; id \\\"WAC.159\\\";\\n\" +\n            \"qn1kr2r/1pRbb3/pP5p/P2pP1pP/3N1pQ1/3B4/3B1PP1/R5K1 w - - bm Qxd7+; id \\\"WAC.160\\\";\\n\" +\n            \"3r3k/3r1P1p/pp1Nn3/2pp4/7Q/6R1/Pq4PP/5RK1 w - - bm Qxd8+; id \\\"WAC.161\\\";\\n\" +\n            \"r3kbnr/p4ppp/2p1p3/8/Q1B3b1/2N1B3/PP3PqP/R3K2R w KQkq - bm Bd5; id \\\"WAC.162\\\";\\n\" +\n            \"5rk1/2p4p/2p4r/3P4/4p1b1/1Q2NqPp/PP3P1K/R4R2 b - - bm Qg2+; id \\\"WAC.163\\\";\\n\" +\n            \"8/6pp/4p3/1p1n4/1NbkN1P1/P4P1P/1PR3K1/r7 w - - bm Rxc4+; id \\\"WAC.164\\\";\\n\" +\n            \"1r5k/p1p3pp/8/8/4p3/P1P1R3/1P1Q1qr1/2KR4 w - - bm Re2; id \\\"WAC.165\\\";\\n\" +\n            \"r3r1k1/5pp1/p1p4p/2Pp4/8/q1NQP1BP/5PP1/4K2R b K - bm d4; id \\\"WAC.166\\\";\\n\" +\n            \"7Q/ppp2q2/3p2k1/P2Ppr1N/1PP5/7R/5rP1/6K1 b - - bm Rxg2+; id \\\"WAC.167\\\";\\n\" +\n            \"r3k2r/pb1q1p2/8/2p1pP2/4p1p1/B1P1Q1P1/P1P3K1/R4R2 b kq - bm Qd2+; id \\\"WAC.168\\\";\\n\" +\n            \"5rk1/1pp3bp/3p2p1/2PPp3/1P2P3/2Q1B3/4q1PP/R5K1 b - - bm Bh6; id \\\"WAC.169\\\";\\n\" +\n            \"5r1k/6Rp/1p2p3/p2pBp2/1qnP4/4P3/Q4PPP/6K1 w - - bm Qxc4; id \\\"WAC.170\\\";\\n\" +\n            \"2rq4/1b2b1kp/p3p1p1/1p1nNp2/7P/1B2B1Q1/PP3PP1/3R2K1 w - - bm Bh6+; id \\\"WAC.171\\\";\\n\" +\n            \"5r1k/p5pp/8/1P1pq3/P1p2nR1/Q7/5BPP/6K1 b - - bm Qe1+; id \\\"WAC.172\\\";\\n\" +\n            \"2r1b3/1pp1qrk1/p1n1P1p1/7R/2B1p3/4Q1P1/PP3PP1/3R2K1 w - - bm Qh6+; id \\\"WAC.173\\\";\\n\" +\n            \"2r2rk1/6p1/p3pq1p/1p1b1p2/3P1n2/PP3N2/3N1PPP/1Q2RR1K b - - bm Nxg2; id \\\"WAC.174\\\";\\n\" +\n            \"r5k1/pppb3p/2np1n2/8/3PqNpP/3Q2P1/PPP5/R4RK1 w - - bm Nh5; id \\\"WAC.175\\\";\\n\" +\n            \"r1bq3r/ppp2pk1/3p1pp1/8/2BbPQ2/2NP2P1/PPP4P/R4R1K b - - bm Rxh2+; id \\\"WAC.176\\\";\\n\" +\n            \"r1b3r1/4qk2/1nn1p1p1/3pPp1P/p4P2/1p3BQN/PKPBN3/3R3R b - - bm Qa3+; id \\\"WAC.177\\\";\\n\" +\n            \"3r2k1/p1rn1p1p/1p2pp2/6q1/3PQNP1/5P2/P1P4R/R5K1 w - - bm Nxe6; id \\\"WAC.178\\\";\\n\" +\n            \"r1b2r1k/pp4pp/3p4/3B4/8/1QN3Pn/PP3q1P/R3R2K b - - bm Qg1+; id \\\"WAC.179\\\";\\n\" +\n            \"r1q2rk1/p3bppb/3p1n1p/2nPp3/1p2P1P1/6NP/PP2QPB1/R1BNK2R b KQ - bm Nxd5; id \\\"WAC.180\\\";\\n\" +\n            \"r3k2r/2p2p2/p2p1n2/1p2p3/4P2p/1PPPPp1q/1P5P/R1N2QRK b kq - bm Ng4; id \\\"WAC.181\\\";\\n\" +\n            \"r1b2rk1/ppqn1p1p/2n1p1p1/2b3N1/2N5/PP1BP3/1B3PPP/R2QK2R w KQ - bm Qh5; id \\\"WAC.182\\\";\\n\" +\n            \"1r2k1r1/5p2/b3p3/1p2b1B1/3p3P/3B4/PP2KP2/2R3R1 w - - bm Bf6; id \\\"WAC.183\\\";\\n\" +\n            \"4kn2/r4p1r/p3bQ2/q1nNP1Np/1p5P/8/PPP3P1/2KR3R w - - bm Qe7+; id \\\"WAC.184\\\";\\n\" +\n            \"1r1rb1k1/2p3pp/p2q1p2/3PpP1Q/Pp1bP2N/1B5R/1P4PP/2B4K w - - bm Qxh7+; id \\\"WAC.185\\\";\\n\" +\n            \"r5r1/p1q2p1k/1p1R2pB/3pP3/6bQ/2p5/P1P1NPPP/6K1 w - - bm Bf8+; id \\\"WAC.186\\\";\\n\" +\n            \"6k1/5p2/p3p3/1p3qp1/2p1Qn2/2P1R3/PP1r1PPP/4R1K1 b - - bm Nh3+; id \\\"WAC.187\\\";\\n\" +\n            \"3RNbk1/pp3p2/4rQpp/8/1qr5/7P/P4P2/3R2K1 w - - bm Qg7+; id \\\"WAC.188\\\";\\n\" +\n            \"3r1k2/1ppPR1n1/p2p1rP1/3P3p/4Rp1N/5K2/P1P2P2/8 w - - bm Re8+; id \\\"WAC.189\\\";\\n\" +\n            \"8/p2b2kp/1q1p2p1/1P1Pp3/4P3/3B2P1/P2Q3P/2Nn3K b - - bm Bh3; id \\\"WAC.190\\\";\\n\" +\n            \"2r1Rn1k/1p1q2pp/p7/5p2/3P4/1B4P1/P1P1QP1P/6K1 w - - bm Qc4; id \\\"WAC.191\\\";\\n\" +\n            \"r3k3/ppp2Npp/4Bn2/2b5/1n1pp3/N4P2/PPP3qP/R2QKR2 b Qq - bm Nd3+; id \\\"WAC.192\\\";\\n\" +\n            \"5bk1/p4ppp/Qp6/4B3/1P6/Pq2P1P1/2rr1P1P/R4RK1 b - - bm Qxe3; id \\\"WAC.193\\\";\\n\" +\n            \"5rk1/ppq2ppp/2p5/4bN2/4P3/6Q1/PPP2PPP/3R2K1 w - - bm Nh6+; id \\\"WAC.194\\\";\\n\" +\n            \"3r1rk1/1p3p2/p3pnnp/2p3p1/2P2q2/1P5P/PB2QPPN/3RR1K1 w - - bm g3; id \\\"WAC.195\\\";\\n\" +\n            \"rr4k1/p1pq2pp/Q1n1pn2/2bpp3/4P3/2PP1NN1/PP3PPP/R1B1K2R b KQ - bm Nb4; id \\\"WAC.196\\\";\\n\" +\n            \"7k/1p4p1/7p/3P1n2/4Q3/2P2P2/PP3qRP/7K b - - bm Qf1+; id \\\"WAC.197\\\";\\n\" +\n            \"2br2k1/ppp2p1p/4p1p1/4P2q/2P1Bn2/2Q5/PP3P1P/4R1RK b - - bm Rd3; id \\\"WAC.198\\\";\\n\" +\n            \"r1br2k1/pp2nppp/2n5/1B1q4/Q7/4BN2/PP3PPP/2R2RK1 w - - bm Bxc6 Rcd1 Rfd1; id \\\"WAC.199\\\";\\n\" +\n            \"2rqrn1k/pb4pp/1p2pp2/n2P4/2P3N1/P2B2Q1/1B3PPP/2R1R1K1 w - - bm Bxf6; id \\\"WAC.200\\\";\\n\" +\n            \"2b2r1k/4q2p/3p2pQ/2pBp3/8/6P1/1PP2P1P/R5K1 w - - bm Ra7; id \\\"WAC.201\\\";\\n\" +\n            \"QR2rq1k/2p3p1/3p1pPp/8/4P3/8/P1r3PP/1R4K1 b - - bm Rxa2; id \\\"WAC.202\\\";\\n\" +\n            \"r4rk1/5ppp/p3q1n1/2p2NQ1/4n3/P3P3/1B3PPP/1R3RK1 w - - bm Qh6; id \\\"WAC.203\\\";\\n\" +\n            \"r1b1qrk1/1p3ppp/p1p5/3Nb3/5N2/P7/1P4PQ/K1R1R3 w - - bm Rxe5; id \\\"WAC.204\\\";\\n\" +\n            \"r3rnk1/1pq2bb1/p4p2/3p1Pp1/3B2P1/1NP4R/P1PQB3/2K4R w - - bm Qxg5; id \\\"WAC.205\\\";\\n\" +\n            \"1Qq5/2P1p1kp/3r1pp1/8/8/7P/p4PP1/2R3K1 b - - bm Rc6; id \\\"WAC.206\\\";\\n\" +\n            \"r1bq2kr/p1pp1ppp/1pn1p3/4P3/2Pb2Q1/BR6/P4PPP/3K1BNR w - - bm Qxg7+; id \\\"WAC.207\\\";\\n\" +\n            \"3r1bk1/ppq3pp/2p5/2P2Q1B/8/1P4P1/P6P/5RK1 w - - bm Bf7+; id \\\"WAC.208\\\";\\n\" +\n            \"4kb1r/2q2p2/r2p4/pppBn1B1/P6P/6Q1/1PP5/2KRR3 w k - bm Rxe5+; id \\\"WAC.209\\\";\\n\" +\n            \"3r1rk1/pp1q1ppp/3pn3/2pN4/5PP1/P5PQ/1PP1B3/1K1R4 w - - bm Rh1; id \\\"WAC.210\\\";\\n\" +\n            \"r1bqrk2/pp1n1n1p/3p1p2/P1pP1P1Q/2PpP1NP/6R1/2PB4/4RBK1 w - - bm Qxf7+; id \\\"WAC.211\\\";\\n\" +\n            \"rn1qr2Q/pbppk1p1/1p2pb2/4N3/3P4/2N5/PPP3PP/R4RK1 w - - bm Qxg7+; id \\\"WAC.212\\\";\\n\" +\n            \"3r1r1k/1b4pp/ppn1p3/4Pp1R/Pn5P/3P4/4QP2/1qB1NKR1 w - - bm Rxh7+; id \\\"WAC.213\\\";\\n\" +\n            \"r2r2k1/1p2qpp1/1np1p1p1/p3N3/2PPN3/bP5R/4QPPP/4R1K1 w - - bm Ng5; id \\\"WAC.214\\\";\\n\" +\n            \"3r2k1/pb1q1pp1/1p2pb1p/8/3N4/P2QB3/1P3PPP/1Br1R1K1 w - - bm Qh7+; id \\\"WAC.215\\\";\\n\" +\n            \"r2qr1k1/1b1nbppp/p3pn2/1p1pN3/3P1B2/2PB1N2/PP2QPPP/R4RK1 w - - bm Nxf7 a4; id \\\"WAC.216\\\";\\n\" +\n            \"r3kb1r/1pp3p1/p3bp1p/5q2/3QN3/1P6/PBP3P1/3RR1K1 w kq - bm Qd7+; id \\\"WAC.217\\\";\\n\" +\n            \"6k1/pp5p/2p3q1/6BP/2nPr1Q1/8/PP3R1K/8 w - - bm Bh6; id \\\"WAC.218\\\";\\n\" +\n            \"7k/p4q1p/1pb5/2p5/4B2Q/2P1B3/P6P/7K b - - bm Qf1+; id \\\"WAC.219\\\";\\n\" +\n            \"3rr1k1/ppp2ppp/8/5Q2/4n3/1B5R/PPP1qPP1/5RK1 b - - bm Qxf1+; id \\\"WAC.220\\\";\\n\" +\n            \"r3k3/P5bp/2N1bp2/4p3/2p5/6NP/1PP2PP1/3R2K1 w q - bm Rd8+; id \\\"WAC.221\\\";\\n\" +\n            \"2r1r2k/1q3ppp/p2Rp3/2p1P3/6QB/p3P3/bP3PPP/3R2K1 w - - bm Bf6; id \\\"WAC.222\\\";\\n\" +\n            \"r1bqk2r/pp3ppp/5n2/8/1b1npB2/2N5/PP1Q2PP/1K2RBNR w kq - bm Nxe4; id \\\"WAC.223\\\";\\n\" +\n            \"5rk1/p1q3pp/1p1r4/2p1pp1Q/1PPn1P2/3B3P/P2R2P1/3R2K1 b - - bm Rh6 e4; id \\\"WAC.224\\\";\\n\" +\n            \"4R3/4q1kp/6p1/1Q3b2/1P1b1P2/6KP/8/8 b - - bm Qh4+; id \\\"WAC.225\\\";\\n\" +\n            \"2b2rk1/p1p4p/2p1p1p1/br2N1Q1/1p2q3/8/PB3PPP/3R1RK1 w - - bm Nf7; id \\\"WAC.226\\\";\\n\" +\n            \"2k1rb1r/ppp3pp/2np1q2/5b2/2B2P2/2P1BQ2/PP1N1P1P/2KR3R b - - bm d5; id \\\"WAC.227\\\";\\n\" +\n            \"r4rk1/1bq1bp1p/4p1p1/p2p4/3BnP2/1N1B3R/PPP3PP/R2Q2K1 w - - bm Bxe4; id \\\"WAC.228\\\";\\n\" +\n            \"8/8/8/1p5r/p1p1k1pN/P2pBpP1/1P1K1P2/8 b - - bm Rxh4 b4; id \\\"WAC.229\\\";\\n\" +\n            \"2b5/1r6/2kBp1p1/p2pP1P1/2pP4/1pP3K1/1R3P2/8 b - - bm Rb4; id \\\"WAC.230\\\";\\n\" +\n            \"r4rk1/1b1nqp1p/p5p1/1p2PQ2/2p5/5N2/PP3PPP/R1BR2K1 w - - bm Bg5; id \\\"WAC.231\\\";\\n\" +\n            \"1R2rq1k/2p3p1/Q2p1pPp/8/4P3/8/P1r3PP/1R4K1 w - - bm Qb5 Rxe8; id \\\"WAC.232\\\";\\n\" +\n            \"5rk1/p1p2r1p/2pp2p1/4p3/PPPnP3/3Pq1P1/1Q1R1R1P/4NK2 b - - bm Nb3; id \\\"WAC.233\\\";\\n\" +\n            \"2kr1r2/p6p/5Pp1/2p5/1qp2Q1P/7R/PP6/1KR5 w - - bm Rb3; id \\\"WAC.234\\\";\\n\" +\n            \"5r2/1p1RRrk1/4Qq1p/1PP3p1/8/4B3/1b3P1P/6K1 w - - bm Qe4 Qxf7+ Rxf7+; id \\\"WAC.235\\\";\\n\" +\n            \"1R6/p5pk/4p2p/4P3/8/2r3qP/P3R1b1/4Q1K1 b - - bm Rc1; id \\\"WAC.236\\\";\\n\" +\n            \"r5k1/pQp2qpp/8/4pbN1/3P4/6P1/PPr4P/1K1R3R b - - bm Rc1+; id \\\"WAC.237\\\";\\n\" +\n            \"1k1r4/pp1r1pp1/4n1p1/2R5/2Pp1qP1/3P2QP/P4PB1/1R4K1 w - - bm Bxb7; id \\\"WAC.238\\\";\\n\" +\n            \"8/6k1/5pp1/Q6p/5P2/6PK/P4q1P/8 b - - bm Qf1+; id \\\"WAC.239\\\";\\n\" +\n            \"2b4k/p1b2p2/2p2q2/3p1PNp/3P2R1/3B4/P1Q2PKP/4r3 w - - bm Qxc6; id \\\"WAC.240\\\";\\n\" +\n            \"2rq1rk1/pp3ppp/2n2b2/4NR2/3P4/PB5Q/1P4PP/3R2K1 w - - bm Qxh7+; id \\\"WAC.241\\\";\\n\" +\n            \"r1b1r1k1/pp1nqp2/2p1p1pp/8/4N3/P1Q1P3/1P3PPP/1BRR2K1 w - - bm Rxd7; id \\\"WAC.242\\\";\\n\" +\n            \"1r3r1k/3p4/1p1Nn1R1/4Pp1q/pP3P1p/P7/5Q1P/6RK w - - bm Qe2; id \\\"WAC.243\\\";\\n\" +\n            \"r6r/pp3ppp/3k1b2/2pb4/B4Pq1/2P1Q3/P5PP/1RBR2K1 w - - bm Qxc5+; id \\\"WAC.244\\\";\\n\" +\n            \"4rrn1/ppq3bk/3pPnpp/2p5/2PB4/2NQ1RPB/PP5P/5R1K w - - bm Qxg6+; id \\\"WAC.245\\\";\\n\" +\n            \"6R1/4qp1p/ppr1n1pk/8/1P2P1QP/6N1/P4PP1/6K1 w - - bm Qh5+; id \\\"WAC.246\\\";\\n\" +\n            \"2k1r3/1p2Bq2/p2Qp3/Pb1p1p1P/2pP1P2/2P5/2P2KP1/1R6 w - - bm Rxb5; id \\\"WAC.247\\\";\\n\" +\n            \"5r1k/1p4pp/3q4/3Pp1R1/8/8/PP4PP/4Q1K1 b - - bm Qc5+; id \\\"WAC.248\\\";\\n\" +\n            \"r4rk1/pbq2pp1/1ppbpn1p/8/2PP4/1P1Q1N2/PBB2PPP/R3R1K1 w - - bm c5 d5; id \\\"WAC.249\\\";\\n\" +\n            \"1b5k/7P/p1p2np1/2P2p2/PP3P2/4RQ1R/q2r3P/6K1 w - - bm Re8+; id \\\"WAC.250\\\";\\n\" +\n            \"k7/p4p2/P1q1b1p1/3p3p/3Q4/7P/5PP1/1R4K1 w - - bm Qe5 Qf4; id \\\"WAC.251\\\";\\n\" +\n            \"1rb1r1k1/p1p2ppp/5n2/2pP4/5P2/2QB4/qNP3PP/2KRB2R b - - bm Bg4 Re2; c0 \\\"Bg4 wins, but Re2 is far better.\\\"; id \\\"WAC.252\\\";\\n\" +\n            \"k5r1/p4b2/2P5/5p2/3P1P2/4QBrq/P5P1/4R1K1 w - - bm Qe8+; id \\\"WAC.253\\\";\\n\" +\n            \"r6k/pp3p1p/2p1bp1q/b3p3/4Pnr1/2PP2NP/PP1Q1PPN/R2B2RK b - - bm Nxh3; id \\\"WAC.254\\\";\\n\" +\n            \"3r3r/p4pk1/5Rp1/3q4/1p1P2RQ/5N2/P1P4P/2b4K w - - bm Rfxg6+; id \\\"WAC.255\\\";\\n\" +\n            \"3r1rk1/1pb1qp1p/2p3p1/p7/P2Np2R/1P5P/1BP2PP1/3Q1BK1 w - - bm Nf5; id \\\"WAC.256\\\";\\n\" +\n            \"4r1k1/pq3p1p/2p1r1p1/2Q1p3/3nN1P1/1P6/P1P2P1P/3RR1K1 w - - bm Rxd4; id \\\"WAC.257\\\";\\n\" +\n            \"r3brkn/1p5p/2p2Ppq/2Pp3B/3Pp2Q/4P1R1/6PP/5R1K w - - bm Bxg6; id \\\"WAC.258\\\";\\n\" +\n            \"r1bq1rk1/ppp2ppp/2np4/2bN1PN1/2B1P3/3p4/PPP2nPP/R1BQ1K1R w - - bm Qh5; id \\\"WAC.259\\\";\\n\" +\n            \"2r2b1r/p1Nk2pp/3p1p2/N2Qn3/4P3/q6P/P4PP1/1R3K1R w - - bm Qe6+; id \\\"WAC.260\\\";\\n\" +\n            \"r5k1/1bp3pp/p2p4/1p6/5p2/1PBP1nqP/1PP3Q1/R4R1K b - - bm Nd4; id \\\"WAC.261\\\";\\n\" +\n            \"6k1/p1B1b2p/2b3r1/2p5/4p3/1PP1N1Pq/P2R1P2/3Q2K1 b - - bm Rh6; id \\\"WAC.262\\\";\\n\" +\n            \"rnbqr2k/pppp1Qpp/8/b2NN3/2B1n3/8/PPPP1PPP/R1B1K2R w KQ - bm Qg8+; id \\\"WAC.263\\\";\\n\" +\n            \"r2r2k1/1R2qp2/p5pp/2P5/b1PN1b2/P7/1Q3PPP/1B1R2K1 b - - bm Qe5 Rab8; id \\\"WAC.264\\\";\\n\" +\n            \"2r1k2r/2pn1pp1/1p3n1p/p3PP2/4q2B/P1P5/2Q1N1PP/R4RK1 w k - bm exf6; id \\\"WAC.265\\\";\\n\" +\n            \"r3q2r/2p1k1p1/p5p1/1p2Nb2/1P2nB2/P7/2PNQbPP/R2R3K b - - bm Rxh2+; id \\\"WAC.266\\\";\\n\" +\n            \"2r1kb1r/pp3ppp/2n1b3/1q1N2B1/1P2Q3/8/P4PPP/3RK1NR w Kk - bm Nc7+; id \\\"WAC.267\\\";\\n\" +\n            \"2r3kr/ppp2n1p/7B/5q1N/1bp5/2Pp4/PP2RPPP/R2Q2K1 w - - bm Re8+; id \\\"WAC.268\\\";\\n\" +\n            \"2kr2nr/pp1n1ppp/2p1p3/q7/1b1P1B2/P1N2Q1P/1PP1BPP1/R3K2R w KQ - bm axb4; id \\\"WAC.269\\\";\\n\" +\n            \"2r1r1k1/pp1q1ppp/3p1b2/3P4/3Q4/5N2/PP2RPPP/4R1K1 w - - bm Qg4; id \\\"WAC.270\\\";\\n\" +\n            \"2kr4/ppp3Pp/4RP1B/2r5/5P2/1P6/P2p4/3K4 w - - bm Rd6; id \\\"WAC.271\\\";\\n\" +\n            \"nrq4r/2k1p3/1p1pPnp1/pRpP1p2/P1P2P2/2P1BB2/1R2Q1P1/6K1 w - - bm Bxc5; id \\\"WAC.272\\\";\\n\" +\n            \"2k4B/bpp1qp2/p1b5/7p/1PN1n1p1/2Pr4/P5PP/R3QR1K b - - bm Ng3+ g3; id \\\"WAC.273\\\";\\n\" +\n            \"8/1p6/p5R1/k7/Prpp4/K7/1NP5/8 w - - am Rd6; bm Rb6 Rg5+; id \\\"WAC.274\\\";\\n\" +\n            \"r1b2rk1/1p1n1ppp/p1p2q2/4p3/P1B1Pn2/1QN2N2/1P3PPP/3R1RK1 b - - bm Nc5 Nxg2 b5; id \\\"WAC.275\\\";\\n\" +\n            \"r5k1/pp1RR1pp/1b6/6r1/2p5/B6P/P4qPK/3Q4 w - - bm Qd5+; id \\\"WAC.276\\\";\\n\" +\n            \"1r4r1/p2kb2p/bq2p3/3p1p2/5P2/2BB3Q/PP4PP/3RKR2 b - - bm Rg3 Rxg2; id \\\"WAC.277\\\";\\n\" +\n            \"r2qkb1r/pppb2pp/2np1n2/5pN1/2BQP3/2N5/PPP2PPP/R1B1K2R w KQkq - bm Bf7+; id \\\"WAC.278\\\";\\n\" +\n            \"r7/4b3/2p1r1k1/1p1pPp1q/1P1P1P1p/PR2NRpP/2Q3K1/8 w - - bm Nxf5 Rc3; id \\\"WAC.279\\\";\\n\" +\n            \"r1r2bk1/5p1p/pn4p1/N2b4/3Pp3/B3P3/2q1BPPP/RQ3RK1 b - - bm Bxa3; id \\\"WAC.280\\\";\\n\" +\n            \"2R5/2R4p/5p1k/6n1/8/1P2QPPq/r7/6K1 w - - bm Rxh7+; id \\\"WAC.281\\\";\\n\" +\n            \"6k1/2p3p1/1p1p1nN1/1B1P4/4PK2/8/2r3b1/7R w - - bm Rh8+; id \\\"WAC.282\\\";\\n\" +\n            \"3q1rk1/4bp1p/1n2P2Q/3p1p2/6r1/Pp2R2N/1B4PP/7K w - - bm Ng5; id \\\"WAC.283\\\";\\n\" +\n            \"3r3k/pp4pp/8/1P6/3N4/Pn2P1qb/1B1Q2B1/2R3K1 w - - bm Nf5; id \\\"WAC.284\\\";\\n\" +\n            \"2rr3k/1b2bppP/p2p1n2/R7/3P4/1qB2P2/1P4Q1/1K5R w - - bm Qxg7+; id \\\"WAC.285\\\";\\n\" +\n            \"3r1k2/1p6/p4P2/2pP2Qb/8/1P1KB3/P6r/8 b - - bm Rxd5+; id \\\"WAC.286\\\";\\n\" +\n            \"rn3k1r/pp2bBpp/2p2n2/q5N1/3P4/1P6/P1P3PP/R1BQ1RK1 w - - bm Qg4 Qh5; id \\\"WAC.287\\\";\\n\" +\n            \"r1b2rk1/p4ppp/1p1Qp3/4P2N/1P6/8/P3qPPP/3R1RK1 w - - bm Nf6+; id \\\"WAC.288\\\";\\n\" +\n            \"2r3k1/5p1p/p3q1p1/2n3P1/1p1QP2P/1P4N1/PK6/2R5 b - - bm Qe5; id \\\"WAC.289\\\";\\n\" +\n            \"2k2r2/2p5/1pq5/p1p1n3/P1P2n1B/1R4Pp/2QR4/6K1 b - - bm Ne2+; id \\\"WAC.290\\\";\\n\" +\n            \"5r1k/3b2p1/p6p/1pRpR3/1P1P2q1/P4pP1/5QnP/1B4K1 w - - bm h3; id \\\"WAC.291\\\";\\n\" +\n            \"4r3/1Q1qk2p/p4pp1/3Pb3/P7/6PP/5P2/4R1K1 w - - bm d6+; id \\\"WAC.292\\\";\\n\" +\n            \"1nbq1r1k/3rbp1p/p1p1pp1Q/1p6/P1pPN3/5NP1/1P2PPBP/R4RK1 w - - bm Nfg5; id \\\"WAC.293\\\";\\n\" +\n            \"3r3k/1r3p1p/p1pB1p2/8/p1qNP1Q1/P6P/1P4P1/3R3K w - - bm Bf8 Nf5 Qf4; id \\\"WAC.294\\\";\\n\" +\n            \"4r3/p4r1p/R1p2pp1/1p1bk3/4pNPP/2P1K3/2P2P2/3R4 w - - bm Rxd5+; id \\\"WAC.295\\\";\\n\" +\n            \"3r4/1p2k2p/p1b1p1p1/4Q1Pn/2B3KP/4pP2/PP2R1N1/6q1 b - - bm Rd4+ Rf8; id \\\"WAC.296\\\";\\n\" +\n            \"3r1rk1/p3qp1p/2bb2p1/2p5/3P4/1P6/PBQN1PPP/2R2RK1 b - - bm Bxg2 Bxh2+; id \\\"WAC.297\\\";\\n\" +\n            \"3Q4/p3b1k1/2p2rPp/2q5/4B3/P2P4/7P/6RK w - - bm Qh8+; id \\\"WAC.298\\\";\\n\" +\n            \"1n2rr2/1pk3pp/pNn2p2/2N1p3/8/6P1/PP2PPKP/2RR4 w - - bm Nca4; id \\\"WAC.299\\\";\\n\" +\n            \"b2b1r1k/3R1ppp/4qP2/4p1PQ/4P3/5B2/4N1K1/8 w - - bm g6; id \\\"WAC.300\\\";\" +\n            \"\";\n\n    private static final String[] splitUpWACs = wacTests.split(\"\\\\\\n\");\n    static int totalWACS = splitUpWACs.length;\n\n}\n    
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/tests/enginetests/WACTests.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/tests/enginetests/WACTests.java	(date 1543670486000)
@@ -1,9 +1,9 @@
 package tests.enginetests;
 
-import javacode.chessengine.search.Engine;
-import javacode.chessprogram.chess.Move;
-import javacode.chessprogram.graphicsandui.Art;
-import javacode.chessprogram.miscAdmin.ExtendedPositionDescriptionParser;
+import com.github.louism33.axolotl.search.Engine;
+import old.chessprogram.chess.Move;
+import old.chessprogram.graphicsandui.Art;
+import old.chessprogram.miscAdmin.ExtendedPositionDescriptionParser;
 import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
Index: src/main/resources/META-INF/MANIFEST.MF
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>Manifest-Version: 1.0\r\nMain-Class: javacode.chessengine.main.UCIEntry\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/META-INF/MANIFEST.MF	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/resources/META-INF/MANIFEST.MF	(date 1543670486000)
@@ -1,3 +1,3 @@
 Manifest-Version: 1.0
-Main-Class: javacode.chessengine.main.UCIEntry
+Main-Class: com.github.louism33.axolotl.main.UCIEntry
 
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>groupId</groupId>\n    <artifactId>Axolotl</artifactId>\n    <version>1.0-SNAPSHOT</version>\n\n    <repositories>\n        <repository>\n            <id>maven.fluxchess.com</id>\n            <url>http://maven.fluxchess.com/release</url>\n        </repository>\n\n        <repository>\n            <id>com.github.louism33</id>\n            <!--<url>https://github.com/louism33/ChessCore</url>-->\n            <url>https://oss.sonatype.org/content/repositories/snapshots/com/github/louism33/chesscore/1.0-SNAPSHOT</url>\n        </repository>\n    </repositories>\n    \n    <dependencies>\n\n        <dependency>\n            <groupId>com.github.louism33</groupId>\n            <artifactId>chesscore</artifactId>\n            <version>1.0-SNAPSHOT</version>\n        </dependency>\n        \n        <dependency>\n            <groupId>com.fluxchess</groupId>\n            <artifactId>jcpi</artifactId>\n            <version>1.4.0</version>\n        </dependency>\n        \n        <dependency>\n            <groupId>org.junit.jupiter</groupId>\n            <artifactId>junit-jupiter-api</artifactId>\n            <version>RELEASE</version>\n            <scope>compile</scope>\n        </dependency>\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>RELEASE</version>\n            <scope>compile</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>3.8.0</version>\n                <configuration> \n                    <source>11</source>\n                    <target>11</target>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- pom.xml	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ pom.xml	(date 1543672537000)
@@ -16,7 +16,6 @@
 
         <repository>
             <id>com.github.louism33</id>
-            <!--<url>https://github.com/louism33/ChessCore</url>-->
             <url>https://oss.sonatype.org/content/repositories/snapshots/com/github/louism33/chesscore/1.0-SNAPSHOT</url>
         </repository>
     </repositories>
Index: src/main/java/javacode/chessengine/protocolhelperclasses/PVLine.java
===================================================================
--- src/main/java/javacode/chessengine/protocolhelperclasses/PVLine.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/com/github/louism33/axolotl/protocolhelperclasses/PVLine.java	(date 1543860873000)
@@ -1,22 +1,18 @@
-package javacode.chessengine.protocolhelperclasses;
+package com.github.louism33.axolotl.protocolhelperclasses;
 
-import javacode.chessengine.transpositiontable.EngineMovesAndHash;
-import javacode.chessengine.transpositiontable.TranspositionTable;
-import javacode.chessengine.transpositiontable.ZobristHash;
-import javacode.chessprogram.chess.Chessboard;
-import javacode.chessprogram.chess.Move;
+import com.github.louism33.axolotl.transpositiontable.TranspositionTable;
+import com.github.louism33.chesscore.Chessboard;
+import com.github.louism33.chesscore.IllegalUnmakeException;
 
 import java.util.ArrayList;
 import java.util.List;
 
-import static javacode.chessengine.transpositiontable.EngineMovesAndHash.makeMoveAndHashUpdate;
-
 public class PVLine {
     
     private final int score;
-    private final List<Move> pvMoves;
+    private final List<Integer> pvMoves;
 
-    private PVLine(int score, List<Move> pvMoves) {
+    private PVLine(int score, List<Integer> pvMoves) {
         this.score = score;
         this.pvMoves = pvMoves;
     }
@@ -29,14 +25,14 @@
                 '}';
     }
 
-    public static PVLine retrievePVfromTable(Chessboard board, TranspositionTable table){
-        List<Move> moves = new ArrayList<>();
+    public static PVLine retrievePVfromTable(Chessboard board, TranspositionTable table) throws IllegalUnmakeException {
+        Chessboard copyBoard = new Chessboard(board);
+        List<Integer> moves = new ArrayList<>();
         int i = 1;
-        ZobristHash zobristHash = new ZobristHash(board);
         int nodeScore = 0;
 
         while(i < 50) {
-            TranspositionTable.TableObject tableObject = table.get(zobristHash.getBoardHash());
+            TranspositionTable.TableObject tableObject = table.get(copyBoard.getBoardHash());
             if (tableObject == null) {
                 break;
             }
@@ -44,16 +40,12 @@
             if (i == 1){
                 nodeScore = score;
             }
-            Move move = tableObject.getMove();
+            int move = tableObject.getMove();
             moves.add(move);
-            makeMoveAndHashUpdate(board, move, zobristHash);
+            copyBoard.makeMoveAndFlipTurn(move);
             i++;
         }
 
-        for (int x = 0; x < i-1; x++){
-            EngineMovesAndHash.UnMakeMoveAndHashUpdate(board, zobristHash);
-        }
-
         return new PVLine(nodeScore, moves);
     }
 
@@ -62,7 +54,7 @@
         return score;
     }
 
-    public List<Move> getPvMoves() {
+    public List<Integer> getPvMoves() {
         return pvMoves;
     }
 }
Index: src/main/java/javacode/chessengine/protocolhelperclasses/UCIPrinter.java
===================================================================
--- src/main/java/javacode/chessengine/protocolhelperclasses/UCIPrinter.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/com/github/louism33/axolotl/protocolhelperclasses/UCIPrinter.java	(date 1543834157000)
@@ -1,36 +1,31 @@
-package javacode.chessengine.protocolhelperclasses;
+package com.github.louism33.axolotl.protocolhelperclasses;
 
 import com.fluxchess.jcpi.commands.ProtocolInformationCommand;
 import com.fluxchess.jcpi.models.GenericMove;
-import javacode.chessengine.main.UCIEntry;
-import javacode.chessengine.search.Engine;
-import javacode.chessprogram.chess.Move;
+import com.github.louism33.axolotl.main.UCIBoardParser;
+import com.github.louism33.axolotl.main.UCIEntry;
+import com.github.louism33.axolotl.search.Engine;
 
 import java.util.List;
 import java.util.stream.Collectors;
 
 public class UCIPrinter {
-    private final UCIEntry uciEntry;
-    private final Engine engine;
 
-    public UCIPrinter(UCIEntry uciEntry, Engine engine) {
-        this.uciEntry = uciEntry;
-        this.engine = engine;
-    }
-
-    public void acceptPVLine(PVLine pvLine, int depth, boolean mateFound, int distance, long timeTaken){
+    private static UCIEntry uciEntry = new UCIEntry();
+    
+    public static void acceptPVLine(PVLine pvLine, int depth, boolean mateFound, int distance, long timeTaken){
         if (pvLine == null || pvLine.getPvMoves() == null || pvLine.getPvMoves().size() == 0){
             return;
         }
-        List<Move> pvMoves = pvLine.getPvMoves();
+        List<Integer> pvMoves = pvLine.getPvMoves();
         int nodeScore = pvLine.getScore();
 
         sendInfoCommand(pvMoves, nodeScore, depth, mateFound, distance, timeTaken);
     }
 
-    private void sendInfoCommand(List<Move> moves, int nodeScore, int depth,
+    private static void sendInfoCommand(List<Integer> moves, int nodeScore, int depth,
                                  boolean mateFound, int distanceToMate, long timeTaken){
-        if (this.engine.getEngineSpecifications().INFO_LOG) {
+        if (Engine.getEngineSpecifications().INFO_LOG) {
             ProtocolInformationCommand protocolInformationCommand = new ProtocolInformationCommand();
 
             List<GenericMove> genericMovesPV = moves.stream()
@@ -42,7 +37,7 @@
             if (genericMovesPV.size() != 0) {
                 protocolInformationCommand.setCurrentMove(genericMovesPV.get(0));
             }
-            final long totalMovesMade = this.engine.statistics.numberOfMovesMade + this.engine.statistics.numberOfQuiescentMovesMade;
+            final long totalMovesMade = Engine.statistics.numberOfMovesMade + Engine.statistics.numberOfQuiescentMovesMade;
             
             protocolInformationCommand.setNodes(totalMovesMade);
             
@@ -57,12 +52,12 @@
                 protocolInformationCommand.setCentipawns(nodeScore);
             }
 
-            if (this.uciEntry != null) {
-                this.uciEntry.sendInformation(protocolInformationCommand);
-            }
-            else{
+//            if (uciEntry != null) {
+//                uciEntry.sendInformation(protocolInformationCommand);
+//            }
+//            else{
                 System.out.println(protocolInformationCommand.getCentipawns() +" : " + protocolInformationCommand.getMoveList());
-            }
+//            }
         }
 
     }
Index: src/main/java/javacode/chessengine/main/UCIEntry.java
===================================================================
--- src/main/java/javacode/chessengine/main/UCIEntry.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/com/github/louism33/axolotl/main/UCIEntry.java	(date 1543755023000)
@@ -1,17 +1,16 @@
-package javacode.chessengine.main;
+package com.github.louism33.axolotl.main;
 
 import com.fluxchess.jcpi.AbstractEngine;
 import com.fluxchess.jcpi.commands.*;
 import com.fluxchess.jcpi.models.GenericBoard;
 import com.fluxchess.jcpi.models.GenericMove;
-import javacode.chessengine.search.Engine;
-import javacode.chessprogram.chess.Chessboard;
-import javacode.chessprogram.chess.Move;
+import com.github.louism33.axolotl.search.Engine;
+import com.github.louism33.chesscore.Chessboard;
 
 import java.util.List;
 
-import static javacode.chessengine.protocolhelperclasses.UCIBoardParser.convertGenericBoardToChessboard;
-import static javacode.chessengine.protocolhelperclasses.UCIBoardParser.convertMyMoveToGenericMove;
+import static com.github.louism33.axolotl.main.UCIBoardParser.convertGenericBoardToChessboard;
+import static com.github.louism33.axolotl.main.UCIBoardParser.convertMyMoveToGenericMove;
 
 public class UCIEntry extends AbstractEngine {
 
@@ -82,17 +81,17 @@
     // go movetime 30000
     @Override
     public void receive(EngineStartCalculatingCommand command) {
-        Move aiMove = calculatingHelper(command);
+        int aiMove = calculatingHelper(command);
         System.out.println(aiMove);
-        if (aiMove != null){
+        if (aiMove != 0){
             this.getProtocol().send(
                     new ProtocolBestMoveCommand(convertMyMoveToGenericMove(aiMove), null));
         }
     }
 
-    private Move calculatingHelper(EngineStartCalculatingCommand command) {
+    private int calculatingHelper(EngineStartCalculatingCommand command) {
         long clock = timeOnClock(command);
-        Move aiMove;
+        int aiMove;
         if (engine == null){
             engine = new Engine(this);
         }
@@ -135,9 +134,9 @@
 
     @Override
     public void receive(EngineStopCalculatingCommand command) {
-        Move aiMove = engine.getAiMove();
+        int aiMove = engine.getAiMove();
         System.out.println("Time to stop calculating, aiMove: " + aiMove);
-        if (aiMove != null) {
+        if (aiMove != 0) {
             this.getProtocol().send(
                     new ProtocolBestMoveCommand(convertMyMoveToGenericMove(aiMove), null));
         }
Index: src/main/java/javacode/chessengine/main/StandAlone.java
===================================================================
--- src/main/java/javacode/chessengine/main/StandAlone.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/com/github/louism33/axolotl/main/StandAlone.java	(date 1543833996000)
@@ -1,16 +1,11 @@
-package javacode.chessengine.main;
+package com.github.louism33.axolotl.main;
 
-import javacode.chessengine.search.Engine;
-import javacode.chessprogram.check.CheckChecker;
-import javacode.chessprogram.chess.Chessboard;
-import javacode.chessprogram.chess.Move;
-import javacode.chessprogram.graphicsandui.Art;
-import javacode.chessprogram.moveGeneration.MoveGeneratorMaster;
-import javacode.chessprogram.moveMaking.MoveOrganiser;
+import com.github.louism33.axolotl.search.Engine;
+import com.github.louism33.chesscore.Chessboard;
+import com.github.louism33.chesscore.MoveParser;
 
 import java.io.IOException;
 import java.io.InputStreamReader;
-import java.util.List;
 
 @SuppressWarnings("FieldCanBeLocal")
 class StandAlone {
@@ -23,11 +18,10 @@
 
         stdin = new InputStreamReader(System.in);
 
-        Move[] moveArray;
         Chessboard board = new Chessboard();
         String command, prompt;
-        Move move;
-        Engine engine = new Engine();
+        int move;
+//        Engine engine = new Engine();
 
         while(true) {
 
@@ -40,13 +34,12 @@
                     prompt = "Black";
                 }
 
-                System.out.println("\nPosition ("+prompt+" to move):\n" + Art.boardArt(board));
+                System.out.println("\nPosition ("+prompt+" to move):\n" + board);
 
-                List<Move> moves = MoveGeneratorMaster.generateLegalMoves(board, board.isWhiteTurn());
-                moveArray = moves.toArray(new Move[0]);
+                int[] moves = board.generateLegalMoves();
 
-                if (moveArray.length == 0) {
-                    if (CheckChecker.boardInCheck(board, board.isWhiteTurn())){
+                if (moves.length == 0) {
+                    if (board.inCheck(board.isWhiteTurn())){
                         System.out.println("Checkmate");
                     }
                     else {
@@ -57,13 +50,15 @@
 
                 System.out.println("Moves:");
                 System.out.print("   ");
-                for (int i=0; i<moveArray.length; i++) {
+
+                final String[] niceMoves = MoveParser.toString(moves);
+                for (int i = 0; i< niceMoves.length; i++) {
                     if ((i % 10) == 0 && i>0) System.out.print("\n   ");
-                    System.out.print(moveArray[i]+", ");
+                    System.out.print(niceMoves[i]+", ");
                 }
 
                 System.out.println();
-                System.out.println(moveArray.length +  " moves in total.");
+                System.out.println(MoveParser.numberOfRealMoves(moves) +  " moves in total.");
                 System.out.println();
 
                 label:
@@ -74,26 +69,26 @@
 
                     switch (command) {
                         case "go":
-                            move = engine.searchFixedTime(board, timeLimit);
+                            move = Engine.searchFixedTime(board, timeLimit);
                             break label;
                         case "quit":
                             System.out.println("QUIT.\n");
                             System.exit(1);
                         default:
-                            move = null;
-                            for (Move aMoveArray : moveArray) {
-                                if (command.equals(aMoveArray.toString())) {
-                                    move = aMoveArray;
+                            move = 0;
+                            for (int m : moves) {
+                                if (command.equals(MoveParser.toString(m))) {
+                                    move = m;
                                     break;
                                 }
                             }
-                            if (move != null) break label;
+                            if (move != 0) break label;
                             System.out.println("\"" + command + "\" is not a legal move");
                             break;
                     }
                 }
 
-                MoveOrganiser.makeMoveMaster(board, move);
+                board.makeMove(move);
                 board.setWhiteTurn(!board.isWhiteTurn());
                 totalMoves++;
                 System.out.println(prompt + " made move "+move);
Index: src/main/java/javacode/chessengine/evaluation/PositionEval.java
===================================================================
--- src/main/java/javacode/chessengine/evaluation/PositionEval.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/com/github/louism33/axolotl/evaluation/PositionEval.java	(date 1543680331000)
@@ -1,31 +1,31 @@
-package javacode.chessengine.evaluation;
+package com.github.louism33.axolotl.evaluation;
 
-import javacode.chessprogram.chess.BitIndexing;
-import javacode.chessprogram.chess.Chessboard;
+import com.github.louism33.chesscore.BitOperations;
+import com.github.louism33.chesscore.Chessboard;
 
 import java.util.List;
 
-import static javacode.chessengine.evaluation.EvaluatorPositionConstant.*;
+import static com.github.louism33.axolotl.evaluation.EvaluatorPositionConstant.*;
 
 class PositionEval {
 
     static int evalPositionByTurn(Chessboard board, boolean white, boolean naiveEndgame){
         long pawns, knights, bishops, rooks, queens, kings;
         if (white){
-            pawns = board.WHITE_PAWNS;
-            knights = board.WHITE_KNIGHTS;
-            bishops = board.WHITE_BISHOPS;
-            rooks = board.WHITE_ROOKS;
-            queens = board.WHITE_QUEEN;
-            kings = board.WHITE_KING;
+            pawns = board.getWhitePawns();
+            knights = board.getWhiteKnights();
+            bishops = board.getWhiteBishops();
+            rooks = board.getWhiteRooks();
+            queens = board.getWhiteQueen();
+            kings = board.getWhiteKing();
         }
         else {
-            pawns = board.BLACK_PAWNS;
-            knights = board.BLACK_KNIGHTS;
-            bishops = board.BLACK_BISHOPS;
-            rooks = board.BLACK_ROOKS;
-            queens = board.BLACK_QUEEN;
-            kings = board.BLACK_KING;
+            pawns = board.getBlackPawns();
+            knights = board.getBlackKnights();
+            bishops = board.getBlackBishops();
+            rooks = board.getBlackRooks();
+            queens = board.getBlackQueen();
+            kings = board.getBlackKing();
         }
 
         return piecePositionScores(pawns, white, PAWN_POSITION_SCORES)
@@ -38,7 +38,7 @@
     }
 
     private static int piecePositionScores(long pieces, boolean white, int[] whichArray){
-        List<Integer> indexOfAllPieces = BitIndexing.getIndexOfAllPieces(pieces);
+        List<Integer> indexOfAllPieces = BitOperations.getIndexOfAllPieces(pieces);
         int answer = 0;
         for (Integer piece : indexOfAllPieces){
             if (white){
Index: src/main/java/javacode/chessengine/evaluation/Misc.java
===================================================================
--- src/main/java/javacode/chessengine/evaluation/Misc.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/com/github/louism33/axolotl/evaluation/Misc.java	(date 1543682168000)
@@ -1,19 +1,14 @@
-package javacode.chessengine.evaluation;
+package com.github.louism33.axolotl.evaluation;
 
-import javacode.chessprogram.chess.Chessboard;
-import javacode.chessprogram.chess.Move;
+import com.github.louism33.chesscore.Chessboard;
 
-import java.util.List;
-
-import static javacode.chessengine.evaluation.EvaluationConstants.*;
-import static javacode.chessprogram.bitboards.BitBoards.FILES;
-import static javacode.chessprogram.check.CheckChecker.boardInCheck;
-import static javacode.chessprogram.chess.BitIndexing.populationCount;
-import static javacode.chessprogram.moveGeneration.PinnedManager.whichPiecesArePinned;
+import static com.github.louism33.axolotl.evaluation.EvaluationConstants.*;
+import static com.github.louism33.chesscore.BitOperations.populationCount;
+import static com.github.louism33.chesscore.BitboardResources.FILES;
 
 class Misc {
 
-    static int evalMiscByTurn(Chessboard board, boolean white, List<Move> moves) {
+    static int evalMiscByTurn(Chessboard board, boolean white, int[] moves) {
         int score = 0;
         score += 
                 moveNumberScores(board, white, moves)
@@ -25,45 +20,46 @@
         return score;
     }
 
-    private static int pinnedPiecesPenalty(Chessboard board, boolean white, List<Move> moves) {
+    private static int pinnedPiecesPenalty(Chessboard board, boolean white, int[] moves) {
         int score = 0;
 
-        long myKing = white ? board.WHITE_KING : board.BLACK_KING;
-        long myQueen = white ? board.WHITE_QUEEN : board.BLACK_QUEEN;
-
-        long pinnedPiecesToKing = whichPiecesArePinned(board, white, myKing);
-
-        score += populationCount(pinnedPiecesToKing) * BASIC_PINNED_PIECE_PENALTY_KING;
-        if ((pinnedPiecesToKing & myQueen) != 0){
-            score += QUEEN_IS_PINNED;
-        }
-
-        long pinnedPiecesToQueen = whichPiecesArePinned(board, white, myQueen);
-        score += populationCount(pinnedPiecesToQueen) * BASIC_PINNED_PIECE_PENALTY_QUEEN;
+//        long myKing = white ? board.getWhiteKing() : board.getBlackKing();
+//        long myQueen = white ? board.getWhiteQueen() : board.getBlackQueen();
+//
+//        long pinnedPiecesToKing = whichPiecesArePinned(board, white, myKing);
+//
+//        score += populationCount(pinnedPiecesToKing) * BASIC_PINNED_PIECE_PENALTY_KING;
+//        if ((pinnedPiecesToKing & myQueen) != 0){
+//            score += QUEEN_IS_PINNED;
+//        }
+//
+//        long pinnedPiecesToQueen = whichPiecesArePinned(board, white, myQueen);
+//        score += populationCount(pinnedPiecesToQueen) * BASIC_PINNED_PIECE_PENALTY_QUEEN;
 
         return score;
     }
 
-    private static int inCheckPenalty(Chessboard board, boolean white, List<Move> moves) {
-        return boardInCheck(board, white) ? IN_CHECK_PENALTY : 0;
+    private static int inCheckPenalty(Chessboard board, boolean white, int[] moves) {
+        return board.inCheck(white) ? IN_CHECK_PENALTY : 0;
     }
 
-    private static int myTurnBonus(Chessboard board, boolean white, List<Move> moves) {
+    private static int myTurnBonus(Chessboard board, boolean white, int[] moves) {
         return (board.isWhiteTurn() == white) ? MY_TURN_BONUS : 0;
     }
 
-    private static int moveNumberScores(Chessboard board, boolean white, List<Move> moves) {
-        return white == board.isWhiteTurn() ? (moves.size() * MOVE_NUMBER_POINT) / 20 : 0;
+    private static int moveNumberScores(Chessboard board, boolean white, int[] moves) {
+        return white == board.isWhiteTurn() ? (moves.length * MOVE_NUMBER_POINT) / 20 : 0;
     }
 
-    private static int batteryAndFileControl(Chessboard board, boolean white, List<Move> moves) {
-        long myQueens = white ? board.WHITE_QUEEN : board.BLACK_QUEEN;
-        long myRooks = white ? board.WHITE_ROOKS : board.BLACK_ROOKS;
+    private static int batteryAndFileControl(Chessboard board, boolean white, int[] moves) {
+        long myQueens = white ? board.getWhiteQueen() : board.getBlackQueen();
+        long myRooks = white ? board.getWhiteRooks() : board.getBlackRooks();
         long myBatteryPieces = myQueens | myRooks;
-        long enemyPieces = white ? board.ALL_BLACK_PIECES() : board.ALL_WHITE_PIECES();
+        long enemyPieces = white ? board.blackPieces() : board.whitePieces();
 
         int batteryAndFileControlScore = 0;
-        for (long file : FILES) {
+        for (int i = 0; i < FILES.length; i++) {
+            long file = FILES[i];
             if ((file & myBatteryPieces) == 0) {
                 continue;
             }
Index: src/main/java/javacode/chessengine/utilities/Statistics.java
===================================================================
--- src/main/java/javacode/chessengine/utilities/Statistics.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/com/github/louism33/axolotl/utilities/Statistics.java	(date 1543832551000)
@@ -1,21 +1,14 @@
-package javacode.chessengine.utilities;
+package com.github.louism33.axolotl.utilities;
 
-import javacode.chessengine.search.Engine;
-import javacode.chessprogram.chess.Move;
+import com.github.louism33.axolotl.search.Engine;
 
 import java.util.Arrays;
 
-import static javacode.chessengine.moveordering.KillerMoves.killerMoves;
-import static javacode.chessengine.moveordering.KillerMoves.mateKiller;
+import static com.github.louism33.axolotl.moveordering.KillerMoves.killerMoves;
+import static com.github.louism33.axolotl.moveordering.KillerMoves.mateKiller;
 
 public class Statistics {
     
-    private final Engine engine;
-
-    public Statistics(Engine engine) {
-        this.engine = engine;
-    }
-
     private final int[] whichMoveWasTheBest = new int[60];
     public final int[] whichMoveWasTheBestQuiescence = new int[60];
 
@@ -69,7 +62,7 @@
     public int numberOfUpperBounds = 0;
     public int numberOfHashBetaCutoffs = 0;
 
-    public void infoLog(long endTime, long startTime, Move move){
+    public void infoLog(long endTime, long startTime, int move){
         long time = endTime - startTime;
         System.out.println("time taken millis: " + time);
         System.out.println("------");
@@ -89,33 +82,33 @@
         System.out.println("------");
 
         System.out.println("Modifications:" +
-                "\nALLOW_PRINCIPLE_VARIATION_SEARCH = "     + this.engine.getEngineSpecifications().ALLOW_PRINCIPLE_VARIATION_SEARCH +
-                "\nALLOW_MATE_DISTANCE_PRUNING = "          + this.engine.getEngineSpecifications().ALLOW_MATE_DISTANCE_PRUNING +
-                "\nALLOW_EXTENSIONS = "                     + this.engine.getEngineSpecifications().ALLOW_EXTENSIONS +
-                "\nALLOW_LATE_MOVE_REDUCTIONS = "           + this.engine.getEngineSpecifications().ALLOW_LATE_MOVE_REDUCTIONS +
-                "\nALLOW_LATE_MOVE_PRUNING = "              + this.engine.getEngineSpecifications().ALLOW_LATE_MOVE_PRUNING +
-                "\nALLOW_NULL_MOVE_PRUNING = "              + this.engine.getEngineSpecifications().ALLOW_NULL_MOVE_PRUNING +
-                "\nALLOW_ALPHA_RAZORING = "                 + this.engine.getEngineSpecifications().ALLOW_ALPHA_RAZORING +
-                "\nALLOW_BETA_RAZORING = "                  + this.engine.getEngineSpecifications().ALLOW_BETA_RAZORING +
-                "\nALLOW_FUTILITY_PRUNING = "               + this.engine.getEngineSpecifications().ALLOW_FUTILITY_PRUNING +
-                "\nALLOW_QUIESCENCE_FUTILITY_PRUNING = "    + this.engine.getEngineSpecifications().ALLOW_QUIESCENCE_FUTILITY_PRUNING +
+                "\nALLOW_PRINCIPLE_VARIATION_SEARCH = "     + Engine.getEngineSpecifications().ALLOW_PRINCIPLE_VARIATION_SEARCH +
+                "\nALLOW_MATE_DISTANCE_PRUNING = "          + Engine.getEngineSpecifications().ALLOW_MATE_DISTANCE_PRUNING +
+                "\nALLOW_EXTENSIONS = "                     + Engine.getEngineSpecifications().ALLOW_EXTENSIONS +
+                "\nALLOW_LATE_MOVE_REDUCTIONS = "           + Engine.getEngineSpecifications().ALLOW_LATE_MOVE_REDUCTIONS +
+                "\nALLOW_LATE_MOVE_PRUNING = "              + Engine.getEngineSpecifications().ALLOW_LATE_MOVE_PRUNING +
+                "\nALLOW_NULL_MOVE_PRUNING = "              + Engine.getEngineSpecifications().ALLOW_NULL_MOVE_PRUNING +
+                "\nALLOW_ALPHA_RAZORING = "                 + Engine.getEngineSpecifications().ALLOW_ALPHA_RAZORING +
+                "\nALLOW_BETA_RAZORING = "                  + Engine.getEngineSpecifications().ALLOW_BETA_RAZORING +
+                "\nALLOW_FUTILITY_PRUNING = "               + Engine.getEngineSpecifications().ALLOW_FUTILITY_PRUNING +
+                "\nALLOW_QUIESCENCE_FUTILITY_PRUNING = "    + Engine.getEngineSpecifications().ALLOW_QUIESCENCE_FUTILITY_PRUNING +
                 
-                "\nALLOW_SEE_PRUNING = "                    + this.engine.getEngineSpecifications().ALLOW_SEE_PRUNING +
-                "\nALLOW_QUIESCENCE_SEE_PRUNING = "         + this.engine.getEngineSpecifications().ALLOW_QUIESCENCE_SEE_PRUNING +
+                "\nALLOW_SEE_PRUNING = "                    + Engine.getEngineSpecifications().ALLOW_SEE_PRUNING +
+                "\nALLOW_QUIESCENCE_SEE_PRUNING = "         + Engine.getEngineSpecifications().ALLOW_QUIESCENCE_SEE_PRUNING +
                 
-                "\nALLOW_KILLERS = "                        + this.engine.getEngineSpecifications().ALLOW_KILLERS +
-                "\nALLOW_HISTORY_MOVES = "                  + this.engine.getEngineSpecifications().ALLOW_HISTORY_MOVES +
-                "\nALLOW_ASPIRATION_WINDOWS = "             + this.engine.getEngineSpecifications().ALLOW_ASPIRATION_WINDOWS +
-                "\nALLOW_INTERNAL_ITERATIVE_DEEPENING = "   + this.engine.getEngineSpecifications().ALLOW_INTERNAL_ITERATIVE_DEEPENING +
+                "\nALLOW_KILLERS = "                        + Engine.getEngineSpecifications().ALLOW_KILLERS +
+                "\nALLOW_HISTORY_MOVES = "                  + Engine.getEngineSpecifications().ALLOW_HISTORY_MOVES +
+                "\nALLOW_ASPIRATION_WINDOWS = "             + Engine.getEngineSpecifications().ALLOW_ASPIRATION_WINDOWS +
+                "\nALLOW_INTERNAL_ITERATIVE_DEEPENING = "   + Engine.getEngineSpecifications().ALLOW_INTERNAL_ITERATIVE_DEEPENING +
                 "");
 
         System.out.println();
-        if (this.engine.getEngineSpecifications().ALLOW_PRINCIPLE_VARIATION_SEARCH) {
+        if (Engine.getEngineSpecifications().ALLOW_PRINCIPLE_VARIATION_SEARCH) {
             System.out.println("number of PVS hits: " + numberOfPVSHits);
             System.out.println("number of PVS misses: " + numberOfPVSMisses);
             System.out.println();
         }
-        if (this.engine.getEngineSpecifications().ALLOW_ASPIRATION_WINDOWS) {
+        if (Engine.getEngineSpecifications().ALLOW_ASPIRATION_WINDOWS) {
             System.out.println("Number of successful aspirations: " + numberOfSuccessfulAspirations);
             System.out.println("Number of failed aspirations: " + numberOfFailedAspirations);
             System.out.println();
@@ -130,7 +123,7 @@
         System.out.println("numberOfHashBetaCutoffs: " + numberOfHashBetaCutoffs);
         System.out.println();
 
-        if (this.engine.getEngineSpecifications().ALLOW_KILLERS){
+        if (Engine.getEngineSpecifications().ALLOW_KILLERS){
             System.out.println("numberOfVictoriousKillersOne: " + numberOfVictoriousKillersOne);
             System.out.println("numberOfVictoriousKillersTwo: " + numberOfVictoriousKillersTwo);
             System.out.println("numberOfVeteranVictoriousKillersOne: " + numberOfVeteranVictoriousKillersOne);
@@ -138,64 +131,64 @@
             System.out.println();
         }
 
-        if (this.engine.getEngineSpecifications().ALLOW_MATE_KILLERS){
+        if (Engine.getEngineSpecifications().ALLOW_MATE_KILLERS){
             System.out.println("numberOfVictoriousMaters: " + numberOfVictoriousMaters);
             System.out.println();
         }
 
-        if (this.engine.getEngineSpecifications().ALLOW_EXTENSIONS) {
+        if (Engine.getEngineSpecifications().ALLOW_EXTENSIONS) {
             System.out.println("number of Check Extensions " + numberOfCheckExtensions);
             System.out.println();
         }
-        if (this.engine.getEngineSpecifications().ALLOW_LATE_MOVE_REDUCTIONS) {
+        if (Engine.getEngineSpecifications().ALLOW_LATE_MOVE_REDUCTIONS) {
             System.out.println("number of late move reductions: " + numberOfLateMoveReductions);
             System.out.println("number of late move reduction hits: " + numberOfLateMoveReductionsHits);
             System.out.println("number of late move reduction misses: " + numberOfLateMoveReductionsMisses);
             System.out.println();
         }
-        if (this.engine.getEngineSpecifications().ALLOW_LATE_MOVE_PRUNING) {
+        if (Engine.getEngineSpecifications().ALLOW_LATE_MOVE_PRUNING) {
             System.out.println("number of late move prunings: " + numberOfLateMovePrunings);
             System.out.println();
         }
-        if (this.engine.getEngineSpecifications().ALLOW_NULL_MOVE_PRUNING){
+        if (Engine.getEngineSpecifications().ALLOW_NULL_MOVE_PRUNING){
             System.out.println("number of null move hits: " + numberOfNullMoveHits);
             System.out.println("number of null move misses: " + numberOfNullMoveMisses);
             System.out.println();
         }
-        if (this.engine.getEngineSpecifications().ALLOW_ALPHA_RAZORING) {
+        if (Engine.getEngineSpecifications().ALLOW_ALPHA_RAZORING) {
             System.out.println("Number of successful alpha razors: " + numberOfSuccessfulAlphaRazors);
             System.out.println("Number of failed alpha razors: " + numberOfFailedAlphaRazors);
             System.out.println();
         }
 
-        if (this.engine.getEngineSpecifications().ALLOW_BETA_RAZORING) {
+        if (Engine.getEngineSpecifications().ALLOW_BETA_RAZORING) {
             System.out.println("Number of successful beta razors: " + numberOfSuccessfulBetaRazors);
             System.out.println();
         }
 
-        if (this.engine.getEngineSpecifications().ALLOW_FUTILITY_PRUNING) {
+        if (Engine.getEngineSpecifications().ALLOW_FUTILITY_PRUNING) {
             System.out.println("Number of successful futilities: " + numberOfSuccessfulFutilities);
             System.out.println("Number of failed futilities: " + numberOfFailedFutilities);
             System.out.println();
         }   
         
-        if (this.engine.getEngineSpecifications().ALLOW_SEE_PRUNING) {
+        if (Engine.getEngineSpecifications().ALLOW_SEE_PRUNING) {
             System.out.println("Number of successful SEEs: " + numberOfSuccessfulSEEs);
             System.out.println();
         }            
         
-        if (this.engine.getEngineSpecifications().ALLOW_QUIESCENCE_SEE_PRUNING) {
+        if (Engine.getEngineSpecifications().ALLOW_QUIESCENCE_SEE_PRUNING) {
             System.out.println("Number of successful quiescent SEEs: " + numberOfSuccessfulQuiescentSEEs);
             System.out.println();
         }        
         
-        if (this.engine.getEngineSpecifications().ALLOW_QUIESCENCE_FUTILITY_PRUNING) {
+        if (Engine.getEngineSpecifications().ALLOW_QUIESCENCE_FUTILITY_PRUNING) {
             System.out.println("Number of successful Q futilities: " + numberOfSuccessfulQuiescenceFutilities);
             System.out.println("Number of failed Q futilities: " + numberOfFailedQuiescenceFutilities);
             System.out.println();
         }
 
-        if (this.engine.getEngineSpecifications().ALLOW_INTERNAL_ITERATIVE_DEEPENING) {
+        if (Engine.getEngineSpecifications().ALLOW_INTERNAL_ITERATIVE_DEEPENING) {
             System.out.println("Number of IIDS: " + numberOfIIDs);
             System.out.println("Number of successful IIDS: " + numberOfSuccessfulIIDs);
             System.out.println("Number of failed IIDS: " + numberOfFailedIIDs);
@@ -261,31 +254,31 @@
     }
 
 
-    public void statisticsFailHigh(int ply, int numberOfMovesSearched, Move move) {
-        if (numberOfMovesSearched - 1 < this.engine.statistics.whichMoveWasTheBest.length) {
-            this.engine.statistics.whichMoveWasTheBest[numberOfMovesSearched - 1]++;
+    public void statisticsFailHigh(int ply, int numberOfMovesSearched, int move) {
+        if (numberOfMovesSearched - 1 < Engine.statistics.whichMoveWasTheBest.length) {
+            Engine.statistics.whichMoveWasTheBest[numberOfMovesSearched - 1]++;
         }
 
-        if (move.equals(mateKiller[ply])){
-            this.engine.statistics.numberOfVictoriousMaters++;
+        if (move == (mateKiller[ply])){
+            Engine.statistics.numberOfVictoriousMaters++;
         }
 
-        if (move.equals(killerMoves[ply][0])){
-            this.engine.statistics.numberOfVictoriousKillersOne++;
+        if (move == (killerMoves[ply][0])){
+            Engine.statistics.numberOfVictoriousKillersOne++;
         }
-        if (move.equals(killerMoves[ply][1])){
-            this.engine.statistics.numberOfVictoriousKillersTwo++;
+        if (move == (killerMoves[ply][1])){
+            Engine.statistics.numberOfVictoriousKillersTwo++;
         }
 
         if (ply > 1) {
-            if (move.equals(killerMoves[ply - 2][0])) {
-                this.engine.statistics.numberOfVeteranVictoriousKillersOne++;
+            if (move == (killerMoves[ply - 2][0])) {
+                Engine.statistics.numberOfVeteranVictoriousKillersOne++;
             }
-            if (move.equals(killerMoves[ply - 2][1])) {
-                this.engine.statistics.numberOfVeteranVictoriousKillersTwo++;
+            if (move == (killerMoves[ply - 2][1])) {
+                Engine.statistics.numberOfVeteranVictoriousKillersTwo++;
             }
         }
-        this.engine.statistics.numberOfFailHighs++;
+        Engine.statistics.numberOfFailHighs++;
     }
 
 }
Index: src/main/java/tests/enginetests/EET.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package tests.enginetests;\n\nimport javacode.chessengine.search.Engine;\nimport javacode.chessprogram.chess.Move;\nimport javacode.chessprogram.graphicsandui.Art;\nimport javacode.chessprogram.miscAdmin.ExtendedPositionDescriptionParser;\nimport org.junit.Assert;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.Parameterized;\nimport org.junit.runners.Parameterized.Parameters;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\n\n@RunWith(Parameterized.class)\npublic class EET {\n    /*\n    Arasan = 60 sec.\t88/100\n     */\n\n    private static final int timeLimit = 60000;\n\n    @Parameters(name = \"{index} Test: {1}\")\n    public static Collection<Object[]> data() {\n        List<Object[]> answers = new ArrayList<>();\n        for (String splitUpWAC : splitUpWACs) {\n            Object[] objectAndName = new Object[2];\n            ExtendedPositionDescriptionParser.EPDObject EPDObject = ExtendedPositionDescriptionParser.parseEDPPosition(splitUpWAC);\n            objectAndName[0] = EPDObject;\n            objectAndName[1] = EPDObject.getId();\n            answers.add(objectAndName);\n        }\n        return answers;\n    }\n\n\n    private static ExtendedPositionDescriptionParser.EPDObject EPDObject;\n\n    public EET(Object edp, Object name) {\n        EPDObject = (ExtendedPositionDescriptionParser.EPDObject) edp;\n    }\n\n    @Test\n    public void test() {\n        WACTests.reset();\n        System.out.println(Art.boardArt(EPDObject.getBoard()));\n        Move move = new Engine().searchFixedTime(EPDObject.getBoard(), timeLimit);\n        System.out.println(move);\n\n        List<Integer> winningMoveDestination = EPDObject.getBestMoveDestinationIndex();\n        int myMoveDestination = move.destinationIndex;\n\n        Assert.assertTrue(winningMoveDestination.contains(myMoveDestination));\n\n        List<Integer> losingMoveDestination = EPDObject.getAvoidMoveDestinationIndex();\n\n        Assert.assertFalse(losingMoveDestination.contains(myMoveDestination));\n    }\n\n\n\n    private static final String wacTests = \"\" +\n            \"8/8/p2p3p/3k2p1/PP6/3K1P1P/8/8 b - - bm Kc6; id \\\"E_E_T 001 - B vs B\\\";\\n\" +\n            \"8/p5pp/3k1p2/3p4/1P3P2/P1K5/5P1P/8 b - - bm g5; id \\\"E_E_T 002 - B vs B\\\";\\n\" +\n            \"8/1p3p2/p7/8/2k5/4P1pP/2P1K1P1/8 w - - bm h4; id \\\"E_E_T 003 - B vs B\\\";\\n\" +\n            \"8/pp5p/3k2p1/8/4Kp2/2P1P2P/P7/8 w - - bm exf4; id \\\"E_E_T 004 - B vs B\\\";\\n\" +\n            \"8/7p/1p3pp1/p2K4/Pk3PPP/8/1P6/8 b - - bm Kb3 f5; id \\\"E_E_T 005 - B vs B\\\";\\n\" +\n            \"2k5/3b4/PP3K2/7p/4P3/1P6/8/8 w - - bm Ke7; id \\\"E_E_T 006 - B vs L\\\";\\n\" +\n            \"8/3Pb1p1/8/3P2P1/5P2/7k/4K3/8 w - - bm Kd3; id \\\"E_E_T 007 - B vs L\\\";\\n\" +\n            \"8/1Pk2Kpp/8/8/4nPP1/7P/8/8 b - - bm Nf2; id \\\"E_E_T 008 - B vs S\\\";\\n\" +\n            \"2n5/4k1p1/P6p/3PK3/7P/8/6P1/8 b - - bm g6; id \\\"E_E_T 009 - B vs S\\\";\\n\" +\n            \"4k3/8/3PP1p1/8/3K3p/8/3n2PP/8 b - - am Nf1; id \\\"E_E_T 010 - B vs S\\\";\\n\" +\n            \"6k1/5p2/P3p1p1/2Qp4/5q2/2K5/8/8 b - - am Qc1+ Qe5+; id \\\"E_E_T 011 - D vs D\\\";\\n\" +\n            \"8/6pk/8/2p2P1p/6qP/5QP1/8/6K1 w - - bm Qd3 Qf2; id \\\"E_E_T 012 - D vs D\\\";\\n\" +\n            \"5q1k/5P1p/Q7/5n1p/6P1/7K/8/8 w - - bm Qa1+; id \\\"E_E_T 013 - D vs D&S\\\";\\n\" +\n            \"4qr2/4p2k/1p2P1pP/5P2/1P3P2/6Q1/8/3B1K2 w - - bm Ba4; id \\\"E_E_T 014 - D&L vs D&T\\\";\\n\" +\n            \"8/kn4b1/P2B4/8/1Q6/6pP/1q4pP/5BK1 w - - bm Bc5+; id \\\"E_E_T 015 - D&L&L vs D&L&S\\\";\\n\" +\n            \"6k1/1p2p1bp/p5p1/4pb2/1q6/4Q3/1P2BPPP/2R3K1 w - - bm Qa3; id \\\"E_E_T 017 - D&T&L vs D&L&L\\\";\\n\" +\n            \"1rr2k2/p1q5/3p2Q1/3Pp2p/8/1P3P2/1KPRN3/8 w - e6 bm Rd1; id \\\"E_E_T 018 - D&T&S vs D&T&T\\\";\\n\" +\n            \"r5k1/3R2p1/p1r1q2p/P4p2/5P2/2p1P3/5P1P/1R1Q2K1 w - - am Rbb7; id \\\"E_E_T 019 - D&T&T vs D&T&T\\\";\\n\" +\n            \"8/1p4k1/pK5p/2B5/P4pp1/8/7P/8 b - - am g3; id \\\"E_E_T 020 - L vs B\\\";\\n\" +\n            \"8/6p1/6P1/6Pp/B1p1p2K/6PP/3k2P1/8 w - - bm Bd1; id \\\"E_E_T 021 - L vs B\\\";\\n\" +\n            \"8/4k3/8/2Kp3p/B3bp1P/P7/1P6/8 b - - bm Bg2; id \\\"E_E_T 022 - L vs L\\\";\\n\" +\n            \"8/8/2p1K1p1/2k5/p7/P4BpP/1Pb3P1/8 w - - am Kd7; id \\\"E_E_T 023 - L vs L\\\";\\n\" +\n            \"8/3p3B/5p2/5P2/p7/PP5b/k7/6K1 w - - bm b4; id \\\"E_E_T 024 - L vs L\\\";\\n\" +\n            \"8/p4p2/1p2k2p/6p1/P4b1P/1P6/3B1PP1/6K1 w - - am Bxf4; id \\\"E_E_T 025 - L vs L\\\";\\n\" +\n            \"3b3k/1p4p1/p5p1/4B3/8/7P/1P3PP1/5K2 b - - am Bf6; id \\\"E_E_T 027 - L vs L\\\";\\n\" +\n            \"4b1k1/1p3p2/4pPp1/p2pP1P1/P2P4/1P1B4/8/2K5 w - - bm b4; id \\\"E_E_T 028 - L vs L\\\";\\n\" +\n            \"8/3k1p2/n3pP2/1p2P2p/5K2/1PB5/7P/8 b - - am Kc6 b4; id \\\"E_E_T 029 - L vs S\\\";\\n\" +\n            \"8/8/4p1p1/1P1kP3/4n1PK/2B4P/8/8 b - - bm Kc5; id \\\"E_E_T 030 - L vs S\\\";\\n\" +\n            \"8/5k2/4p3/B2p2P1/3K2n1/1P6/8/8 b - - bm Kg6; id \\\"E_E_T 031 - L vs S\\\";\\n\" +\n            \"5b2/p4B2/5B2/1bN5/8/P3r3/4k1K1/8 w - - bm Bh5+; id \\\"E_E_T 032 - L&L&S vs T&L&L\\\";\\n\" +\n            \"8/p5pq/8/p2N3p/k2P3P/8/KP3PB1/8 w - - bm Be4; id \\\"E_E_T 033 - L&S vs D\\\";\\n\" +\n            \"1b6/1P6/8/2KB4/6pk/3N3p/8/8 b - - bm Kg3; id \\\"E_E_T 034 - L&S vs L&B\\\";\\n\" +\n            \"8/p7/7k/1P1K3P/8/1n6/4Bp2/5Nb1 b - - bm Na5; id \\\"E_E_T 035 - L&S vs L&S\\\";\\n\" +\n            \"8/8/8/3K4/2N5/p2B4/p7/k4r2 w - - bm Kc5; id \\\"E_E_T 036 - L&S vs T&B\\\";\\n\" +\n            \"8/8/2kp4/5Bp1/8/5K2/3N4/2rN4 w - - bm Nb3; id \\\"E_E_T 037 - L&S&S vs T&B\\\";\\n\" +\n            \"k2K4/1p4pN/P7/1p3P2/pP6/8/8/8 w - - bm f6 Kc7; id \\\"E_E_T 038 - S vs B\\\";\\n\" +\n            \"k2N4/1qpK1p2/1p6/1P4p1/1P4P1/8/8/8 w - - bm Nc6; id \\\"E_E_T 039 - S vs D\\\";\\n\" +\n            \"6k1/4b3/4p1p1/8/6pP/4PN2/5K2/8 w - - bm Ne5 Nh2; id \\\"E_E_T 040 - S vs L\\\";\\n\" +\n            \"8/8/6Np/2p3kP/1pPbP3/1P3K2/8/8 w - - bm e5; id \\\"E_E_T 041 - S vs L\\\";\\n\" +\n            \"8/3P4/1p3b1p/p7/P7/1P3NPP/4p1K1/3k4 w - - bm g4; id \\\"E_E_T 042 - S vs L\\\";\\n\" +\n            \"8/8/1p2p3/p3p2b/P1PpP2P/kP6/2K5/7N w - - bm Nf2; id \\\"E_E_T 043 - S vs L\\\";\\n\" +\n            \"4N3/8/3P3p/1k2P3/7p/1n1K4/8/8 w - - bm d7; id \\\"E_E_T 044 - S vs S\\\";\\n\" +\n            \"N5n1/2p1kp2/2P3p1/p4PP1/K4P2/8/8/8 w - - bm f6 Kb5; id \\\"E_E_T 045 - S vs S\\\";\\n\" +\n            \"8/8/2pn4/p4p1p/P4N2/1Pk2KPP/8/8 w - - bm Ne2 Ne6; id \\\"E_E_T 046 - S vs S\\\";\\n\" +\n            \"8/7k/2P5/2p4p/P3N2K/8/8/5r2 w - - bm Ng5+; id \\\"E_E_T 047 - S vs T\\\";\\n\" +\n            \"2k1r3/p7/K7/1P6/P2N4/8/P7/8 w - - bm Nc6; id \\\"E_E_T 048 - S vs T\\\";\\n\" +\n            \"1k6/8/8/1K6/5pp1/8/4Pp1p/R7 w - - bm Kb6; id \\\"E_E_T 049 - T vs B\\\";\\n\" +\n            \"6k1/8/8/1K4p1/3p2P1/2pp4/8/1R6 w - - bm Kc6; id \\\"E_E_T 050 - T vs B\\\";\\n\" +\n            \"8/5p2/3pp2p/p5p1/4Pk2/2p2P1P/P1Kb2P1/1R6 w - - bm a4 Rb5; id \\\"E_E_T 051 - T vs L\\\";\\n\" +\n            \"8/8/4pR2/3pP2p/6P1/2p4k/P1Kb4/8 b - - bm hxg4; id \\\"E_E_T 052 - T vs L\\\";\\n\" +\n            \"3k3K/p5P1/P3r3/8/1N6/8/8/8 w - - bm Kh7; id \\\"E_E_T 053 - T vs S\\\";\\n\" +\n            \"8/8/5p2/5k2/p4r2/PpKR4/1P5P/8 w - - am Rd4; id \\\"E_E_T 054 - T vs T\\\";\\n\" +\n            \"5k2/7R/8/4Kp2/5Pp1/P5rp/1P6/8 w - - bm Kf6; id \\\"E_E_T 055 - T vs T\\\";\\n\" +\n            \"2K5/p7/7P/5pR1/8/5k2/r7/8 w - - bm Rxf5+; id \\\"E_E_T 056 - T vs T\\\";\\n\" +\n            \"8/2R4p/4k3/1p2P3/pP3PK1/r7/8/8 b - - bm h5 Ra1; id \\\"E_E_T 057 - T vs T\\\";\\n\" +\n            \"2k1r3/5R2/3KP3/8/1pP3p1/1P5p/8/8 w - - bm Rc7+; id \\\"E_E_T 058 - T vs T\\\";\\n\" +\n            \"8/6p1/1p5p/1R2k3/4p3/1P2P3/1K4PP/3r4 b - - am Rd5; id \\\"E_E_T 059 - T vs T\\\";\\n\" +\n            \"5K2/kp3P2/2p5/2Pp4/3P4/r7/p7/6R1 w - - bm Ke7; id \\\"E_E_T 060 - T vs T\\\";\\n\" +\n            \"8/pp3K2/2P4k/5p2/8/6P1/R7/6r1 w - - bm Kf6; id \\\"E_E_T 061 - T vs T\\\";\\n\" +\n            \"2r3k1/6pp/3pp1P1/1pP5/1P6/P4R2/5K2/8 w - - bm c6; id \\\"E_E_T 062 - T vs T\\\";\\n\" +\n            \"r2k4/8/8/1P4p1/8/p5P1/6P1/1R3K2 w - - bm b6; id \\\"E_E_T 063 - T vs T\\\";\\n\" +\n            \"8/4k3/1p4p1/p7/P1r1P3/1R4Pp/5P1P/4K3 w - - bm Ke2; id \\\"E_E_T 064 - T vs T\\\";\\n\" +\n            \"R7/4kp2/P3p1p1/3pP1P1/3P1P2/p6r/3K4/8 w - - bm Kc2; id \\\"E_E_T 065 - T vs T\\\";\\n\" +\n            \"8/1pp1r3/p1p2k2/6p1/P5P1/1P3P2/2P1RK2/8 b - - am Rxe2+ Re5; id \\\"E_E_T 066 - T vs T\\\";\\n\" +\n            \"8/1p2R3/8/p5P1/3k4/P2p2K1/1P6/5r2 w - - bm Kg2; id \\\"E_E_T 067 - T vs T\\\";\\n\" +\n            \"R7/P5Kp/2P5/k3r2P/8/5p2/p4P2/8 w - - bm Rb8; id \\\"E_E_T 068 - T vs T\\\";\\n\" +\n            \"8/2p4K/4k1p1/p1p1P3/PpP2P2/5R1P/8/6r1 b - - bm Kf7; id \\\"E_E_T 069 - T vs T\\\";\\n\" +\n            \"8/B7/1R6/q3k2p/8/6p1/5P2/5K2 w - - bm Rb3; id \\\"E_E_T 071 - T&L vs D\\\";\\n\" +\n            \"5k2/8/2Pb1B2/8/6RK/7p/5p1P/8 w - - bm Be5; id \\\"E_E_T 072 - T&L vs L&B\\\";\\n\" +\n            \"3kB3/R4P2/8/8/1p6/pp6/5r2/1K6 w - - bm f8=Q f8=R; id \\\"E_E_T 073 - T&L vs T&B\\\";\\n\" +\n            \"5k2/1p6/1P1p4/1K1p2p1/PB1P2P1/3pR2p/1P2p1pr/8 w - - bm Ba5; id \\\"E_E_T 074 - T&L vs T&B\\\";\\n\" +\n            \"6k1/p6p/1p1p2p1/2bP4/P1P5/2B3P1/4r2P/1R5K w - - bm a5; id \\\"E_E_T 075 - T&L vs T&L\\\";\\n\" +\n            \"3R3B/8/1r4b1/8/4pP2/7k/8/7K w - - bm Bd4; id \\\"E_E_T 076 - T&L vs T&L\\\";\\n\" +\n            \"rk1b4/p2p2p1/1P6/2R2P2/8/2K5/8/5B2 w - - bm Rc8+; id \\\"E_E_T 077 - T&L vs T&L\\\";\\n\" +\n            \"3r1k2/8/7R/8/8/pp1B4/P7/n1K5 w - - bm Rf6+; id \\\"E_E_T 078 - T&L vs T&S\\\";\\n\" +\n            \"r5k1/5ppp/1p6/2b1R3/1p3P2/2nP2P1/1B3PKP/5B2 w - - bm d4; id \\\"E_E_T 079 - T&L&L vs T&L&S\\\";\\n\" +\n            \"5k2/3p1b2/4pN2/3PPpp1/6R1/6PK/1B1q1P2/8 w - - bm Ba3+; id \\\"E_E_T 080 - T&L&S vs D&L\\\";\\n\" +\n            \"8/1p5p/6p1/1p4Pp/1PpR4/2P1K1kB/6Np/7b w - - bm Rd1; id \\\"E_E_T 081 - T&L&S vs L&B\\\";\\n\" +\n            \"7k/1p1Nr2P/3Rb3/8/3K4/6b1/8/5B2 w - - bm Ne5; id \\\"E_E_T 082 - T&L&S vs T&L&L\\\";\\n\" +\n            \"8/1B4k1/5pn1/6N1/1P3rb1/P1K4p/3R4/8 w - - bm Nxh3; id \\\"E_E_T 083 - T&L&S vs T&L&S\\\";\\n\" +\n            \"8/7p/6p1/3Np1bk/4Pp2/1R3PPK/5r1P/8 w - - bm Nc7; id \\\"E_E_T 084 - T&S vs T&L\\\";\\n\" +\n            \"1r6/3b1p2/2k4P/1N3p1P/5P2/8/3R4/2K5 w - - bm Na7+; id \\\"E_E_T 085 - T&S vs T&L\\\";\\n\" +\n            \"k6r/8/1R6/8/1pK2p2/8/7N/3b4 w - - bm Nf1; id \\\"E_E_T 086 - T&S vs T&L\\\";\\n\" +\n            \"8/8/8/p1p5/2P1k3/1Pn5/1N1R2K1/1r6 w - - bm Kg3; id \\\"E_E_T 087 - T&S vs T&S\\\";\\n\" +\n            \"5n1k/1r3P1p/p2p3P/P7/8/1N6/5R2/4K3 b - - bm Re7+; id \\\"E_E_T 088 - T&S vs T&S\\\";\\n\" +\n            \"6R1/P2k1N2/r7/7P/r7/p7/7K/8 w - - bm Nh6; id \\\"E_E_T 089 - T&S vs T&T\\\";\\n\" +\n            \"8/1rk1P3/7p/P7/1N2r3/5RKb/8/8 w - - bm Na6+; id \\\"E_E_T 090 - T&S&B vs T&T&L\\\";\\n\" +\n            \"2K5/k3q3/6pR/6p1/6Pp/7P/8/3R4 w - - bm Rh7; id \\\"E_E_T 090 - T&T vs D\\\";\\n\" +\n            \"R5bk/5r2/P7/1P1pR3/3P4/7p/5p1K/8 w - - bm Rh5+; id \\\"E_E_T 092 - T&T vs T&L\\\";\\n\" +\n            \"4k3/7r/3nb3/2R5/8/6n1/1R3K2/8 w - - bm Re5; id \\\"E_E_T 093 - T&T vs T&L&S\\\";\\n\" +\n            \"1r6/1r6/1P1KP3/6k1/1R4p1/7p/7R/8 w - - bm Kc6 Rb5; id \\\"E_E_T 094 - T&T vs T&T\\\";\\n\" +\n            \"1k1K4/1p6/P4P2/2R5/4p2R/r2p4/8/3r4 w - - bm Rf4; id \\\"E_E_T 095 - T&T vs T&T\\\";\\n\" +\n            \"5k2/R1p5/p1R3Pb/2K5/2B5/2q2b2/8/8 w - - bm g7+; id \\\"E_E_T 096 - T&T&L vs D&L&L\\\";\\n\" +\n            \"8/8/k7/n7/p1R5/p7/4r1p1/KB3R2 w - - bm Rc3; id \\\"E_E_T 097 - T&T&L vs T&S&B\\\";\\n\" +\n            \"3r2k1/p1R2ppp/1p6/P1b1PP2/3p4/3R2B1/5PKP/1r6 w - - bm f6; id \\\"E_E_T 098 - T&T&L vs T&T&L\\\";\\n\" +\n            \"8/5p2/5rp1/p2k1r1p/P1pNp2P/RP1bP1P1/5P1R/4K3 b - - bm c3; id \\\"E_E_T 099 - T&T&S vs T&T&L\\\";\\n\" +\n            \"1r4k1/6pp/3Np1b1/p1R1P3/6P1/P2pr2P/1P1R2K1/8 b - - bm Rf8; id \\\"E_E_T 100 - T&T&S vs T&T&L\\\";\\n\" +\n            \"4k1r1/pp2p2p/3pN1n1/2pP4/2P3P1/PP5P/8/5RK1 b - -  am Nf8; id \\\"E_E_T 16b -  T&S vs T&S\\\";\\n\" +\n            \"8/3k3p/1p2p3/p4p2/Pb1Pp3/2B3PP/1P3P2/5K2 w - -  am Bxb4; id \\\"E_E_T 26b -  L vs L\\\";\\n\" +\n            \"8/1k6/8/Q7/7p/6p1/6pr/6Kb w - - bm Qc5; id \\\"E_E_T 70b - D vs T&L&B\\\";\" +\n            \"\";\n\n    private static final String[] splitUpWACs = wacTests.split(\"\\\\\\n\");\n    static int totalWACS = splitUpWACs.length;\n\n}\n    \n    \n\n    /*\n8/8/p2p3p/3k2p1/PP6/3K1P1P/8/8 b - - bm Kc6; id \"E_E_T 001 - B vs B\";\n8/p5pp/3k1p2/3p4/1P3P2/P1K5/5P1P/8 b - - bm g5; id \"E_E_T 002 - B vs B\";\n8/1p3p2/p7/8/2k5/4P1pP/2P1K1P1/8 w - - bm h4; id \"E_E_T 003 - B vs B\";\n8/pp5p/3k2p1/8/4Kp2/2P1P2P/P7/8 w - - bm exf4; id \"E_E_T 004 - B vs B\";\n8/7p/1p3pp1/p2K4/Pk3PPP/8/1P6/8 b - - bm Kb3 f5; id \"E_E_T 005 - B vs B\";\n2k5/3b4/PP3K2/7p/4P3/1P6/8/8 w - - bm Ke7; id \"E_E_T 006 - B vs L\";\n8/3Pb1p1/8/3P2P1/5P2/7k/4K3/8 w - - bm Kd3; id \"E_E_T 007 - B vs L\";\n8/1Pk2Kpp/8/8/4nPP1/7P/8/8 b - - bm Nf2; id \"E_E_T 008 - B vs S\";\n2n5/4k1p1/P6p/3PK3/7P/8/6P1/8 b - - bm g6; id \"E_E_T 009 - B vs S\";\n4k3/8/3PP1p1/8/3K3p/8/3n2PP/8 b - - am Nf1; id \"E_E_T 010 - B vs S\";\n6k1/5p2/P3p1p1/2Qp4/5q2/2K5/8/8 b - - am Qc1+ Qe5+; id \"E_E_T 011 - D vs D\";\n8/6pk/8/2p2P1p/6qP/5QP1/8/6K1 w - - bm Qd3 Qf2; id \"E_E_T 012 - D vs D\";\n5q1k/5P1p/Q7/5n1p/6P1/7K/8/8 w - - bm Qa1+; id \"E_E_T 013 - D vs D&S\";\n4qr2/4p2k/1p2P1pP/5P2/1P3P2/6Q1/8/3B1K2 w - - bm Ba4; id \"E_E_T 014 - D&L vs D&T\";\n8/kn4b1/P2B4/8/1Q6/6pP/1q4pP/5BK1 w - - bm Bc5+; id \"E_E_T 015 - D&L&L vs D&L&S\";\n6k1/1p2p1bp/p5p1/4pb2/1q6/4Q3/1P2BPPP/2R3K1 w - - bm Qa3; id \"E_E_T 017 - D&T&L vs D&L&L\";\n1rr2k2/p1q5/3p2Q1/3Pp2p/8/1P3P2/1KPRN3/8 w - e6 bm Rd1; id \"E_E_T 018 - D&T&S vs D&T&T\";\nr5k1/3R2p1/p1r1q2p/P4p2/5P2/2p1P3/5P1P/1R1Q2K1 w - - am Rbb7; id \"E_E_T 019 - D&T&T vs D&T&T\";\n8/1p4k1/pK5p/2B5/P4pp1/8/7P/8 b - - am g3; id \"E_E_T 020 - L vs B\";\n8/6p1/6P1/6Pp/B1p1p2K/6PP/3k2P1/8 w - - bm Bd1; id \"E_E_T 021 - L vs B\";\n8/4k3/8/2Kp3p/B3bp1P/P7/1P6/8 b - - bm Bg2; id \"E_E_T 022 - L vs L\";\n8/8/2p1K1p1/2k5/p7/P4BpP/1Pb3P1/8 w - - am Kd7; id \"E_E_T 023 - L vs L\";\n8/3p3B/5p2/5P2/p7/PP5b/k7/6K1 w - - bm b4; id \"E_E_T 024 - L vs L\";\n8/p4p2/1p2k2p/6p1/P4b1P/1P6/3B1PP1/6K1 w - - am Bxf4; id \"E_E_T 025 - L vs L\";\n3b3k/1p4p1/p5p1/4B3/8/7P/1P3PP1/5K2 b - - am Bf6; id \"E_E_T 027 - L vs L\";\n4b1k1/1p3p2/4pPp1/p2pP1P1/P2P4/1P1B4/8/2K5 w - - bm b4; id \"E_E_T 028 - L vs L\";\n8/3k1p2/n3pP2/1p2P2p/5K2/1PB5/7P/8 b - - am Kc6 b4; id \"E_E_T 029 - L vs S\";\n8/8/4p1p1/1P1kP3/4n1PK/2B4P/8/8 b - - bm Kc5; id \"E_E_T 030 - L vs S\";\n8/5k2/4p3/B2p2P1/3K2n1/1P6/8/8 b - - bm Kg6; id \"E_E_T 031 - L vs S\";\n5b2/p4B2/5B2/1bN5/8/P3r3/4k1K1/8 w - - bm Bh5+; id \"E_E_T 032 - L&L&S vs T&L&L\";\n8/p5pq/8/p2N3p/k2P3P/8/KP3PB1/8 w - - bm Be4; id \"E_E_T 033 - L&S vs D\";\n1b6/1P6/8/2KB4/6pk/3N3p/8/8 b - - bm Kg3; id \"E_E_T 034 - L&S vs L&B\";\n8/p7/7k/1P1K3P/8/1n6/4Bp2/5Nb1 b - - bm Na5; id \"E_E_T 035 - L&S vs L&S\";\n8/8/8/3K4/2N5/p2B4/p7/k4r2 w - - bm Kc5; id \"E_E_T 036 - L&S vs T&B\";\n8/8/2kp4/5Bp1/8/5K2/3N4/2rN4 w - - bm Nb3; id \"E_E_T 037 - L&S&S vs T&B\";\nk2K4/1p4pN/P7/1p3P2/pP6/8/8/8 w - - bm f6 Kc7; id \"E_E_T 038 - S vs B\";\nk2N4/1qpK1p2/1p6/1P4p1/1P4P1/8/8/8 w - - bm Nc6; id \"E_E_T 039 - S vs D\";\n6k1/4b3/4p1p1/8/6pP/4PN2/5K2/8 w - - bm Ne5 Nh2; id \"E_E_T 040 - S vs L\";\n8/8/6Np/2p3kP/1pPbP3/1P3K2/8/8 w - - bm e5; id \"E_E_T 041 - S vs L\";\n8/3P4/1p3b1p/p7/P7/1P3NPP/4p1K1/3k4 w - - bm g4; id \"E_E_T 042 - S vs L\";\n8/8/1p2p3/p3p2b/P1PpP2P/kP6/2K5/7N w - - bm Nf2; id \"E_E_T 043 - S vs L\";\n4N3/8/3P3p/1k2P3/7p/1n1K4/8/8 w - - bm d7; id \"E_E_T 044 - S vs S\";\nN5n1/2p1kp2/2P3p1/p4PP1/K4P2/8/8/8 w - - bm f6 Kb5; id \"E_E_T 045 - S vs S\";\n8/8/2pn4/p4p1p/P4N2/1Pk2KPP/8/8 w - - bm Ne2 Ne6; id \"E_E_T 046 - S vs S\";\n8/7k/2P5/2p4p/P3N2K/8/8/5r2 w - - bm Ng5+; id \"E_E_T 047 - S vs T\";\n2k1r3/p7/K7/1P6/P2N4/8/P7/8 w - - bm Nc6; id \"E_E_T 048 - S vs T\";\n1k6/8/8/1K6/5pp1/8/4Pp1p/R7 w - - bm Kb6; id \"E_E_T 049 - T vs B\";\n6k1/8/8/1K4p1/3p2P1/2pp4/8/1R6 w - - bm Kc6; id \"E_E_T 050 - T vs B\";\n8/5p2/3pp2p/p5p1/4Pk2/2p2P1P/P1Kb2P1/1R6 w - - bm a4 Rb5; id \"E_E_T 051 - T vs L\";\n8/8/4pR2/3pP2p/6P1/2p4k/P1Kb4/8 b - - bm hxg4; id \"E_E_T 052 - T vs L\";\n3k3K/p5P1/P3r3/8/1N6/8/8/8 w - - bm Kh7; id \"E_E_T 053 - T vs S\";\n8/8/5p2/5k2/p4r2/PpKR4/1P5P/8 w - - am Rd4; id \"E_E_T 054 - T vs T\";\n5k2/7R/8/4Kp2/5Pp1/P5rp/1P6/8 w - - bm Kf6; id \"E_E_T 055 - T vs T\";\n2K5/p7/7P/5pR1/8/5k2/r7/8 w - - bm Rxf5+; id \"E_E_T 056 - T vs T\";\n8/2R4p/4k3/1p2P3/pP3PK1/r7/8/8 b - - bm h5 Ra1; id \"E_E_T 057 - T vs T\";\n2k1r3/5R2/3KP3/8/1pP3p1/1P5p/8/8 w - - bm Rc7+; id \"E_E_T 058 - T vs T\";\n8/6p1/1p5p/1R2k3/4p3/1P2P3/1K4PP/3r4 b - - am Rd5; id \"E_E_T 059 - T vs T\";\n5K2/kp3P2/2p5/2Pp4/3P4/r7/p7/6R1 w - - bm Ke7; id \"E_E_T 060 - T vs T\";\n8/pp3K2/2P4k/5p2/8/6P1/R7/6r1 w - - bm Kf6; id \"E_E_T 061 - T vs T\";\n2r3k1/6pp/3pp1P1/1pP5/1P6/P4R2/5K2/8 w - - bm c6; id \"E_E_T 062 - T vs T\";\nr2k4/8/8/1P4p1/8/p5P1/6P1/1R3K2 w - - bm b6; id \"E_E_T 063 - T vs T\";\n8/4k3/1p4p1/p7/P1r1P3/1R4Pp/5P1P/4K3 w - - bm Ke2; id \"E_E_T 064 - T vs T\";\nR7/4kp2/P3p1p1/3pP1P1/3P1P2/p6r/3K4/8 w - - bm Kc2; id \"E_E_T 065 - T vs T\";\n8/1pp1r3/p1p2k2/6p1/P5P1/1P3P2/2P1RK2/8 b - - am Rxe2+ Re5; id \"E_E_T 066 - T vs T\";\n8/1p2R3/8/p5P1/3k4/P2p2K1/1P6/5r2 w - - bm Kg2; id \"E_E_T 067 - T vs T\";\nR7/P5Kp/2P5/k3r2P/8/5p2/p4P2/8 w - - bm Rb8; id \"E_E_T 068 - T vs T\";\n8/2p4K/4k1p1/p1p1P3/PpP2P2/5R1P/8/6r1 b - - bm Kf7; id \"E_E_T 069 - T vs T\";\n8/B7/1R6/q3k2p/8/6p1/5P2/5K2 w - - bm Rb3; id \"E_E_T 071 - T&L vs D\";\n5k2/8/2Pb1B2/8/6RK/7p/5p1P/8 w - - bm Be5; id \"E_E_T 072 - T&L vs L&B\";\n3kB3/R4P2/8/8/1p6/pp6/5r2/1K6 w - - bm f8=Q f8=R; id \"E_E_T 073 - T&L vs T&B\";\n5k2/1p6/1P1p4/1K1p2p1/PB1P2P1/3pR2p/1P2p1pr/8 w - - bm Ba5; id \"E_E_T 074 - T&L vs T&B\";\n6k1/p6p/1p1p2p1/2bP4/P1P5/2B3P1/4r2P/1R5K w - - bm a5; id \"E_E_T 075 - T&L vs T&L\";\n3R3B/8/1r4b1/8/4pP2/7k/8/7K w - - bm Bd4; id \"E_E_T 076 - T&L vs T&L\";\nrk1b4/p2p2p1/1P6/2R2P2/8/2K5/8/5B2 w - - bm Rc8+; id \"E_E_T 077 - T&L vs T&L\";\n3r1k2/8/7R/8/8/pp1B4/P7/n1K5 w - - bm Rf6+; id \"E_E_T 078 - T&L vs T&S\";\nr5k1/5ppp/1p6/2b1R3/1p3P2/2nP2P1/1B3PKP/5B2 w - - bm d4; id \"E_E_T 079 - T&L&L vs T&L&S\";\n5k2/3p1b2/4pN2/3PPpp1/6R1/6PK/1B1q1P2/8 w - - bm Ba3+; id \"E_E_T 080 - T&L&S vs D&L\";\n8/1p5p/6p1/1p4Pp/1PpR4/2P1K1kB/6Np/7b w - - bm Rd1; id \"E_E_T 081 - T&L&S vs L&B\";\n7k/1p1Nr2P/3Rb3/8/3K4/6b1/8/5B2 w - - bm Ne5; id \"E_E_T 082 - T&L&S vs T&L&L\";\n8/1B4k1/5pn1/6N1/1P3rb1/P1K4p/3R4/8 w - - bm Nxh3; id \"E_E_T 083 - T&L&S vs T&L&S\";\n8/7p/6p1/3Np1bk/4Pp2/1R3PPK/5r1P/8 w - - bm Nc7; id \"E_E_T 084 - T&S vs T&L\";\n1r6/3b1p2/2k4P/1N3p1P/5P2/8/3R4/2K5 w - - bm Na7+; id \"E_E_T 085 - T&S vs T&L\";\nk6r/8/1R6/8/1pK2p2/8/7N/3b4 w - - bm Nf1; id \"E_E_T 086 - T&S vs T&L\";\n8/8/8/p1p5/2P1k3/1Pn5/1N1R2K1/1r6 w - - bm Kg3; id \"E_E_T 087 - T&S vs T&S\";\n5n1k/1r3P1p/p2p3P/P7/8/1N6/5R2/4K3 b - - bm Re7+; id \"E_E_T 088 - T&S vs T&S\";\n6R1/P2k1N2/r7/7P/r7/p7/7K/8 w - - bm Nh6; id \"E_E_T 089 - T&S vs T&T\";\n8/1rk1P3/7p/P7/1N2r3/5RKb/8/8 w - - bm Na6+; id \"E_E_T 090 - T&S&B vs T&T&L\";\n2K5/k3q3/6pR/6p1/6Pp/7P/8/3R4 w - - bm Rh7; id \"E_E_T 090 - T&T vs D\";\nR5bk/5r2/P7/1P1pR3/3P4/7p/5p1K/8 w - - bm Rh5+; id \"E_E_T 092 - T&T vs T&L\";\n4k3/7r/3nb3/2R5/8/6n1/1R3K2/8 w - - bm Re5; id \"E_E_T 093 - T&T vs T&L&S\";\n1r6/1r6/1P1KP3/6k1/1R4p1/7p/7R/8 w - - bm Kc6 Rb5; id \"E_E_T 094 - T&T vs T&T\";\n1k1K4/1p6/P4P2/2R5/4p2R/r2p4/8/3r4 w - - bm Rf4; id \"E_E_T 095 - T&T vs T&T\";\n5k2/R1p5/p1R3Pb/2K5/2B5/2q2b2/8/8 w - - bm g7+; id \"E_E_T 096 - T&T&L vs D&L&L\";\n8/8/k7/n7/p1R5/p7/4r1p1/KB3R2 w - - bm Rc3; id \"E_E_T 097 - T&T&L vs T&S&B\";\n3r2k1/p1R2ppp/1p6/P1b1PP2/3p4/3R2B1/5PKP/1r6 w - - bm f6; id \"E_E_T 098 - T&T&L vs T&T&L\";\n8/5p2/5rp1/p2k1r1p/P1pNp2P/RP1bP1P1/5P1R/4K3 b - - bm c3; id \"E_E_T 099 - T&T&S vs T&T&L\";\n1r4k1/6pp/3Np1b1/p1R1P3/6P1/P2pr2P/1P1R2K1/8 b - - bm Rf8; id \"E_E_T 100 - T&T&S vs T&T&L\";\n4k1r1/pp2p2p/3pN1n1/2pP4/2P3P1/PP5P/8/5RK1 b - -  am Nf8; id \"E_E_T 16b -  T&S vs T&S\";\n8/3k3p/1p2p3/p4p2/Pb1Pp3/2B3PP/1P3P2/5K2 w - -  am Bxb4; id \"E_E_T 26b -  L vs L\";\n8/1k6/8/Q7/7p/6p1/6pr/6Kb w - - bm Qc5; id \"E_E_T 70b - D vs T&L&B\";\n     */\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/tests/enginetests/EET.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/tests/enginetests/EET.java	(date 1543670486000)
@@ -1,9 +1,9 @@
 package tests.enginetests;
 
-import javacode.chessengine.search.Engine;
-import javacode.chessprogram.chess.Move;
-import javacode.chessprogram.graphicsandui.Art;
-import javacode.chessprogram.miscAdmin.ExtendedPositionDescriptionParser;
+import com.github.louism33.axolotl.search.Engine;
+import old.chessprogram.chess.Move;
+import old.chessprogram.graphicsandui.Art;
+import old.chessprogram.miscAdmin.ExtendedPositionDescriptionParser;
 import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
Index: src/main/java/javacode/chessengine/evaluation/Queen.java
===================================================================
--- src/main/java/javacode/chessengine/evaluation/Queen.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/com/github/louism33/axolotl/evaluation/Queen.java	(date 1543682775000)
@@ -1,29 +1,28 @@
-package javacode.chessengine.evaluation;
+package com.github.louism33.axolotl.evaluation;
 
-import javacode.chessprogram.chess.BitManipulations;
-import javacode.chessprogram.chess.Chessboard;
+import com.github.louism33.chesscore.BitOperations;
+import com.github.louism33.chesscore.Chessboard;
+import com.github.louism33.chesscore.PieceMove;
 
 import java.util.List;
 
-import static javacode.chessengine.evaluation.EvaluationConstants.*;
-import static javacode.chessprogram.bitboards.BitBoards.RANK_SEVEN;
-import static javacode.chessprogram.bitboards.BitBoards.RANK_TWO;
-import static javacode.chessprogram.chess.BitIndexing.getIndexOfAllPieces;
-import static javacode.chessprogram.chess.BitIndexing.populationCount;
-import static javacode.chessprogram.moveGeneration.PieceMoveSliding.singleQueenCaptures;
-import static javacode.chessprogram.moveGeneration.PieceMoveSliding.singleQueenPushes;
+import static com.github.louism33.axolotl.evaluation.EvaluationConstants.*;
+import static com.github.louism33.chesscore.BitOperations.getIndexOfAllPieces;
+import static com.github.louism33.chesscore.BitOperations.populationCount;
+import static com.github.louism33.chesscore.BitboardResources.RANK_SEVEN;
+import static com.github.louism33.chesscore.BitboardResources.RANK_TWO;
 
 class Queen {
 
     static int evalQueenByTurn(Chessboard board, boolean white) {
-        long myQueens = white ? board.WHITE_QUEEN : board.BLACK_QUEEN;
+        long myQueens = white ? board.getWhiteQueen() : board.getBlackQueen();
 
         if (myQueens == 0) {
             return 0;
         }
 
-        long myPawns = white ? board.WHITE_PAWNS : board.BLACK_PAWNS;
-        long enemyPawns = white ? board.BLACK_PAWNS : board.WHITE_PAWNS;
+        long myPawns = white ? board.getWhitePawns() : board.getBlackPawns();
+        long enemyPawns = white ? board.getBlackPawns() : board.getWhitePawns();
 
         int score = 0;
 
@@ -38,13 +37,13 @@
 
     private static int queensHelpRooksAndQueens(Chessboard board, boolean white, long myQueens){
         List<Integer> indexOfAllPieces = getIndexOfAllPieces(myQueens);
-        long myRooks = white ? board.WHITE_ROOKS : board.BLACK_ROOKS;
-        long emptySquares = ~board.ALL_PIECES();
+        long myRooks = white ? board.getWhiteRooks() : board.getBlackRooks();
+        long emptySquares = ~board.allPieces();
 
         int score = 0;
         for (Integer queenIndex : indexOfAllPieces) {
-            long queen = BitManipulations.newPieceOnSquare(queenIndex);
-            long pseudoAvailableSquares = singleQueenPushes(board, queen, white, myRooks | myQueens);
+            long queen = BitOperations.newPieceOnSquare(queenIndex);
+            long pseudoAvailableSquares = PieceMove.singleQueenTable(board.allPieces(), white, queen, myRooks | myQueens);
             score += populationCount(pseudoAvailableSquares) * QUEEN_PROTECTS_ROOK;
         }
         return score;
@@ -52,12 +51,12 @@
 
     private static int queenMobility(Chessboard board, boolean white, long myQueens){
         List<Integer> indexOfAllPieces = getIndexOfAllPieces(myQueens);
-        long emptySquares = ~board.ALL_PIECES();
+        long emptySquares = ~board.allPieces();
 
         int mobilitySquares = 0;
         for (Integer queenIndex : indexOfAllPieces) {
-            long queen = BitManipulations.newPieceOnSquare(queenIndex);
-            long pseudoAvailableSquares = singleQueenPushes(board, queen, white, emptySquares);
+            long queen = BitOperations.newPieceOnSquare(queenIndex);
+            long pseudoAvailableSquares = PieceMove.singleQueenTable(board.allPieces(), white, queen, emptySquares);
             mobilitySquares += populationCount(pseudoAvailableSquares);
         }
         return mobilitySquares * QUEEN_MOBILITY_SCORE;
@@ -65,15 +64,15 @@
 
     private static int queenProtectorAndAggressor(Chessboard board, boolean white, long myQueens){
         List<Integer> indexOfAllPieces = getIndexOfAllPieces(myQueens);
-        long emptySquares = ~board.ALL_PIECES();
-        long myPieces = white ? board.ALL_WHITE_PIECES() : board.ALL_BLACK_PIECES();
-        long enemyPieces = white ? board.ALL_BLACK_PIECES() : board.ALL_WHITE_PIECES();
+        long emptySquares = ~board.allPieces();
+        long myPieces = white ? board.whitePieces() : board.blackPieces();
+        long enemyPieces = white ? board.blackPieces() : board.whitePieces();
 
         int protectedFriends = 0;
         int threatenedEnemies = 0;
         for (Integer queenIndex : indexOfAllPieces) {
-            long queen = BitManipulations.newPieceOnSquare(queenIndex);
-            long pseudoAttackedOrProtectedByQueen = singleQueenCaptures(board, queen, white, board.ALL_PIECES());
+            long queen = BitOperations.newPieceOnSquare(queenIndex);
+            long pseudoAttackedOrProtectedByQueen = PieceMove.singleQueenTable(board.allPieces(), white, queen, board.allPieces());
 
             protectedFriends += populationCount(pseudoAttackedOrProtectedByQueen & myPieces);
             threatenedEnemies += populationCount(pseudoAttackedOrProtectedByQueen & enemyPieces);
Index: src/main/java/tests/enginetests/KaufmanTests.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package tests.enginetests;\n\nimport javacode.chessengine.search.Engine;\nimport javacode.chessprogram.chess.Move;\nimport javacode.chessprogram.graphicsandui.Art;\nimport javacode.chessprogram.miscAdmin.ExtendedPositionDescriptionParser;\nimport org.junit.Assert;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.Parameterized;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\n\n@RunWith(Parameterized.class)\npublic class KaufmanTests {\n\n    private static final int timeLimit = 10000;\n    private static final Engine engine = null;\n\n    @Parameterized.Parameters(name = \"{index} Test: {1}\")\n    public static Collection<Object[]> data() {\n        List<Object[]> answers = new ArrayList<>();\n\n        int counter = 0;\n        int until = 10;\n\n        for (String splitUpWAC : splitUpWACs) {\n            Object[] objectAndName = new Object[2];\n            ExtendedPositionDescriptionParser.EPDObject EPDObject = ExtendedPositionDescriptionParser.parseEDPPosition(splitUpWAC);\n            objectAndName[0] = EPDObject;\n            objectAndName[1] = EPDObject.getId();\n            answers.add(objectAndName);\n            counter++;\n\n            if (counter >= until) {\n//                break;\n            }\n        }\n        return answers;\n    }\n\n\n    private static ExtendedPositionDescriptionParser.EPDObject EPDObject;\n\n    public KaufmanTests(Object edp, Object name) {\n        EPDObject = (ExtendedPositionDescriptionParser.EPDObject) edp;\n    }\n\n    @Test\n    public void test() {\n        WACTests.reset();\n        System.out.println(Art.boardArt(EPDObject.getBoard()));\n\n        Move move = engine.searchFixedTime(EPDObject.getBoard(), timeLimit);\n        System.out.println(move);\n\n        List<Integer> winningMoveDestination = EPDObject.getBestMoveDestinationIndex();\n        int myMoveDestination = move.destinationIndex;\n\n        Assert.assertTrue(winningMoveDestination.contains(myMoveDestination));\n\n        List<Integer> losingMoveDestination = EPDObject.getAvoidMoveDestinationIndex();\n\n        Assert.assertFalse(losingMoveDestination.contains(myMoveDestination));\n    }\n\n\n    private static final String wacTests = \"\" +\n            \"1rbq1rk1/p1b1nppp/1p2p3/8/1B1pN3/P2B4/1P3PPP/2RQ1R1K w - - bm Nf6+; id \\\"position 01\\\";\\n\" +\n            \"3r2k1/p2r1p1p/1p2p1p1/q4n2/3P4/PQ5P/1P1RNPP1/3R2K1 b - - bm Nxd4 id \\\"position 02\\\";\\n\" +\n            \"3r2k1/1p3ppp/2pq4/p1n5/P6P/1P6/1PB2QP1/1K2R3 w - - am Rd1; id \\\"position 03\\\";\\n\" +\n            \"r1b1r1k1/1ppn1p1p/3pnqp1/8/p1P1P3/5P2/PbNQNBPP/1R2RB1K w - - bm Rxb2; id \\\"position 04\\\";\\n\" +\n            \"2r4k/pB4bp/1p4p1/6q1/1P1n4/2N5/P4PPP/2R1Q1K1 b - - bm Qxc1; id \\\"position 05\\\";\\n\" +\n            \"r5k1/3n1ppp/1p6/3p1p2/3P1B2/r3P2P/PR3PP1/2R3K1 b - - am Rxa2; id \\\"position 06\\\";\\n\" +\n            \"2r2rk1/1bqnbpp1/1p1ppn1p/pP6/N1P1P3/P2B1N1P/1B2QPP1/R2R2K1 b - - bm Bxe4 id \\\"position 07\\\";\\n\" +\n            \"5r1k/6pp/1n2Q3/4p3/8/7P/PP4PK/R1B1q3 b - - bm h6; id \\\"position 08\\\";\\n\" +\n            \"r3k2r/pbn2ppp/8/1P1pP3/P1qP4/5B2/3Q1PPP/R3K2R w KQkq - bm Be2; id \\\"position 09\\\";\\n\" +\n            \"3r2k1/ppq2pp1/4p2p/3n3P/3N2P1/2P5/PP2QP2/K2R4 b - - bm Nxc3; id \\\"position 10\\\";\\n\" +\n            \"q3rn1k/2QR4/pp2pp2/8/P1P5/1P4N1/6n1/6K1 w - - bm Nf5; id \\\"position 11\\\";\\n\" +\n            \"6k1/p3q2p/1nr3pB/8/3Q1P2/6P1/PP5P/3R2K1 b - - bm Rd6; id \\\"position 12\\\";\\n\" +\n            \"1r4k1/7p/5np1/3p3n/8/2NB4/7P/3N1RK1 w - - bm Nxd5; id \\\"position 13\\\";\\n\" +\n            \"1r2r1k1/p4p1p/6pB/q7/8/3Q2P1/PbP2PKP/1R3R2 w - - bm Rxb2; id \\\"position 14\\\";\\n\" +\n            \"r2q1r1k/pb3p1p/2n1p2Q/5p2/8/3B2N1/PP3PPP/R3R1K1 w - - bm Bxf5; id \\\"position 15\\\";\\n\" +\n            \"8/4p3/p2p4/2pP4/2P1P3/1P4k1/1P1K4/8 w - - bm b4; id \\\"position 16\\\";\\n\" +\n            \"1r1q1rk1/p1p2pbp/2pp1np1/6B1/4P3/2NQ4/PPP2PPP/3R1RK1 w - - bm e5; id \\\"position 17\\\";\\n\" +\n            \"q4rk1/1n1Qbppp/2p5/1p2p3/1P2P3/2P4P/6P1/2B1NRK1 b - - bm Qc8; id \\\"position 18\\\";\\n\" +\n            \"r2q1r1k/1b1nN2p/pp3pp1/8/Q7/PP5P/1BP2RPN/7K w - - bm Qxd7; id \\\"position 19\\\";\\n\" +\n            \"8/5p2/pk2p3/4P2p/2b1pP1P/P3P2B/8/7K w - - bm Bg4; id \\\"position 20\\\";\\n\" +\n            \"8/2k5/4p3/1nb2p2/2K5/8/6B1/8 w - - bm Kxb5; id \\\"position 21\\\";\\n\" +\n            \"1B1b4/7K/1p6/1k6/8/8/8/8 w - - bm Ba7; id \\\"position 22\\\";\\n\" +\n            \"rn1q1rk1/1b2bppp/1pn1p3/p2pP3/3P4/P2BBN1P/1P1N1PP1/R2Q1RK1 b - - bm Ba6; id \\\"position 23\\\";\\n\" +\n            \"8/p1ppk1p1/2n2p2/8/4B3/2P1KPP1/1P5P/8 w - - bm Bxc6; id \\\"position 24\\\";\\n\" +\n            \"8/3nk3/3pp3/1B6/8/3PPP2/4K3/8 w - - bm Bxd7; id \\\"position 25\\\";\" +\n            \"\";\n\n    private static final String[] splitUpWACs = wacTests.split(\"\\\\\\n\");\n    static int totalWACS = splitUpWACs.length;\n    \n}\n    \n    /*\n    1rbq1rk1/p1b1nppp/1p2p3/8/1B1pN3/P2B4/1P3PPP/2RQ1R1K w - - bm Nf6+; id \"position 01\";\n3r2k1/p2r1p1p/1p2p1p1/q4n2/3P4/PQ5P/1P1RNPP1/3R2K1 b - - bm Nxd4 id \"position 02\";\n3r2k1/1p3ppp/2pq4/p1n5/P6P/1P6/1PB2QP1/1K2R3 w - - am Rd1; id \"position 03\";\nr1b1r1k1/1ppn1p1p/3pnqp1/8/p1P1P3/5P2/PbNQNBPP/1R2RB1K w - - bm Rxb2; id \"position 04\";\n2r4k/pB4bp/1p4p1/6q1/1P1n4/2N5/P4PPP/2R1Q1K1 b - - bm Qxc1; id \"position 05\";\nr5k1/3n1ppp/1p6/3p1p2/3P1B2/r3P2P/PR3PP1/2R3K1 b - - am Rxa2; id \"position 06\";\n2r2rk1/1bqnbpp1/1p1ppn1p/pP6/N1P1P3/P2B1N1P/1B2QPP1/R2R2K1 b - - bm Bxe4 id \"position 07\";\n5r1k/6pp/1n2Q3/4p3/8/7P/PP4PK/R1B1q3 b - - bm h6; id \"position 08\";\nr3k2r/pbn2ppp/8/1P1pP3/P1qP4/5B2/3Q1PPP/R3K2R w KQkq - bm Be2; id \"position 09\";\n3r2k1/ppq2pp1/4p2p/3n3P/3N2P1/2P5/PP2QP2/K2R4 b - - bm Nxc3; id \"position 10\";\nq3rn1k/2QR4/pp2pp2/8/P1P5/1P4N1/6n1/6K1 w - - bm Nf5; id \"position 11\";\n6k1/p3q2p/1nr3pB/8/3Q1P2/6P1/PP5P/3R2K1 b - - bm Rd6; id \"position 12\";\n1r4k1/7p/5np1/3p3n/8/2NB4/7P/3N1RK1 w - - bm Nxd5; id \"position 13\";\n1r2r1k1/p4p1p/6pB/q7/8/3Q2P1/PbP2PKP/1R3R2 w - - bm Rxb2; id \"position 14\";\nr2q1r1k/pb3p1p/2n1p2Q/5p2/8/3B2N1/PP3PPP/R3R1K1 w - - bm Bxf5; id \"position 15\";\n8/4p3/p2p4/2pP4/2P1P3/1P4k1/1P1K4/8 w - - bm b4; id \"position 16\";\n1r1q1rk1/p1p2pbp/2pp1np1/6B1/4P3/2NQ4/PPP2PPP/3R1RK1 w - - bm e5; id \"position 17\";\nq4rk1/1n1Qbppp/2p5/1p2p3/1P2P3/2P4P/6P1/2B1NRK1 b - - bm Qc8; id \"position 18\";\nr2q1r1k/1b1nN2p/pp3pp1/8/Q7/PP5P/1BP2RPN/7K w - - bm Qxd7; id \"position 19\";\n8/5p2/pk2p3/4P2p/2b1pP1P/P3P2B/8/7K w - - bm Bg4; id \"position 20\";\n8/2k5/4p3/1nb2p2/2K5/8/6B1/8 w - - bm Kxb5; id \"position 21\";\n1B1b4/7K/1p6/1k6/8/8/8/8 w - - bm Ba7; id \"position 22\";\nrn1q1rk1/1b2bppp/1pn1p3/p2pP3/3P4/P2BBN1P/1P1N1PP1/R2Q1RK1 b - - bm Ba6; id \"position 23\";\n8/p1ppk1p1/2n2p2/8/4B3/2P1KPP1/1P5P/8 w - - bm Bxc6; id \"position 24\";\n8/3nk3/3pp3/1B6/8/3PPP2/4K3/8 w - - bm Bxd7; id \"position 25\";\n     */\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/tests/enginetests/KaufmanTests.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/tests/enginetests/KaufmanTests.java	(date 1543670486000)
@@ -1,9 +1,9 @@
 package tests.enginetests;
 
-import javacode.chessengine.search.Engine;
-import javacode.chessprogram.chess.Move;
-import javacode.chessprogram.graphicsandui.Art;
-import javacode.chessprogram.miscAdmin.ExtendedPositionDescriptionParser;
+import com.github.louism33.axolotl.search.Engine;
+import old.chessprogram.chess.Move;
+import old.chessprogram.graphicsandui.Art;
+import old.chessprogram.miscAdmin.ExtendedPositionDescriptionParser;
 import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
Index: src/main/java/javacode/chessengine/evaluation/Rook.java
===================================================================
--- src/main/java/javacode/chessengine/evaluation/Rook.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/com/github/louism33/axolotl/evaluation/Rook.java	(date 1543682426000)
@@ -1,30 +1,28 @@
-package javacode.chessengine.evaluation;
+package com.github.louism33.axolotl.evaluation;
 
-import javacode.chessprogram.bitboards.BitBoards;
-import javacode.chessprogram.chess.BitIndexing;
-import javacode.chessprogram.chess.BitManipulations;
-import javacode.chessprogram.chess.Chessboard;
-import javacode.chessprogram.moveGeneration.PieceMoveSliding;
+import com.github.louism33.chesscore.BitOperations;
+import com.github.louism33.chesscore.BitboardResources;
+import com.github.louism33.chesscore.Chessboard;
+import com.github.louism33.chesscore.PieceMove;
 
 import java.util.List;
 
-import static javacode.chessengine.evaluation.EvaluationConstants.*;
-import static javacode.chessprogram.bitboards.BitBoards.*;
-import static javacode.chessprogram.chess.BitIndexing.getIndexOfAllPieces;
-import static javacode.chessprogram.chess.BitIndexing.populationCount;
-import static javacode.chessprogram.moveGeneration.PieceMoveSliding.singleRookCaptures;
+import static com.github.louism33.axolotl.evaluation.EvaluationConstants.*;
+import static com.github.louism33.chesscore.BitOperations.*;
+import static com.github.louism33.chesscore.BitboardResources.RANK_SEVEN;
+import static com.github.louism33.chesscore.BitboardResources.RANK_TWO;
 
 class Rook {
 
     static int evalRookByTurn(Chessboard board, boolean white) {
-        long myRooks = white ? board.WHITE_ROOKS : board.BLACK_ROOKS;
+        long myRooks = white ? board.getWhiteRooks() : board.getBlackRooks();
 
         if (myRooks == 0) {
             return 0;
         }
 
-        long myPawns = white ? board.WHITE_PAWNS : board.BLACK_PAWNS;
-        long enemyPawns = white ? board.BLACK_PAWNS : board.WHITE_PAWNS;
+        long myPawns = white ? board.getWhitePawns() : board.getBlackPawns();
+        long enemyPawns = white ? board.getBlackPawns() : board.getWhitePawns();
 
         int score = 0;
 
@@ -42,13 +40,13 @@
 
     private static int rookHelpsQueensAndRooks(Chessboard board, boolean white, long myRooks){
         List<Integer> indexOfAllPieces = getIndexOfAllPieces(myRooks);
-        long myQueens = white ? board.WHITE_QUEEN : board.BLACK_QUEEN;
-        long emptySquares = ~board.ALL_PIECES();
+        long myQueens = white ? board.getWhiteQueen() : board.getBlackQueen();
+        long emptySquares = ~board.allPieces();
 
         int score = 0;
         for (Integer rookIndex : indexOfAllPieces) {
-            long queen = BitManipulations.newPieceOnSquare(rookIndex);
-            long pseudoAvailableSquares = singleRookCaptures(board, queen, white, myRooks | myQueens);
+            long queen = newPieceOnSquare(rookIndex);
+            long pseudoAvailableSquares = PieceMove.singleRookTable(board.allPieces(), white, queen, myRooks | myQueens);
             score += populationCount(pseudoAvailableSquares) * ROOK_PROTECTS_QUEEN;
         }
         return score;
@@ -56,11 +54,13 @@
 
     private static int rookOnOpenFile(Chessboard board, boolean white, long myRooks, long myPawns, long enemyPawns){
         int fileScore = 0;
-        for (long file : BitBoards.FILES){
-            if ((file & myPawns) != 0){
+        long[] files = BitboardResources.FILES;
+        for (int i = 0; i < files.length; i++) {
+            long file = files[i];
+            if ((file & myPawns) != 0) {
                 continue;
             }
-            if ((file & enemyPawns) != 0){
+            if ((file & enemyPawns) != 0) {
                 fileScore += ROOK_ON_SEMI_OPEN_FILE_BONUS;
                 continue;
             }
@@ -70,37 +70,37 @@
     }
 
     private static int unDevelopedRooks(Chessboard board, boolean white, long myRooks){
-        long originalRooks = white ? WHITE_ROOKS : BLACK_ROOKS;
+        long originalRooks = white ? board.getWhiteRooks() : board.getBlackRooks();
         return populationCount(originalRooks & myRooks)
                 * ROOK_NOT_DEVELOPED;
     }
 
 
     private static int rookMobility(Chessboard board, boolean white, long myRooks){
-        List<Integer> indexOfAllPieces = BitIndexing.getIndexOfAllPieces(myRooks);
-        long emptySquares = ~board.ALL_PIECES();
-        long enemies = white ? board.ALL_BLACK_PIECES() : board.ALL_WHITE_PIECES();
+        List<Integer> indexOfAllPieces = getIndexOfAllPieces(myRooks);
+        long emptySquares = ~board.allPieces();
+        long enemies = white ? board.blackPieces() : board.whitePieces();
 
         int mobilitySquares = 0;
         for (Integer rookIndex : indexOfAllPieces) {
-            long rook = BitManipulations.newPieceOnSquare(rookIndex);
-            long pseudoAvailableSquares = PieceMoveSliding.singleRookPushes(board, rook, white, emptySquares);
-            mobilitySquares += BitIndexing.populationCount(pseudoAvailableSquares);
+            long rook = newPieceOnSquare(rookIndex);
+            long pseudoAvailableSquares = PieceMove.singleRookTable(board.allPieces(), white, rook, emptySquares);
+            mobilitySquares += populationCount(pseudoAvailableSquares);
         }
         return mobilitySquares * ROOK_MOBILITY_SCORE;
     }
 
     private static int rookProtectorAndAggressor(Chessboard board, boolean white, long myRooks){
         List<Integer> indexOfAllPieces = getIndexOfAllPieces(myRooks);
-        long emptySquares = ~board.ALL_PIECES();
-        long myPieces = white ? board.ALL_WHITE_PIECES() : board.ALL_BLACK_PIECES();
-        long enemyPieces = white ? board.ALL_BLACK_PIECES() : board.ALL_WHITE_PIECES();
+        long emptySquares = ~board.allPieces();
+        long myPieces = white ? board.whitePieces() : board.blackPieces();
+        long enemyPieces = white ? board.blackPieces() : board.whitePieces();
 
         int protectedFriends = 0;
         int threatenedEnemies = 0;
         for (Integer rookIndex : indexOfAllPieces) {
-            long rook = BitManipulations.newPieceOnSquare(rookIndex);
-            long pseudoAttackedOrProtectedByRook = singleRookCaptures(board, rook, white, board.ALL_PIECES());
+            long rook = newPieceOnSquare(rookIndex);
+            long pseudoAttackedOrProtectedByRook = PieceMove.singleRookTable(board.allPieces(), white, rook, board.allPieces());
 
             protectedFriends += populationCount(pseudoAttackedOrProtectedByRook & myPieces);
             threatenedEnemies += populationCount(pseudoAttackedOrProtectedByRook & enemyPieces);
@@ -111,7 +111,7 @@
 
     private static int rookOnSeventhRank(Chessboard board, boolean white, long myRooks){
         long seventhRank = white ? RANK_SEVEN : RANK_TWO;
-        int numberOfRooksOnSeventh = BitIndexing.populationCount(myRooks & seventhRank);
+        int numberOfRooksOnSeventh = BitOperations.populationCount(myRooks & seventhRank);
 
         return numberOfRooksOnSeventh > 1 ? (1 + numberOfRooksOnSeventh) * ROOK_ON_SEVENTH_BONUS
                 : numberOfRooksOnSeventh * ROOK_ON_SEVENTH_BONUS;
Index: src/main/java/javacode/chessengine/evaluation/Evaluator.java
===================================================================
--- src/main/java/javacode/chessengine/evaluation/Evaluator.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/com/github/louism33/axolotl/evaluation/Evaluator.java	(date 1543831665000)
@@ -1,57 +1,46 @@
-package javacode.chessengine.evaluation;
+package com.github.louism33.axolotl.evaluation;
 
-import javacode.chessengine.search.Engine;
-import javacode.chessprogram.chess.BitIndexing;
-import javacode.chessprogram.chess.Chessboard;
-import javacode.chessprogram.chess.Move;
+import com.github.louism33.axolotl.search.Engine;
+import com.github.louism33.axolotl.utilities.Statistics;
+import com.github.louism33.chesscore.BitOperations;
+import com.github.louism33.chesscore.Chessboard;
 
-import java.util.List;
-
-import static javacode.chessengine.evaluation.Bishop.evalBishopByTurn;
-import static javacode.chessengine.evaluation.EvaluationConstants.IN_CHECKMATE_SCORE;
-import static javacode.chessengine.evaluation.EvaluationConstants.IN_STALEMATE_SCORE;
-import static javacode.chessengine.evaluation.King.evalKingByTurn;
-import static javacode.chessengine.evaluation.Knight.evalKnightByTurn;
-import static javacode.chessengine.evaluation.Misc.evalMiscByTurn;
-import static javacode.chessengine.evaluation.Pawns.evalPawnsByTurn;
-import static javacode.chessengine.evaluation.PositionEval.evalPositionByTurn;
-import static javacode.chessengine.evaluation.Queen.evalQueenByTurn;
-import static javacode.chessengine.evaluation.Rook.evalRookByTurn;
-import static javacode.chessprogram.check.CheckChecker.boardInCheck;
-import static javacode.chessprogram.moveGeneration.MoveGeneratorMaster.generateLegalMoves;
+import static com.github.louism33.axolotl.evaluation.Bishop.evalBishopByTurn;
+import static com.github.louism33.axolotl.evaluation.EvaluationConstants.IN_CHECKMATE_SCORE;
+import static com.github.louism33.axolotl.evaluation.EvaluationConstants.IN_STALEMATE_SCORE;
+import static com.github.louism33.axolotl.evaluation.King.evalKingByTurn;
+import static com.github.louism33.axolotl.evaluation.Knight.evalKnightByTurn;
+import static com.github.louism33.axolotl.evaluation.MaterialEval.*;
+import static com.github.louism33.axolotl.evaluation.Misc.evalMiscByTurn;
+import static com.github.louism33.axolotl.evaluation.Pawns.evalPawnsByTurn;
+import static com.github.louism33.axolotl.evaluation.PositionEval.evalPositionByTurn;
+import static com.github.louism33.axolotl.evaluation.Queen.evalQueenByTurn;
+import static com.github.louism33.axolotl.evaluation.Rook.evalRookByTurn;
 
 public class Evaluator {
 
-    private final Engine engine;
-    private final MaterialEval materialEval;
-
-    public Evaluator(Engine engine){
-        this.engine = engine;
-        this.materialEval = new MaterialEval(this);
-    }
-
-    public int lazyEval(Chessboard board, boolean white) {
+    public static int lazyEval(Chessboard board, boolean white) {
         return lazyEvalHelper(board, white);
     }
 
-    public int evalWithoutCM(Chessboard board, boolean white, List<Move> moves) {
+    public static int evalWithoutCM(Chessboard board, boolean white, int[] moves) {
         return evalHelper(board, white, moves);
     }
 
-    public int eval(Chessboard board, boolean white, List<Move> moves) {
+    public static int eval(Chessboard board, boolean white, int[] moves) {
         if (moves == null){
-            moves = generateLegalMoves(board, white);
+            moves = board.generateLegalMoves();
         }
 
-        this.engine.statistics.numberOfEvals++;
+//        statistics.numberOfEvals++;
 
-        if (moves.size() == 0){
-            if (boardInCheck(board, white)) {
-                this.engine.statistics.numberOfCheckmates++;
+        if (moves.length == 0){
+            if (board.inCheck(white)) {
+//                statistics.numberOfCheckmates++;
                 return IN_CHECKMATE_SCORE;
             }
             else {
-                this.engine.statistics.numberOfStalemates++;
+//                statistics.numberOfStalemates++;
                 return IN_STALEMATE_SCORE;
             }
         }
@@ -60,18 +49,18 @@
         }
     }
 
-    private boolean naiveEndgame (Chessboard board){
-        return BitIndexing.populationCount(board.ALL_PIECES()) < 8;
+    private static boolean naiveEndgame (Chessboard board){
+        return BitOperations.populationCount(board.allPieces()) < 8;
     }
 
-    private int evalHelper(Chessboard board, boolean white, List<Move> moves) {
+    private static int evalHelper(Chessboard board, boolean white, int[] moves) {
         return evalTurn(board, white, moves) - evalTurn(board, !white, moves);
     }
 
-    private int evalTurn (Chessboard board, boolean white, List<Move> moves){
+    private static int evalTurn (Chessboard board, boolean white, int[] moves){
         int score = 0;
         score +=
-                this.materialEval.evalMaterialByTurn(board, white)
+                evalMaterialByTurn(board, white)
 
                         + evalPositionByTurn(board, white, naiveEndgame(board))
                         + evalPawnsByTurn(board, white)
@@ -85,12 +74,12 @@
         return score;
     }
 
-    private int lazyEvalHelper(Chessboard board, boolean white) {
-        return this.materialEval.evalMaterialByTurn(board, white) - this.materialEval.evalMaterialByTurn(board, !white);
+    private static int lazyEvalHelper(Chessboard board, boolean white) {
+        return evalMaterialByTurn(board, white) - evalMaterialByTurn(board, !white);
     }
 
-    public int getScoreOfDestinationPiece(Chessboard board, Move move){
-        return this.materialEval.getScoreOfDestinationPiece(board, move);
+    public static int getScoreOfDestinationPiece(Chessboard board, int move){
+        return MaterialEval.getScoreOfDestinationPiece(board, move);
     }
 
 
Index: src/main/java/javacode/chessengine/evaluation/Pawns.java
===================================================================
--- src/main/java/javacode/chessengine/evaluation/Pawns.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/com/github/louism33/axolotl/evaluation/Pawns.java	(date 1543682775000)
@@ -1,23 +1,23 @@
-package javacode.chessengine.evaluation;
+package com.github.louism33.axolotl.evaluation;
 
-import javacode.chessprogram.chess.BitIndexing;
-import javacode.chessprogram.chess.Chessboard;
+
+import com.github.louism33.chesscore.BitOperations;
+import com.github.louism33.chesscore.Chessboard;
+import com.github.louism33.chesscore.PieceMove;
+import com.github.louism33.chesscore.Square;
 
 import java.util.List;
 
-import static javacode.chessengine.evaluation.EvaluationConstants.*;
-import static javacode.chessprogram.bitboards.BitBoards.*;
-import static javacode.chessprogram.check.CheckChecker.numberOfPiecesThatLegalThreatenSquare;
-import static javacode.chessprogram.chess.BitIndexing.getIndexOfAllPieces;
-import static javacode.chessprogram.chess.BitIndexing.populationCount;
-import static javacode.chessprogram.chess.BitManipulations.newPieceOnSquare;
-import static javacode.chessprogram.moveGeneration.PieceMovePawns.masterPawnCapturesTable;
+import static com.github.louism33.axolotl.evaluation.EvaluationConstants.*;
+import static com.github.louism33.chesscore.BitOperations.*;
+import static com.github.louism33.chesscore.BitboardResources.*;
+import static com.github.louism33.chesscore.Square.squareThreatenend;
 
 class Pawns {
 
     static int evalPawnsByTurn(Chessboard board, boolean white) {
-        long myPawns = white ? board.WHITE_PAWNS : board.BLACK_PAWNS;
-        long enemyPawns = white ? board.BLACK_PAWNS : board.WHITE_PAWNS;
+        long myPawns = white ? board.getWhitePawns() : board.getBlackPawns();
+        long enemyPawns = white ? board.getBlackPawns() : board.getWhitePawns();
 
         if (myPawns == 0) {
             return 0;
@@ -119,47 +119,43 @@
                     long capturePromotingSquareL = pawn << 9;
                     long capturePromotingSquareR = pawn << 7;
 
-                    if ((pushPromotingSquare & board.ALL_PIECES()) == 0){
+                    if ((pushPromotingSquare & board.allPieces()) == 0){
                         score += PAWN_SEVEN_PROMOTION_POSSIBLE;
                     }
 
                     if ((pawn & FILE_A) != 0){
-                        if ((capturePromotingSquareR & board.ALL_PIECES()) == 0){
+                        if ((capturePromotingSquareR & board.allPieces()) == 0){
                             score += PAWN_SEVEN_PROMOTION_POSSIBLE;
                         }
                     }
                     else if ((pawn & FILE_H) != 0){
-                        if ((capturePromotingSquareL & board.ALL_PIECES()) == 0){
+                        if ((capturePromotingSquareL & board.allPieces()) == 0){
                             score += PAWN_SEVEN_PROMOTION_POSSIBLE;
                         }
                     }
                     else {
-                        if ((capturePromotingSquareR & board.ALL_PIECES()) == 0){
+                        if ((capturePromotingSquareR & board.allPieces()) == 0){
                             score += PAWN_SEVEN_PROMOTION_POSSIBLE;
                         }
 
-                        if ((capturePromotingSquareL & board.ALL_PIECES()) == 0){
+                        if ((capturePromotingSquareL & board.allPieces()) == 0){
                             score += PAWN_SEVEN_PROMOTION_POSSIBLE;
                         }
                     }
 
-                    int enemyThreatsToPromotionSquare = numberOfPiecesThatLegalThreatenSquare(board, true, pushPromotingSquare);
-                    if (enemyThreatsToPromotionSquare == 0){
+                    if (squareThreatenend(board, true, pushPromotingSquare)){
                         score += PAWN_P_SQUARE_UNTHREATENED;
                     }
 
-                    int friendlyThreatsToPromotionSquare = numberOfPiecesThatLegalThreatenSquare(board, false, pushPromotingSquare);
-                    if (friendlyThreatsToPromotionSquare != 0){
+                    if (squareThreatenend(board, false, pushPromotingSquare)){
                         score += PAWN_P_SQUARE_SUPPORTED;
                     }
 
-                    int threatsToPromotingPawn = numberOfPiecesThatLegalThreatenSquare(board, true, pawn);
-                    if (threatsToPromotingPawn == 0){
+                    if (squareThreatenend(board, true, pawn)){
                         score += PAWN_P_UNTHREATENED;
                     }
 
-                    int friendsToPromotingPawn = numberOfPiecesThatLegalThreatenSquare(board, false, pawn);
-                    if (friendsToPromotingPawn != 0){
+                    if (squareThreatenend(board, false, pawn)){
                         score += PAWN_P_PROTECTED;
                     }
                 }
@@ -179,47 +175,43 @@
                     long capturePromotingSquareL = pawn >>> 9;
                     long capturePromotingSquareR = pawn >>> 7;
 
-                    if ((pushPromotingSquare & board.ALL_PIECES()) == 0){
+                    if ((pushPromotingSquare & board.allPieces()) == 0){
                         score += PAWN_SEVEN_PROMOTION_POSSIBLE;
                     }
 
                     if ((pawn & FILE_A) != 0){
-                        if ((capturePromotingSquareL & board.ALL_PIECES()) == 0){
+                        if ((capturePromotingSquareL & board.allPieces()) == 0){
                             score += PAWN_SEVEN_PROMOTION_POSSIBLE;
                         }
                     }
                     else if ((pawn & FILE_H) != 0){
-                        if ((capturePromotingSquareR & board.ALL_PIECES()) == 0){
+                        if ((capturePromotingSquareR & board.allPieces()) == 0){
                             score += PAWN_SEVEN_PROMOTION_POSSIBLE;
                         }
                     }
                     else {
-                        if ((capturePromotingSquareR & board.ALL_PIECES()) == 0){
+                        if ((capturePromotingSquareR & board.allPieces()) == 0){
                             score += PAWN_SEVEN_PROMOTION_POSSIBLE;
                         }
 
-                        if ((capturePromotingSquareL & board.ALL_PIECES()) == 0){
+                        if ((capturePromotingSquareL & board.allPieces()) == 0){
                             score += PAWN_SEVEN_PROMOTION_POSSIBLE;
                         }
                     }
 
-                    int enemyThreatsToPromotionSquare = numberOfPiecesThatLegalThreatenSquare(board, false, pushPromotingSquare);
-                    if (enemyThreatsToPromotionSquare == 0){
+                    if (squareThreatenend(board, false, pushPromotingSquare)){
                         score += PAWN_P_SQUARE_UNTHREATENED;
                     }
 
-                    int friendlyThreatsToPromotionSquare = numberOfPiecesThatLegalThreatenSquare(board, true, pushPromotingSquare);
-                    if (friendlyThreatsToPromotionSquare != 0){
+                    if (squareThreatenend(board, true, pushPromotingSquare)){
                         score += PAWN_P_SQUARE_SUPPORTED;
                     }
 
-                    int threatsToPromotingPawn = numberOfPiecesThatLegalThreatenSquare(board, false, pawn);
-                    if (threatsToPromotingPawn == 0){
+                    if (Square.squareThreatenend(board, false, pawn)){
                         score += PAWN_P_UNTHREATENED;
                     }
 
-                    int friendsToPromotingPawn = numberOfPiecesThatLegalThreatenSquare(board, true, pawn);
-                    if (friendsToPromotingPawn != 0){
+                    if (Square.squareThreatenend(board, true, pawn)){
                         score += PAWN_P_PROTECTED;
                     }
                 }
@@ -233,25 +225,21 @@
         /*
         we are only considering the pawn
          */
-        List<Integer> indexOfAllPieces = BitIndexing.getIndexOfAllPieces(myPawns);
+        List<Integer> indexOfAllPieces = BitOperations.getIndexOfAllPieces(myPawns);
         if (white) {
             int lastPawnIndex = indexOfAllPieces.get(0);
             long lastPawn = newPieceOnSquare(lastPawnIndex);
             long advancedPosition = lastPawn << 8;
 
-            int threatsToBackwardsPawn = numberOfPiecesThatLegalThreatenSquare(board, true, lastPawn);
-            if (threatsToBackwardsPawn != 0){
+            if (squareThreatenend(board, true, lastPawn)){
                 score += PAWN_HANGING_UNDER_THREAT;
             }
 
-            int friendsToBackwardsPawn = numberOfPiecesThatLegalThreatenSquare(board, false, lastPawn);
-            if (friendsToBackwardsPawn != 0){
+            if (squareThreatenend(board, false, lastPawn)){
                 score += PAWN_HANGING_PROTECTED;
             }
 
-
-            int threatsToMoveOutOfBack = numberOfPiecesThatLegalThreatenSquare(board, true, advancedPosition);
-            if (threatsToMoveOutOfBack != 0){
+            if (squareThreatenend(board, true, advancedPosition)){
                 score += PAWN_HANGING;
             }
         }
@@ -260,18 +248,15 @@
             long lastPawn = newPieceOnSquare(lastPawnIndex);
             long advancedPosition = lastPawn >>> 8;
 
-            int threatsToBackwardsPawn = numberOfPiecesThatLegalThreatenSquare(board, false, lastPawn);
-            if (threatsToBackwardsPawn != 0){
+            if (squareThreatenend(board, false, lastPawn)){
                 score += PAWN_HANGING_UNDER_THREAT;
             }
 
-            int friendsToBackwardsPawn = numberOfPiecesThatLegalThreatenSquare(board, true, lastPawn);
-            if (friendsToBackwardsPawn != 0){
+            if (squareThreatenend(board, true, lastPawn)){
                 score += PAWN_HANGING_PROTECTED;
             }
 
-            int threatsToMoveOutOfBack = numberOfPiecesThatLegalThreatenSquare(board, false, advancedPosition);
-            if (threatsToMoveOutOfBack != 0){
+            if (squareThreatenend(board, false, advancedPosition)){
                 score += PAWN_HANGING;
             }
         }
@@ -280,10 +265,10 @@
 
     private static int pawnAttackingCentreBonus(Chessboard board, boolean white, long myPawns){
         int score = 0;
-        long threatenedSuperCentre = masterPawnCapturesTable(board, white, 0, centreFourSquares);
+        long threatenedSuperCentre = PieceMove.masterPawnCapturesTable(board, white, 0, centreFourSquares, myPawns);
         score += populationCount(threatenedSuperCentre) * PAWN_THREATEN_SUPER_CENTRE;
 
-        long threatenedCentre = masterPawnCapturesTable(board, white, 0, centreNineSquares ^ centreFourSquares);
+        long threatenedCentre = PieceMove.masterPawnCapturesTable(board, white, 0, centreNineSquares ^ centreFourSquares, myPawns);
         score += populationCount(threatenedCentre) * PAWN_THREATEN_CENTRE;
 
         return score;
@@ -359,14 +344,14 @@
     }
 
     private static int pawnsThreatenBigThings(Chessboard board, boolean white, long myPawns){
-        long enemyBigPieces = white ? board.ALL_BLACK_PIECES() ^ board.BLACK_PAWNS
-                : board.ALL_WHITE_PIECES() ^ board.WHITE_PAWNS;
-        long protectedPawns = masterPawnCapturesTable(board, white, 0, enemyBigPieces);
+        long enemyBigPieces = white ? board.blackPieces() ^ board.getBlackPawns()
+                : board.whitePieces() ^ board.getWhitePawns();
+        long protectedPawns = PieceMove.masterPawnCapturesTable(board, white, 0, enemyBigPieces, myPawns);
         return populationCount(protectedPawns) * PAWN_THREATENS_BIG_THINGS;
     }
 
     private static int pawnsChainBonus(Chessboard board, boolean white, long myPawns){
-        long protectedPawns = masterPawnCapturesTable(board, white, 0, myPawns);
+        long protectedPawns = PieceMove.masterPawnCapturesTable(board, white, 0, myPawns, myPawns);
         return populationCount(protectedPawns) * PAWN_PROTECTED_BY_PAWNS;
     }
 
Index: src/main/java/tests/enginetests/Arasan20.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package tests.enginetests;\n\nimport javacode.chessengine.search.Engine;\nimport javacode.chessprogram.chess.Move;\nimport javacode.chessprogram.graphicsandui.Art;\nimport javacode.chessprogram.miscAdmin.ExtendedPositionDescriptionParser;\nimport org.junit.Assert;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.Parameterized;\nimport org.junit.runners.Parameterized.Parameters;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\n\n@RunWith(Parameterized.class)\npublic class Arasan20 {\n    /*\n    Arasan = 60 sec.\t118/200\n     */\n\n    private static final int timeLimit = 60000;\n\n    @Parameters(name = \"{index} Test: {1}\")\n    public static Collection<Object[]> data() {\n        List<Object[]> answers = new ArrayList<>();\n        for (String splitUpWAC : splitUpWACs) {\n            Object[] objectAndName = new Object[2];\n            ExtendedPositionDescriptionParser.EPDObject EPDObject = ExtendedPositionDescriptionParser.parseEDPPosition(splitUpWAC);\n            objectAndName[0] = EPDObject;\n            objectAndName[1] = EPDObject.getId();\n            answers.add(objectAndName);\n        }\n        return answers;\n    }\n\n\n    private static ExtendedPositionDescriptionParser.EPDObject EPDObject;\n\n    public Arasan20(Object edp, Object name) {\n        EPDObject = (ExtendedPositionDescriptionParser.EPDObject) edp;\n    }\n\n    @Test\n    public void test() {\n        WACTests.reset();\n        System.out.println(Art.boardArt(EPDObject.getBoard()));\n        Move move = new Engine().searchFixedTime(EPDObject.getBoard(), timeLimit);\n        System.out.println(move);\n\n        List<Integer> winningMoveDestination = EPDObject.getBestMoveDestinationIndex();\n        int myMoveDestination = move.destinationIndex;\n\n        Assert.assertTrue(winningMoveDestination.contains(myMoveDestination));\n\n        List<Integer> losingMoveDestination = EPDObject.getAvoidMoveDestinationIndex();\n\n        Assert.assertFalse(losingMoveDestination.contains(myMoveDestination));\n    }\n\n    private static final String wacTests = \"\" +\n            \"r1bq1r1k/p1pnbpp1/1p2p3/6p1/3PB3/5N2/PPPQ1PPP/2KR3R w - - bm g4; id \\\"arasan20.1\\\";\\n\" +\n            \"r1b2rk1/1p1nbppp/pq1p4/3B4/P2NP3/2N1p3/1PP3PP/R2Q1R1K w - - bm Rxf7; id \\\"arasan20.2\\\";\\n\" +\n            \"r1q1k2r/1p1nbpp1/2p2np1/p1Pp4/3Pp3/P1N1P1P1/1P1B1P1P/R2QRBK1 b kq - bm Bxc5; id \\\"arasan20.3\\\";\\n\" +\n            \"2rr3k/2qnbppp/p1n1p3/1p1pP3/3P1N2/1Q1BBP2/PP3P1P/1KR3R1 w - - bm Bxh7; id \\\"arasan20.4\\\";\\n\" +\n            \"3q1r1k/1b3ppp/p1n5/1p1pPB2/2rP4/P6N/1P2Q1PP/R4RK1 w - - bm Qh5; id \\\"arasan20.5\\\";\\n\" +\n            \"r1b1k2r/1p1pppb1/p5pp/3P4/q2p1B2/3P1Q2/PPP2PPP/R3R1K1 w kq - bm Rxe7+; id \\\"arasan20.6\\\";\\n\" +\n            \"R4bk1/2Bbp2p/2p2pp1/1rPp4/3P4/4P2P/4BPPK/1q1Q4 w - - bm Qa4; id \\\"arasan20.7\\\";\\n\" +\n            \"r1r3k1/p3bppp/2bp3Q/q2pP1P1/1p1BP3/8/PPP1B2P/2KR2R1 w - - bm e6; id \\\"arasan20.8\\\";\\n\" +\n            \"b2rk1r1/p3q3/2p5/3nPR2/3P2pp/1R1B2P1/P1Q2P2/6K1 w - - bm Bc4; id \\\"arasan20.9\\\"; id \\\"Black Queen, Stockfish 081016 64-Mikachomika (Matrix C3 x64), playchess.com 2016\\\";\\n\" +\n            \"r2q3r/1p1bbQ2/4p1Bk/3pP3/1n1P1P1p/pP6/Pn4PP/R1B1R1K1 w - - bm g4; id \\\"arasan20.10\\\";\\n\" +\n            \"1r2brk1/4n1p1/4p2p/p2pP1qP/2pP1NP1/P1Q1BK2/2P4R/6R1 b - - bm Bg6; id \\\"arasan20.11\\\";\\n\" +\n            \"1rb2k1r/2q2pp1/p2b3p/2n3B1/2QN4/3B4/PpP3PP/1K2R2R w - - bm Bd8; id \\\"arasan20.12\\\";\\n\" +\n            \"5rk1/1pp3p1/3ppr1p/pP2p2n/4P2q/P2PQ2P/2P1NPP1/R4RK1 b - - bm Rf3; id \\\"arasan20.13\\\";\\n\" +\n            \"r4rk1/1b1n1pb1/3p2p1/1p1Pq1Bp/2p1P3/2P2RNP/1PBQ2P1/5R1K w - - bm Nf5; id \\\"arasan20.14\\\";\\n\" +\n            \"2kr2r1/ppq1bp1p/4pn2/2p1n1pb/4P1P1/2P2N1P/PPBNQP2/R1B1R1K1 b - - bm Nfxg4; id \\\"arasan20.15\\\";\\n\" +\n            \"8/3r4/pr1Pk1p1/8/7P/6P1/3R3K/5R2 w - - bm Re2+; id \\\"arasan20.16\\\";\\n\" +\n            \"3r1rk1/q4pp1/n1bNp2p/p7/pn2P1N1/6P1/1P1Q1PBP/2RR2K1 w - - bm Nxh6+ e5; id \\\"arasan20.17\\\";\\n\" +\n            \"r1q2rk1/ppnbbpp1/n4P1p/4P3/3p4/2N1B1PP/PP4BK/R2Q1R2 w - - bm Bxh6; id \\\"arasan20.18\\\";\\n\" +\n            \"1R6/5p1k/4bPpp/3pN3/2pP1P1P/2r5/6PK/8 w - - bm h5; id \\\"arasan20.19\\\";\\n\" +\n            \"3q1rk1/pr1b1p1p/1bp2p2/2ppP3/8/2P1BN2/PPQ3PP/R4RK1 w - - bm Bh6; id \\\"arasan20.20\\\";\\n\" +\n            \"8/5pk1/p4npp/1pPN4/1P2p3/1P4PP/5P2/5K2 w - - bm Nxf6; id \\\"arasan20.21\\\";\\n\" +\n            \"8/6p1/P1b1pp2/2p1p3/1k4P1/3PP3/1PK5/5B2 w - - bm Bg2; id \\\"arasan20.22\\\";\\n\" +\n            \"r5n1/p1p1q2k/4b2p/3pB3/3PP1pP/8/PPPQ2P1/5RK1 w - - bm Qf4; id \\\"arasan20.23\\\";\\n\" +\n            \"2b2rk1/r3q1pp/1nn1p3/3pP1NP/p1pP2Q1/2P1N3/1P1KBP2/R5R1 w - - bm Nxh7; id \\\"arasan20.24\\\";\\n\" +\n            \"rnb3k1/p3qpr1/2p1p3/2NP3p/1pP3p1/3BQ3/P4PP1/4RRK1 w - - bm Qd4; id \\\"arasan20.25\\\";\\n\" +\n            \"r3r1k1/p3bppp/q1b2n2/5Q2/1p1B4/1BNR4/PPP3PP/2K2R2 w - - bm Rg3; id \\\"arasan20.26\\\";\\n\" +\n            \"2bq1rk1/rpb2p2/2p1p1p1/p1N3Np/P2P1P1P/1Q2R1P1/1P3P2/3R2K1 w - - bm f5; id \\\"arasan20.27\\\";\\n\" +\n            \"3q1r1k/2r2pp1/p6p/1pbppP1N/3pP1PP/3P1Q2/PPP4R/5RK1 w - - bm g5; id \\\"arasan20.28\\\";\\n\" +\n            \"1q6/6k1/5Np1/1r4Pp/2p4P/2Nrb3/PP6/KR5Q b - - bm Bd4; id \\\"arasan20.29\\\";\\n\" +\n            \"b2rk3/r4p2/p3p3/P3Q1Np/2Pp3P/8/6P1/6K1 w - - bm Qh8+; id \\\"arasan20.30\\\";\\n\" +\n            \"2kr1b1r/1pp1ppp1/p7/q2P3n/2BB1pb1/2NQ4/P1P1N3/1R3RK1 w - - bm Rxb7; id \\\"arasan20.31\\\";\\n\" +\n            \"r4rkq/1ppb4/3P2n1/1N1Pp3/P3Pbn1/3B1NP1/1P2QB2/R4RK1 b - - bm Rf7; id \\\"arasan20.32\\\";\\n\" +\n            \"br4k1/1qrnbppp/pp1ppn2/8/NPPBP3/PN3P2/5QPP/2RR1B1K w - - bm Nxb6; id \\\"arasan20.33\\\";\\n\" +\n            \"r2q1rk1/ppp2p2/3p1np1/4pNQ1/4P1pP/1PPP4/1P3P2/R3K1R1 w Q - bm Qh6; id \\\"arasan20.34\\\";\\n\" +\n            \"1qb2rk1/3p1pp1/1p6/1pbBp3/r5p1/3QB3/PPP2P1P/2KR2R1 w - - bm b3; id \\\"arasan20.35\\\";\\n\" +\n            \"r1b2q1k/2Qn1p1p/1p1Rpp2/p6B/4P2P/6N1/P4PP1/6K1 w - - bm e5; id \\\"arasan20.36\\\";\\n\" +\n            \"r2q1rk1/p2pn3/bpp2p1p/3Nb1pQ/7B/8/PPB2PPP/R3R1K1 w - - bm Bxg5; id \\\"arasan20.37\\\";\\n\" +\n            \"r4rk1/p4ppp/qp2p3/b5B1/n1R5/5N2/PP2QPPP/1R4K1 w - - bm Bf6; id \\\"arasan20.38\\\";\\n\" +\n            \"r2q1rk1/4bppp/3pb3/2n1pP2/1p2P1PP/1P3Q2/1BP1N1B1/2KR3R b - - bm Ra2; id \\\"arasan20.39\\\";\\n\" +\n            \"2r2rkb/1Q1b3p/p2p3q/2PPnp2/1P2p1p1/2N5/P3BPPB/4RRK1 b - - bm e3; id \\\"arasan20.40\\\";\\n\" +\n            \"2b1rk2/5p2/p1P5/2p2P2/2p5/7B/P7/2KR4 w - - bm f6; id \\\"arasan20.41\\\";\\n\" +\n            \"rn1qr1k1/1p2bppp/p3p3/3pP3/P2P1B2/2RB1Q1P/1P3PP1/R5K1 w - - bm Bxh7+; id \\\"arasan20.42\\\";\\n\" +\n            \"1k4rr/p1pq2b1/1p6/1P1pp1p1/6n1/2PP2QN/PN1BP1B1/5RK1 b - - bm e4; id \\\"arasan20.43\\\";\\n\" +\n            \"1n3rk1/3rbppp/p2p4/4pP2/Ppq1P3/1N2B3/1PP3PP/R2Q1R1K w - - bm f6; id \\\"arasan20.44\\\";\\n\" +\n            \"8/2p1k3/3p3p/2PP1pp1/1P1K1P2/6P1/8/8 w - - bm g4; id \\\"arasan20.45\\\";\\n\" +\n            \"r1b2rk1/pp2bppp/3p4/q7/3BN1n1/1B3Q2/PPP3PP/R4RK1 w - - bm Qxf7+; id \\\"arasan20.46\\\";\\n\" +\n            \"r1b1rk2/p1pq2p1/1p1b1p1p/n2P4/2P1NP2/P2B1R2/1BQ3PP/R6K w - - bm Nxf6; id \\\"arasan20.47\\\";\\n\" +\n            \"r2qr3/2p1b1pk/p5pp/1p2p3/nP2P1P1/1BP2RP1/P3QPK1/R1B5 w - - bm Bxh6; id \\\"arasan20.48\\\";\\n\" +\n            \"1rbq1rk1/p5bp/3p2p1/2pP4/1p1n1BP1/3P3P/PP2N1B1/1R1Q1RK1 b - - bm Bxg4; id \\\"arasan20.49\\\";\\n\" +\n//            \"k1b4r/1p3p2/pq2pNp1/5n1p/P3QP2/1P1R1BPP/2P5/1K6 b - - am Nxg3; id \\\"arasan20.50\\\";\\n\" +\n            \"7b/8/kq6/8/8/1N2R3/K2P4/8 w - - bm Nd4; id \\\"arasan20.51\\\";\\n\" +\n            \"q3nrk1/4bppp/3p4/r3nPP1/4P2P/NpQ1B3/1P4B1/1K1R3R b - - bm Nc7; id \\\"arasan20.52\\\";\\n\" +\n            \"2r5/8/6k1/P1p3p1/2R5/1P1q4/1K4Q1/8 w - - bm a6; id \\\"arasan20.53\\\";\\n\" +\n            \"8/3R1P2/1ppP1p2/3r4/8/K7/p4k2/8 w - - bm Kb2; id \\\"arasan20.54\\\";\\n\" +\n            \"2qrrbk1/1b3ppp/pn1Pp3/6P1/1Pp2B2/1nN2NQB/1P3P1P/3RR1K1 w - - bm g6; id \\\"arasan20.55\\\";\\n\" +\n            \"r1q1nrk1/3nb2p/3p2p1/p5P1/1pbNPB2/1N6/PPPQ4/2KR1B1R w - - bm Nf5; id \\\"arasan20.56\\\";\\n\" +\n            \"5rk1/pp3ppp/3q4/8/2Pp2b1/P5Pn/PBQPr1BP/4RR1K b - - bm Rxg2; id \\\"arasan20.57\\\";\\n\" +\n            \"3b3r/1q3pk1/4b2p/3pPppQ/R1pP1P1P/1rP1N1P1/6N1/2R3K1 w - - bm g4; id \\\"arasan20.58\\\";\\n\" +\n            \"r1b2rk1/pp1p2pR/8/1pb2p2/5N2/7Q/qPPB1PPP/6K1 w - - bm g3; id \\\"arasan20.59\\\";\\n\" +\n            \"7q/3k2p1/n1p1p1Pr/1pPpPpQ1/3P1N1p/1P2KP2/6P1/7R w - - bm Nxd5; id \\\"arasan20.60\\\";\\n\" +\n            \"5rk1/8/pqPp1r1p/1p1Pp1bR/4B3/5PP1/PP2Q1K1/R7 w - - bm Rxg5+; id \\\"arasan20.61\\\";\\n\" +\n            \"3r2k1/pb3Np1/4pq1p/2pp1n2/3P4/1PQ5/P4PPP/R2R2K1 b - - bm Nxd4; id \\\"arasan20.62\\\";\\n\" +\n            \"2kr1r2/ppq1b1p1/2n5/2PpPb1N/QP1B1pp1/2P5/P2N1P1P/R4RK1 b - - bm Rh8; id \\\"arasan20.63\\\";\\n\" +\n            \"r1r2k2/pp2bpp1/2bppn1p/6B1/2qNPPPP/2N5/PPPQ4/1K1RR3 w - - bm f5; id \\\"arasan20.64\\\";\\n\" +\n            \"3r2k1/6p1/B1R2p1p/1pPr1P2/3P4/8/1P3nP1/2KR4 w - - bm Rc8; id \\\"arasan20.65\\\";\\n\" +\n            \"3qb1k1/5rb1/r3p1Np/1n1pP2P/p1pB1PQ1/2P5/R1B4K/6R1 w - - bm Bc5; id \\\"arasan20.66\\\";\\n\" +\n            \"3q1k2/p4pb1/3Pp3/p3P3/r6p/2QB3P/3B1P2/6K1 w - - bm Bb5; id \\\"arasan20.67\\\";\\n\" +\n            \"r4r1k/ppqbn1pp/3b1p2/2pP3B/2P4N/7P/P2B1PP1/1R1QR1K1 w - - bm Rxe7; id \\\"arasan20.68\\\";\\n\" +\n            \"1r4k1/1q3pp1/r3b2p/p2N4/3R4/QP3P2/2P3PP/1K1R4 w - - bm Nf6+; id \\\"arasan20.69\\\";\\n\" +\n            \"r2q1r2/1bp1npk1/3p1p1p/p3p2Q/P3P2N/1BpPP3/1P1N2PP/5RK1 w - - bm Rf3; id \\\"arasan20.70\\\";\\n\" +\n            \"2r3k1/1bp3pp/pp1pNn1r/3P1p1q/1PP1pP2/P3P1P1/3Q3P/2RR1BK1 w - - bm c5; id \\\"arasan20.71\\\";\\n\" +\n            \"2r3r1/1p1qb2k/p5pp/2n1Bp2/2RP3P/1P2PNQ1/5P1K/3R4 w - - bm Ng5+; id \\\"arasan20.72\\\";\\n\" +\n            \"rn3rk1/pp1q3p/4p1B1/2p5/3N1b2/4B3/PPQ2PPP/3R2K1 w - - bm Nf5; id \\\"arasan20.73\\\";\\n\" +\n            \"rr5k/1q2pPbp/3p2p1/PbpP4/1nB1nP1Q/1NB5/1P4PP/R4R1K w - - bm f5; id \\\"arasan20.74\\\";\\n\" +\n            \"r4rk1/pp1qbppp/1n6/6R1/P1pP4/5Q1P/2B2PP1/2B2RK1 w - - bm Rxg7+; id \\\"arasan20.75\\\";\\n\" +\n            \"1r4k1/p7/2P1n1pp/5p2/2QPqP2/PN2p3/5P1P/4RK2 b - - bm Rc8; id \\\"arasan20.76\\\";\\n\" +\n            \"1qrrbbk1/1p1nnppp/p3p3/4P3/2P5/1PN1N3/PB2Q1PP/1B2RR1K w - - bm Bxh7+; id \\\"arasan20.77\\\";\\n\" +\n            \"r1b2rk1/qp5p/p1n1ppp1/7N/4P1P1/2N1pP2/PPP5/2KR1QR1 w - - bm e5; id \\\"arasan20.78\\\";\\n\" +\n            \"3r4/2q5/5pk1/p3n1p1/N3Pp1p/1PPr1P1P/2Q1R1P1/5R1K b - - bm g4; id \\\"arasan20.79\\\";\\n\" +\n            \"1q2r1k1/3R1pb1/3R2p1/7p/p3N3/2P1BP1P/1P3PK1/8 b - - bm Rxe4; id \\\"arasan20.80\\\";\\n\" +\n            \"r1b1k2r/2q2pp1/p1p1pn2/2b4p/Pp2P3/3B3P/1PP1QPP1/RNB2RK1 b kq - bm Ng4; id \\\"arasan20.81\\\";\\n\" +\n            \"2r1rb1k/ppq2pp1/4b2p/3pP2Q/5B2/2PB2R1/P4PPP/1R4K1 w - - bm Rxg7; id \\\"arasan20.82\\\";\\n\" +\n            \"6k1/p4qp1/1p3r1p/2pPp1p1/1PP1PnP1/2P1KR1P/1B6/7Q b - - bm h5; id \\\"arasan20.83\\\";\\n\" +\n            \"rnb1kb1r/pp1p1ppp/1q2p3/8/3NP1n1/2N1B3/PPP2PPP/R2QKB1R w KQkq - bm Qxg4; id \\\"arasan20.84\\\";\\n\" +\n            \"r3kb1r/1b1n2p1/p3Nn1p/3Pp3/1p4PP/3QBP2/qPP5/2KR1B1R w kq - bm Qg6+; id \\\"arasan20.85\\\";\\n\" +\n            \"1r1qrbk1/pb3p2/2p1pPpp/1p4B1/2pP2PQ/2P5/P4PBP/R3R1K1 w - - bm Bxh6; id \\\"arasan20.86\\\";\\n\" +\n            \"2r1r2k/1b1n1p1p/p3pPp1/1p1pP2q/3N4/P3Q1P1/1PP4P/2KRRB2 w - - bm g4; id \\\"arasan20.87\\\";\\n\" +\n            \"2r1b1k1/5p2/1R2nB2/1p2P2p/2p5/2Q1P2K/3R1PB1/r3q3 w - - bm Rxe6; id \\\"arasan20.88\\\";\\n\" +\n            \"rn2r1k1/ppq1pp1p/2b2bp1/8/2BNPP1B/2P4P/P1Q3P1/1R3RK1 w - - bm Bxf7+; id \\\"arasan20.89\\\";\\n\" +\n            \"1kr5/1p3p2/q3p3/pRbpPp2/P1rNnP2/2P1B1Pp/1P2Q2P/R5K1 b - - bm Bxd4; id \\\"arasan20.90\\\";\\n\" +\n            \"r3r2k/1pq2pp1/4b2p/3pP3/p1nB3P/P2B1RQ1/1PP3P1/3R3K w - - bm Rf6; id \\\"arasan20.91\\\";\\n\" +\n            \"r3brk1/2q1bp1p/pnn3p1/1p1pP1N1/3P4/3B2P1/PP1QNR1P/R1B3K1 w - - bm Nxh7; id \\\"arasan20.92\\\";\\n\" +\n            \"1r3r2/q5k1/4p1n1/1bPpPp1p/pPpR1Pp1/P1B1Q3/2B3PP/3R2K1 w - - bm Rxd5; id \\\"arasan20.93\\\";\\n\" +\n            \"rq3rk1/1b1n1ppp/ppn1p3/3pP3/5B2/2NBP2P/PP2QPP1/2RR2K1 w - - bm Nxd5; id \\\"arasan20.94\\\";\\n\" +\n            \"7r/k4pp1/pn2p1pr/2ppP3/1q3P2/1PN2R1P/P1P2QP1/3R3K w - - bm a3; id \\\"arasan20.95\\\";\\n\" +\n            \"1r3rk1/3bbppp/1qn2P2/p2pP1P1/3P4/2PB1N2/6K1/qNBQ1R2 w - - bm Bxh7+; id \\\"arasan20.96\\\";\\n\" +\n            \"1r1qrbk1/5ppp/2b1p2B/2npP3/1p4QP/pP1B1N2/P1P2PP1/1K1R3R w - - bm Bxh7+; id \\\"arasan20.97\\\";\\n\" +\n            \"r5k1/pbpq1pp1/3b2rp/N3n3/1N6/2P3B1/PP1Q1PPP/R4RK1 b - - bm Rxg3; id \\\"arasan20.98\\\";\\n\" +\n            \"1r2r1k1/2R2p2/1N1Rp2p/p2b3P/4pPP1/8/P4K2/8 w - - bm g5; id \\\"arasan20.99\\\";\\n\" +\n            \"r4r2/pp1b1ppk/2n1p3/3pPnB1/q1pP2QP/P1P4R/2PKNPP1/R7 w - - bm Qh5+; id \\\"arasan20.100\\\";\\n\" +\n            \"8/2k2Bp1/2n5/p1P4p/4pPn1/P3PqPb/1r1BQ2P/2R1K1R1 b - - bm Nce5; id \\\"arasan20.101\\\";\\n\" +\n            \"8/5kpp/8/8/8/5P2/1RPK2PP/6r1 w - - bm c4; id \\\"arasan20.102\\\";\\n\" +\n            \"r3rnk1/pp2ppb1/1np3p1/3qP2p/3P1B2/4Q1N1/PP2BPP1/1K1R3R w - - bm Bh6; id \\\"arasan20.103\\\";\\n\" +\n            \"1r1q2k1/2r3bp/B2p1np1/3P1p2/R1P1pP2/4B2P/P5PK/3Q1R2 b - - bm Ng4+; id \\\"arasan20.104\\\";\\n\" +\n            \"2r1rnk1/1p2pp1p/p1np2p1/q4PP1/3NP2Q/4B2R/PPP4P/3R3K w - - bm b4; id \\\"arasan20.105\\\";\\n\" +\n            \"2b2qk1/1r4pp/2p1p3/p2n1PPB/2p4P/2p5/P4Q2/4RRK1 w - - bm Qg3; id \\\"arasan20.106\\\";\\n\" +\n            \"1r1rkb2/2q2p2/p2p1P1B/P1pPp2Q/2P3b1/1P6/2B3PP/5R1K w - - bm Qxg4; id \\\"arasan20.107\\\";\\n\" +\n            \"r4rk1/3b3p/p1pb4/1p1n2p1/2P2p2/1B1P2Pq/PP1NRP1P/R1BQ2K1 w - - bm Qf1; id \\\"arasan20.108\\\";\\n\" +\n            \"1r3rk1/4bpp1/p3p2p/q1PpPn2/bn3Q1P/1PN1BN2/2P1BPP1/1KR2R2 b - - bm Bxb3; id \\\"arasan20.109\\\";\\n\" +\n            \"2nb2k1/1rqb1pp1/p2p1n1p/2pPp3/P1P1P3/2B1NN1P/2B2PP1/Q3R2K w - - bm Nxe5; id \\\"arasan20.110\\\";\\n\" +\n            \"3r2k1/p1qn1p1p/4p1p1/2p1N3/8/2P3P1/PP2QP1P/4R1K1 w - - bm Nxf7; id \\\"arasan20.111\\\";\\n\" +\n            \"r2q1rk1/pb1nbp1p/1pp1pp2/8/2BPN2P/5N2/PPP1QPP1/2KR3R w - - bm Nfg5; id \\\"arasan20.112\\\";\\n\" +\n            \"4rr2/3bp1bk/p2q1np1/2pPp2p/2P4P/1R4N1/1P1BB1P1/1Q3RK1 w - - bm Bxh5; id \\\"arasan20.113\\\";\\n\" +\n            \"8/8/4b1p1/2Bp3p/5P1P/1pK1Pk2/8/8 b - - bm g5 d4+; id \\\"arasan20.114\\\";\\n\" +\n            \"8/5p2/3p2p1/1bk4p/p2pBNnP/P5P1/1P3P2/4K3 b - - bm d3; id \\\"arasan20.115\\\";\\n\" +\n            \"8/4nk2/1p3p2/1r1p2pp/1P1R1N1P/6P1/3KPP2/8 w - - bm Nd3; id \\\"arasan20.116\\\";\\n\" +\n            \"6k1/1bq1bpp1/p6p/2p1pP2/1rP1P1P1/2NQ4/2P4P/K2RR3 b - - bm Bd5; id \\\"arasan20.117\\\";\\n\" +\n            \"r3r1k1/1bqnbp1p/pp1pp1p1/6P1/Pn2PP1Q/1NN1BR2/1PPR2BP/6K1 w - - bm Rh3; id \\\"arasan20.118\\\";\\n\" +\n            \"4rrk1/1pp1n1pp/1bp1P2q/p4p2/P4P2/3R2N1/1PP2P1P/2BQRK2 w - - bm Nh5; id \\\"arasan20.119\\\";\\n\" +\n            \"3q4/4k3/1p1b1p1r/p2Q4/3B1p1p/7P/1P4P1/3R3K w - - bm b4; id \\\"arasan20.120\\\";\\n\" +\n            \"8/5p1k/6p1/1p1Q3p/3P4/1R2P1KP/6P1/r4q2 b - - bm h4+; id \\\"arasan20.121\\\";\\n\" +\n            \"7k/3q1pp1/1p3r2/p1bP4/P1P2p2/1P2rNpP/2Q3P1/4RR1K b - - bm Rxf3; id \\\"arasan20.122\\\";\\n\" +\n            \"3r3r/k1p2pb1/B1b2q2/2RN3p/3P2p1/1Q2B1Pn/PP3PKP/5R2 w - - bm Rfc1; id \\\"arasan20.123\\\";\\n\" +\n            \"r1b3kr/pp1n2Bp/2pb2q1/3p3N/3P4/2P2Q2/P1P3PP/4RRK1 w - - bm Re5; id \\\"arasan20.124\\\";\\n\" +\n            \"2r3k1/1q3pp1/2n1b2p/4P3/3p1BP1/Q6P/1p3PB1/1R4K1 b - - bm Rb8; id \\\"arasan20.125\\\";\\n\" +\n            \"rn2kb1r/1b1n1p1p/p3p1p1/1p2q1B1/3N3Q/2N5/PPP3PP/2KR1B1R w kq - bm Nxe6; id \\\"arasan20.126\\\";\\n\" +\n            \"r7/ppp3kp/2bn4/4qp2/2B1pR2/2P1Q2P/P5P1/5RK1 w - - bm Rxf5; id \\\"arasan20.127\\\";\\n\" +\n            \"1r6/r6k/2np2p1/2pNp1qp/1pP1Pp1b/1P1P1P2/1B3P2/1Q1R1K1R b - - bm Bxf2; id \\\"arasan20.128\\\";\\n\" +\n            \"1nr3k1/q4rpp/1p1p1n2/3Pp3/1PQ1P1b1/4B1P1/2R2NBP/2R3K1 w - - bm Qxc8+; id \\\"arasan20.129\\\";\\n\" +\n            \"8/5rk1/p2p4/1p1P1b1p/1P1K2pP/2P3P1/4R3/5B2 w - - bm Rf2; id \\\"arasan20.130\\\";\\n\" +\n            \"5rk1/2p1R2p/r5q1/2pPR2p/5p2/1p5P/P4PbK/2BQ4 w - - bm d6; id \\\"arasan20.131\\\";\\n\" +\n            \"r2q1r2/1b2bpkp/p3p1p1/2ppP1P1/7R/1PN1BQR1/1PP2P1P/4K3 w - - bm Qf6+; id \\\"arasan20.132\\\";\\n\" +\n            \"r1r3k1/1ppn2bp/p1q1p1p1/3pP3/3PB1P1/PQ3NP1/3N4/2BK3R w - - bm Ng5; id \\\"arasan20.133\\\";\\n\" +\n            \"1rr1b1k1/1pq1bp2/p2p1np1/4p3/P2BP3/2NB2Q1/1PP3PP/4RR1K w - - bm Rxf6; id \\\"arasan20.134\\\";\\n\" +\n            \"r1r3k1/1q3p1p/4p1pP/1bnpP1P1/pp1Q1P2/1P6/P1PR1N2/1K3B1R b - - bm axb3; id \\\"arasan20.135\\\";\\n\" +\n            \"r1b2rk1/pppnq3/4ppp1/6N1/3P3Q/2PB4/P1PK2PP/3R3R w - - bm Nxe6; id \\\"arasan20.136\\\";\\n\" +\n            \"3r1r1k/pp5p/4b1pb/6q1/3P4/4p1BP/PP2Q1PK/3RRB2 b - - bm Qxg3+; id \\\"arasan20.137\\\";\\n\" +\n            \"r2r2k1/3bb1Pp/3pp1p1/p1q5/1p2PP2/P1N5/1PPQ4/1K1R1B1R w - - bm Nd5; id \\\"arasan20.138\\\";\\n\" +\n            \"8/2R5/3p4/3P4/3k3P/2p3K1/1r4P1/8 w - - bm Kf3; id \\\"arasan20.139\\\";\\n\" +\n            \"r1bq2k1/1pp2ppp/3prn2/p3n3/2P5/PQN1PP2/1P1PB2P/R1B2R1K b - - bm Nfg4; id \\\"arasan20.140\\\";\\n\" +\n//            \"2kr3r/pp4pp/4pp2/2pq4/P1Nn4/4Q3/KP2B1PP/2RR4 b - - am Qxg2; id \\\"arasan20.141\\\";\\n\" +\n            \"5r2/1p4k1/pP1pP1pp/2rP2q1/4Qp2/3Bb3/P5PP/4RR1K w - - bm Rf3; id \\\"arasan20.142\\\";\\n\" +\n            \"r2qr1k1/1b1pppbp/1p4p1/pP2P1B1/3N4/R7/1PP2PPP/3QR1K1 w - a6 bm Nf5; id \\\"arasan20.143\\\";\\n\" +\n            \"4k3/1R6/Pb3p2/1P1n4/5p2/8/4K3/8 w - - bm Kd3; id \\\"arasan20.144\\\";\\n\" +\n            \"r4nk1/2pq1ppp/3p4/p3pNPQ/4P3/2PP1RP1/Pr3PK1/7R w - - bm Ne3; id \\\"arasan20.145\\\";\\n\" +\n            \"r1q2rk1/1b2bppp/p1p1p3/4B3/PP6/3B3P/2P1QPP1/R2R2K1 w - - bm Bxh7+; id \\\"arasan20.146\\\";\\n\" +\n            \"r2qrb1k/1p1b2p1/p2ppn1p/8/3NP3/1BN5/PPP3QP/1K3RR1 w - - bm e5; id \\\"arasan20.147\\\";\\n\" +\n            \"r2q1k1r/pp2n1pp/2nb1p2/1B1p3Q/N2P4/2P1B3/PP4PP/R4RK1 w - - bm Rxf6+; id \\\"arasan20.148\\\";\\n\" +\n            \"4r1k1/6p1/bp2r2p/3QNp2/P2BnP2/4P2P/5qPK/3RR3 b - - bm Kh7; id \\\"arasan20.149\\\";\\n\" +\n            \"8/5rk1/p3Q1pp/1p1P1p1b/2p1Pq1P/P4P2/1PKN4/5R2 w - - bm d6; id \\\"arasan20.150\\\";\\n\" +\n            \"r1bqkb1r/4pppp/p1p5/2ppP3/8/2P2N2/PPP2PPP/R1BQR1K1 w kq - bm e6; id \\\"arasan20.151\\\";\\n\" +\n            \"3r1rk1/1b2bpp1/2n1p2p/qp1n2N1/4N3/P3P3/1BB1QPPP/2R2RK1 w - - bm Qh5; id \\\"arasan20.152\\\";\\n\" +\n            \"3R4/pp2r1pk/q1p3bp/2P2r2/PP6/2Q3P1/6BP/5RK1 w - - bm Rxf5; id \\\"arasan20.153\\\";\\n\" +\n            \"r3k3/1p4p1/1Bb1Bp1p/P1p1bP1P/2Pp2P1/3P4/5K2/4R3 w - - bm g5; id \\\"arasan20.154\\\";\\n\" +\n            \"1r1rb1k1/5ppp/4p3/1p1p3P/1q2P2Q/pN3P2/PPP4P/1K1R2R1 w - - bm Rxg7+; id \\\"arasan20.155\\\";\\n\" +\n            \"1r1q1rk1/4bp1p/n3p3/pbNpP1PB/5P2/1P2B1K1/1P1Q4/2RR4 w - - bm Ne4; id \\\"arasan20.156\\\";\\n\" +\n            \"r1bq1rk1/pp2bppp/1n2p3/3pP3/8/2RBBN2/PP2QPPP/2R3K1 w - - bm Bxh7+; id \\\"arasan20.157\\\";\\n\" +\n            \"r6k/N1Rb2bp/p2p1nr1/3Pp2q/1P2Pp1P/5N2/P3QBP1/4R1K1 b - - bm Bh3; id \\\"arasan20.158\\\";\\n\" +\n            \"r1b2rk1/1pq1nppp/pbn1p3/8/3N4/3BBN2/PPP1QPPP/3R1RK1 w - - bm Bxh7+; id \\\"arasan20.159\\\";\\n\" +\n            \"3r1rk1/1b2qp1p/1p3np1/1N1p4/6n1/2NBP1K1/PBQ2PP1/3RR3 b - - bm d4; id \\\"arasan20.160\\\";\\n\" +\n            \"br3bk1/3r1p2/3q2p1/3P2Np/2B4P/3QR1P1/3R1P1K/8 w - - bm Nxf7; id \\\"arasan20.161\\\";\\n\" +\n            \"r3r2k/ppq3np/2p3p1/NPPp1bb1/P2Pnp2/3B1P2/2Q3PP/1RN1BRK1 b - - bm Ng3; id \\\"arasan20.162\\\";\\n\" +\n            \"7k/5rp1/3q1p1p/2bNpQ1P/4P1P1/8/1R3PK1/8 w - - bm g5; id \\\"arasan20.163\\\";\\n\" +\n            \"4r3/4r3/1ppqpnk1/p3Rp1p/P2P1R1Q/2PB2P1/1P3P2/6K1 w - - bm Bxf5+; id \\\"arasan20.164\\\";\\n\" +\n            \"r3nrk1/1pqbbppp/p2pp3/2n1P3/5P2/2NBBNQ1/PPP3PP/R4RK1 w - - bm Bxh7; id \\\"arasan20.165\\\";\\n\" +\n            \"rnbq3r/ppp2kpp/4pp2/3n4/2BP4/BQ3N2/P4PPP/4RRK1 w - - bm Ng5+; id \\\"arasan20.166\\\";\\n\" +\n            \"8/2N5/1P2p3/5bPk/1q3b2/3Bp2P/2P5/6QK b - - bm Kh4; id \\\"arasan20.167\\\";\\n\" +\n            \"1k1r1b1r/1p6/p4pp1/P1p1p3/2NpP1p1/1PPP2Pq/1B3P1P/2RQR1K1 b - - bm f5; id \\\"arasan20.168\\\";\\n\" +\n            \"5r2/3rkp2/2R2p2/p2Bb2Q/1p2P2P/4q1P1/Pp6/1K1R4 b - - bm b3; id \\\"arasan20.169\\\";\\n\" +\n            \"5rk1/qp1b1rnp/4p1p1/p2pB3/8/1R1B4/PP1QRPPP/6K1 w - - bm Bxg6; id \\\"arasan20.170\\\";\\n\" +\n            \"6k1/5r1p/1p2Q1p1/p7/P1P2P2/2K1R1P1/2N2qb1/8 w - - bm Qd6 Qe8+; id \\\"arasan20.171\\\";\\n\" +\n            \"4r1k1/1p4p1/p1qBp1Qp/b1pnP3/8/5NP1/1P3PKP/3R4 w - - bm Rxd5; id \\\"arasan20.172\\\";\\n\" +\n            \"2r1k2r/pp1bb1pp/6n1/3Q1p2/1B1N4/P7/1q4PP/4RRK1 w k - bm Bxe7; id \\\"arasan20.173\\\";\\n\" +\n            \"3b2k1/4qp2/2P4Q/3B3p/1P6/1K6/8/8 w - - bm Bc4; id \\\"arasan20.174\\\";\\n\" +\n            \"1r2brk1/6p1/1q2p1Pp/pN1pPPb1/np1N4/5Q2/1PP1B3/1K1R3R w - - bm f6; id \\\"arasan20.175\\\";\\n\" +\n            \"2rq1Nk1/pb3pp1/4p3/1p6/3b1Pn1/P1N5/1PQ3PP/R1B2R1K b - - bm f5; id \\\"arasan20.176\\\";\\n\" +\n            \"r1b2rk1/1p4p1/p1n1p3/3p1pB1/NqP3n1/b2BP3/1PQN1P1P/1K4RR w - - bm Rxg4; id \\\"arasan20.177\\\";\\n\" +\n            \"q2rn1k1/1b3p1p/1p4p1/2n1B1P1/r1PN3P/P4P2/4Q1B1/3RR1K1 w - - bm Bf6; id \\\"arasan20.178\\\";\\n\" +\n            \"r1b3r1/5p1k/p1n2P1p/P1qpp1P1/1p1p4/3P2Q1/BPPB2P1/R4RK1 w - - bm Kf2; id \\\"arasan20.179\\\";\\n\" +\n            \"r2q1rk1/2p2ppp/pb1p1n2/n3p3/P2PP3/2P2NN1/R4PPP/2BQ1RK1 w - - bm Bg5; id \\\"arasan20.180\\\";\\n\" +\n            \"1r2rbk1/1p1n1p2/p3b1p1/q2NpNPp/4P2Q/1P5R/6BP/5R1K w - h6 bm Ng3; id \\\"arasan20.181\\\";\\n\" +\n            \"r4rk1/1bqnppBp/pp1p1np1/8/P2pP3/2N1QN1P/1PP1BPP1/R4RK1 w - - bm Qh6; id \\\"arasan20.182\\\";\\n\" +\n            \"5b2/1b2qp1k/2pp1npp/1p6/1P2PP2/r1PQ2NP/2B3P1/3RB1K1 w - - bm e5; id \\\"arasan20.183\\\";\\n\" +\n            \"r1qr1bk1/2p2pp1/ppn1p2p/8/1PPPN1nP/P4NP1/2Q2PK1/2BRR3 w - - bm Neg5; id \\\"arasan20.184\\\";\\n\" +\n            \"r1b2r1k/4qp1p/p2ppb1Q/4nP2/1p1NP3/2N5/PPP4P/2KR1BR1 w - - bm Nc6; id \\\"arasan20.185\\\";\\n\" +\n            \"5rk1/1p3n2/1q2pB2/1P1p1b1p/5Q1P/3p1NP1/5P2/2R3K1 w - - bm Ne5; id \\\"arasan20.186\\\";\\n\" +\n            \"8/2k5/2PrR1p1/7p/5p1P/5P1K/6P1/8 w - - bm Rxd6; id \\\"arasan20.187\\\";\\n\" +\n            \"8/4bBpp/3p4/P6P/2PN2p1/3k1b2/P7/6K1 w - - bm h6; id \\\"arasan20.188\\\";\\n\" +\n            \"4K1k1/8/1p5p/1Pp3b1/8/1P3P2/P1B2P2/8 w - - bm f4; id \\\"arasan20.189\\\";\\n\" +\n            \"5rn1/1p3p1k/r5pp/p1ppPPq1/6N1/1PPP3Q/1P5P/R4R1K w - - bm e6; id \\\"arasan20.190\\\";\\n\" +\n            \"8/k3qrpR/1p1p4/p2QpPp1/P1P1P1K1/1P6/8/8 w - - bm b4; id \\\"arasan20.191\\\";\\n\" +\n            \"3r1rk1/pbq1bp1p/1n1Rp1p1/2p1P1N1/4N2P/1P3Q2/PB3PP1/K6R w - - bm h5; id \\\"arasan20.192\\\";\\n\" +\n            \"r2qk2r/2p1bpp1/p5B1/1p1pP3/3P2p1/5PnP/PP3R2/RNBQ2K1 b kq - bm Rxh3; id \\\"arasan20.193\\\";\\n\" +\n            \"rn2r1k1/p4pn1/1p2p3/qPppP1Q1/3P4/2P2N2/2P2PPP/1R3RK1 w - - bm Nh4; id \\\"arasan20.194\\\";\\n\" +\n            \"k6r/ppqb4/2n5/4p2r/P2p1P1P/B1pQ2P1/2P3B1/RR4K1 w - - bm a5; id \\\"arasan20.195\\\";\\n\" +\n            \"1r1q2k1/p4p1p/2Pp2p1/2p1P3/1r1n4/1P4P1/3R1PBP/3QR1K1 w - - bm e6; id \\\"arasan20.196\\\";\\n\" +\n            \"1rr5/5R2/6k1/3B2P1/1p2P1n1/1PpK4/8/R7 w - - bm Ra6+; id \\\"arasan20.197\\\";\\n\" +\n            \"b1r1r1k1/p2n1p2/1p5p/2qp1Rn1/2P3pN/6P1/P2N1P1P/Q3RBK1 b - - bm Qb4; id \\\"arasan20.198\\\";\\n\" +\n            \"1q4rk/R1nbp3/1n1p3p/QP1P4/3pPp2/2N2P1P/1P1N3K/5B2 w - - bm Nb3; id \\\"arasan20.199\\\";\\n\" +\n            \"4rrk1/1bq1pp2/p2p1n1Q/1pn2p1p/4P3/P1N2P2/BPP3PP/2KRR3 w - - bm g4; id \\\"arasan20.200\\\";\\n\" +\n            \"\";\n\n    private static final String[] splitUpWACs = wacTests.split(\"\\\\\\n\");\n    static int totalWACS = splitUpWACs.length;\n\n}\n    \n    \n\n    /*\nr1bq1r1k/p1pnbpp1/1p2p3/6p1/3PB3/5N2/PPPQ1PPP/2KR3R w - - bm g4; id \"arasan20.1\";\\n\" +\nr1b2rk1/1p1nbppp/pq1p4/3B4/P2NP3/2N1p3/1PP3PP/R2Q1R1K w - - bm Rxf7; id \"arasan20.2\";\\n\" +\nr1q1k2r/1p1nbpp1/2p2np1/p1Pp4/3Pp3/P1N1P1P1/1P1B1P1P/R2QRBK1 b kq - bm Bxc5; id \"arasan20.3\";\\n\" +\n2rr3k/2qnbppp/p1n1p3/1p1pP3/3P1N2/1Q1BBP2/PP3P1P/1KR3R1 w - - bm Bxh7; id \"arasan20.4\";\\n\" +\n3q1r1k/1b3ppp/p1n5/1p1pPB2/2rP4/P6N/1P2Q1PP/R4RK1 w - - bm Qh5; id \"arasan20.5\";\\n\" +\nr1b1k2r/1p1pppb1/p5pp/3P4/q2p1B2/3P1Q2/PPP2PPP/R3R1K1 w kq - bm Rxe7+; id \"arasan20.6\";\\n\" +\nR4bk1/2Bbp2p/2p2pp1/1rPp4/3P4/4P2P/4BPPK/1q1Q4 w - - bm Qa4; id \"arasan20.7\";\\n\" +\nr1r3k1/p3bppp/2bp3Q/q2pP1P1/1p1BP3/8/PPP1B2P/2KR2R1 w - - bm e6; id \"arasan20.8\";\\n\" +\nb2rk1r1/p3q3/2p5/3nPR2/3P2pp/1R1B2P1/P1Q2P2/6K1 w - - bm Bc4; id \"arasan20.9\"; id \"Black Queen, Stockfish 081016 64-Mikachomika (Matrix C3 x64), playchess.com 2016\";\nr2q3r/1p1bbQ2/4p1Bk/3pP3/1n1P1P1p/pP6/Pn4PP/R1B1R1K1 w - - bm g4; id \"arasan20.10\";\\n\" +\n1r2brk1/4n1p1/4p2p/p2pP1qP/2pP1NP1/P1Q1BK2/2P4R/6R1 b - - bm Bg6; id \"arasan20.11\";\\n\" +\n1rb2k1r/2q2pp1/p2b3p/2n3B1/2QN4/3B4/PpP3PP/1K2R2R w - - bm Bd8; id \"arasan20.12\";\\n\" +\n5rk1/1pp3p1/3ppr1p/pP2p2n/4P2q/P2PQ2P/2P1NPP1/R4RK1 b - - bm Rf3; id \"arasan20.13\";\\n\" +\nr4rk1/1b1n1pb1/3p2p1/1p1Pq1Bp/2p1P3/2P2RNP/1PBQ2P1/5R1K w - - bm Nf5; id \"arasan20.14\";\\n\" +\n2kr2r1/ppq1bp1p/4pn2/2p1n1pb/4P1P1/2P2N1P/PPBNQP2/R1B1R1K1 b - - bm Nfxg4; id \"arasan20.15\";\\n\" +\n8/3r4/pr1Pk1p1/8/7P/6P1/3R3K/5R2 w - - bm Re2+; id \"arasan20.16\";\\n\" +\n3r1rk1/q4pp1/n1bNp2p/p7/pn2P1N1/6P1/1P1Q1PBP/2RR2K1 w - - bm Nxh6+ e5; id \"arasan20.17\";\\n\" +\nr1q2rk1/ppnbbpp1/n4P1p/4P3/3p4/2N1B1PP/PP4BK/R2Q1R2 w - - bm Bxh6; id \"arasan20.18\";\\n\" +\n1R6/5p1k/4bPpp/3pN3/2pP1P1P/2r5/6PK/8 w - - bm h5; id \"arasan20.19\";\\n\" +\n3q1rk1/pr1b1p1p/1bp2p2/2ppP3/8/2P1BN2/PPQ3PP/R4RK1 w - - bm Bh6; id \"arasan20.20\";\\n\" +\n8/5pk1/p4npp/1pPN4/1P2p3/1P4PP/5P2/5K2 w - - bm Nxf6; id \"arasan20.21\";\\n\" +\n8/6p1/P1b1pp2/2p1p3/1k4P1/3PP3/1PK5/5B2 w - - bm Bg2; id \"arasan20.22\";\\n\" +\nr5n1/p1p1q2k/4b2p/3pB3/3PP1pP/8/PPPQ2P1/5RK1 w - - bm Qf4; id \"arasan20.23\";\\n\" +\n2b2rk1/r3q1pp/1nn1p3/3pP1NP/p1pP2Q1/2P1N3/1P1KBP2/R5R1 w - - bm Nxh7; id \"arasan20.24\";\\n\" +\nrnb3k1/p3qpr1/2p1p3/2NP3p/1pP3p1/3BQ3/P4PP1/4RRK1 w - - bm Qd4; id \"arasan20.25\";\\n\" +\nr3r1k1/p3bppp/q1b2n2/5Q2/1p1B4/1BNR4/PPP3PP/2K2R2 w - - bm Rg3; id \"arasan20.26\";\\n\" +\n2bq1rk1/rpb2p2/2p1p1p1/p1N3Np/P2P1P1P/1Q2R1P1/1P3P2/3R2K1 w - - bm f5; id \"arasan20.27\";\\n\" +\n3q1r1k/2r2pp1/p6p/1pbppP1N/3pP1PP/3P1Q2/PPP4R/5RK1 w - - bm g5; id \"arasan20.28\";\\n\" +\n1q6/6k1/5Np1/1r4Pp/2p4P/2Nrb3/PP6/KR5Q b - - bm Bd4; id \"arasan20.29\";\\n\" +\nb2rk3/r4p2/p3p3/P3Q1Np/2Pp3P/8/6P1/6K1 w - - bm Qh8+; id \"arasan20.30\";\\n\" +\n2kr1b1r/1pp1ppp1/p7/q2P3n/2BB1pb1/2NQ4/P1P1N3/1R3RK1 w - - bm Rxb7; id \"arasan20.31\";\\n\" +\nr4rkq/1ppb4/3P2n1/1N1Pp3/P3Pbn1/3B1NP1/1P2QB2/R4RK1 b - - bm Rf7; id \"arasan20.32\";\\n\" +\nbr4k1/1qrnbppp/pp1ppn2/8/NPPBP3/PN3P2/5QPP/2RR1B1K w - - bm Nxb6; id \"arasan20.33\";\\n\" +\nr2q1rk1/ppp2p2/3p1np1/4pNQ1/4P1pP/1PPP4/1P3P2/R3K1R1 w Q - bm Qh6; id \"arasan20.34\";\\n\" +\n1qb2rk1/3p1pp1/1p6/1pbBp3/r5p1/3QB3/PPP2P1P/2KR2R1 w - - bm b3; id \"arasan20.35\";\\n\" +\nr1b2q1k/2Qn1p1p/1p1Rpp2/p6B/4P2P/6N1/P4PP1/6K1 w - - bm e5; id \"arasan20.36\";\\n\" +\nr2q1rk1/p2pn3/bpp2p1p/3Nb1pQ/7B/8/PPB2PPP/R3R1K1 w - - bm Bxg5; id \"arasan20.37\";\\n\" +\nr4rk1/p4ppp/qp2p3/b5B1/n1R5/5N2/PP2QPPP/1R4K1 w - - bm Bf6; id \"arasan20.38\";\\n\" +\nr2q1rk1/4bppp/3pb3/2n1pP2/1p2P1PP/1P3Q2/1BP1N1B1/2KR3R b - - bm Ra2; id \"arasan20.39\";\\n\" +\n2r2rkb/1Q1b3p/p2p3q/2PPnp2/1P2p1p1/2N5/P3BPPB/4RRK1 b - - bm e3; id \"arasan20.40\";\\n\" +\n2b1rk2/5p2/p1P5/2p2P2/2p5/7B/P7/2KR4 w - - bm f6; id \"arasan20.41\";\\n\" +\nrn1qr1k1/1p2bppp/p3p3/3pP3/P2P1B2/2RB1Q1P/1P3PP1/R5K1 w - - bm Bxh7+; id \"arasan20.42\";\\n\" +\n1k4rr/p1pq2b1/1p6/1P1pp1p1/6n1/2PP2QN/PN1BP1B1/5RK1 b - - bm e4; id \"arasan20.43\";\\n\" +\n1n3rk1/3rbppp/p2p4/4pP2/Ppq1P3/1N2B3/1PP3PP/R2Q1R1K w - - bm f6; id \"arasan20.44\";\\n\" +\n8/2p1k3/3p3p/2PP1pp1/1P1K1P2/6P1/8/8 w - - bm g4; id \"arasan20.45\";\\n\" +\nr1b2rk1/pp2bppp/3p4/q7/3BN1n1/1B3Q2/PPP3PP/R4RK1 w - - bm Qxf7+; id \"arasan20.46\";\\n\" +\nr1b1rk2/p1pq2p1/1p1b1p1p/n2P4/2P1NP2/P2B1R2/1BQ3PP/R6K w - - bm Nxf6; id \"arasan20.47\";\\n\" +\nr2qr3/2p1b1pk/p5pp/1p2p3/nP2P1P1/1BP2RP1/P3QPK1/R1B5 w - - bm Bxh6; id \"arasan20.48\";\\n\" +\n1rbq1rk1/p5bp/3p2p1/2pP4/1p1n1BP1/3P3P/PP2N1B1/1R1Q1RK1 b - - bm Bxg4; id \"arasan20.49\";\\n\" +\nk1b4r/1p3p2/pq2pNp1/5n1p/P3QP2/1P1R1BPP/2P5/1K6 b - - am Nxg3; id \"arasan20.50\";\\n\" +\n7b/8/kq6/8/8/1N2R3/K2P4/8 w - - bm Nd4; id \"arasan20.51\";\\n\" +\nq3nrk1/4bppp/3p4/r3nPP1/4P2P/NpQ1B3/1P4B1/1K1R3R b - - bm Nc7; id \"arasan20.52\";\\n\" +\n2r5/8/6k1/P1p3p1/2R5/1P1q4/1K4Q1/8 w - - bm a6; id \"arasan20.53\";\\n\" +\n8/3R1P2/1ppP1p2/3r4/8/K7/p4k2/8 w - - bm Kb2; id \"arasan20.54\";\\n\" +\n2qrrbk1/1b3ppp/pn1Pp3/6P1/1Pp2B2/1nN2NQB/1P3P1P/3RR1K1 w - - bm g6; id \"arasan20.55\";\\n\" +\nr1q1nrk1/3nb2p/3p2p1/p5P1/1pbNPB2/1N6/PPPQ4/2KR1B1R w - - bm Nf5; id \"arasan20.56\";\\n\" +\n5rk1/pp3ppp/3q4/8/2Pp2b1/P5Pn/PBQPr1BP/4RR1K b - - bm Rxg2; id \"arasan20.57\";\\n\" +\n3b3r/1q3pk1/4b2p/3pPppQ/R1pP1P1P/1rP1N1P1/6N1/2R3K1 w - - bm g4; id \"arasan20.58\";\\n\" +\nr1b2rk1/pp1p2pR/8/1pb2p2/5N2/7Q/qPPB1PPP/6K1 w - - bm g3; id \"arasan20.59\";\\n\" +\n7q/3k2p1/n1p1p1Pr/1pPpPpQ1/3P1N1p/1P2KP2/6P1/7R w - - bm Nxd5; id \"arasan20.60\";\\n\" +\n5rk1/8/pqPp1r1p/1p1Pp1bR/4B3/5PP1/PP2Q1K1/R7 w - - bm Rxg5+; id \"arasan20.61\";\\n\" +\n3r2k1/pb3Np1/4pq1p/2pp1n2/3P4/1PQ5/P4PPP/R2R2K1 b - - bm Nxd4; id \"arasan20.62\";\\n\" +\n2kr1r2/ppq1b1p1/2n5/2PpPb1N/QP1B1pp1/2P5/P2N1P1P/R4RK1 b - - bm Rh8; id \"arasan20.63\";\\n\" +\nr1r2k2/pp2bpp1/2bppn1p/6B1/2qNPPPP/2N5/PPPQ4/1K1RR3 w - - bm f5; id \"arasan20.64\";\\n\" +\n3r2k1/6p1/B1R2p1p/1pPr1P2/3P4/8/1P3nP1/2KR4 w - - bm Rc8; id \"arasan20.65\";\\n\" +\n3qb1k1/5rb1/r3p1Np/1n1pP2P/p1pB1PQ1/2P5/R1B4K/6R1 w - - bm Bc5; id \"arasan20.66\";\\n\" +\n3q1k2/p4pb1/3Pp3/p3P3/r6p/2QB3P/3B1P2/6K1 w - - bm Bb5; id \"arasan20.67\";\\n\" +\nr4r1k/ppqbn1pp/3b1p2/2pP3B/2P4N/7P/P2B1PP1/1R1QR1K1 w - - bm Rxe7; id \"arasan20.68\";\\n\" +\n1r4k1/1q3pp1/r3b2p/p2N4/3R4/QP3P2/2P3PP/1K1R4 w - - bm Nf6+; id \"arasan20.69\";\\n\" +\nr2q1r2/1bp1npk1/3p1p1p/p3p2Q/P3P2N/1BpPP3/1P1N2PP/5RK1 w - - bm Rf3; id \"arasan20.70\";\\n\" +\n2r3k1/1bp3pp/pp1pNn1r/3P1p1q/1PP1pP2/P3P1P1/3Q3P/2RR1BK1 w - - bm c5; id \"arasan20.71\";\\n\" +\n2r3r1/1p1qb2k/p5pp/2n1Bp2/2RP3P/1P2PNQ1/5P1K/3R4 w - - bm Ng5+; id \"arasan20.72\";\\n\" +\nrn3rk1/pp1q3p/4p1B1/2p5/3N1b2/4B3/PPQ2PPP/3R2K1 w - - bm Nf5; id \"arasan20.73\";\\n\" +\nrr5k/1q2pPbp/3p2p1/PbpP4/1nB1nP1Q/1NB5/1P4PP/R4R1K w - - bm f5; id \"arasan20.74\";\\n\" +\nr4rk1/pp1qbppp/1n6/6R1/P1pP4/5Q1P/2B2PP1/2B2RK1 w - - bm Rxg7+; id \"arasan20.75\";\\n\" +\n1r4k1/p7/2P1n1pp/5p2/2QPqP2/PN2p3/5P1P/4RK2 b - - bm Rc8; id \"arasan20.76\";\\n\" +\n1qrrbbk1/1p1nnppp/p3p3/4P3/2P5/1PN1N3/PB2Q1PP/1B2RR1K w - - bm Bxh7+; id \"arasan20.77\";\\n\" +\nr1b2rk1/qp5p/p1n1ppp1/7N/4P1P1/2N1pP2/PPP5/2KR1QR1 w - - bm e5; id \"arasan20.78\";\\n\" +\n3r4/2q5/5pk1/p3n1p1/N3Pp1p/1PPr1P1P/2Q1R1P1/5R1K b - - bm g4; id \"arasan20.79\";\\n\" +\n1q2r1k1/3R1pb1/3R2p1/7p/p3N3/2P1BP1P/1P3PK1/8 b - - bm Rxe4; id \"arasan20.80\";\\n\" +\nr1b1k2r/2q2pp1/p1p1pn2/2b4p/Pp2P3/3B3P/1PP1QPP1/RNB2RK1 b kq - bm Ng4; id \"arasan20.81\";\\n\" +\n2r1rb1k/ppq2pp1/4b2p/3pP2Q/5B2/2PB2R1/P4PPP/1R4K1 w - - bm Rxg7; id \"arasan20.82\";\\n\" +\n6k1/p4qp1/1p3r1p/2pPp1p1/1PP1PnP1/2P1KR1P/1B6/7Q b - - bm h5; id \"arasan20.83\";\\n\" +\nrnb1kb1r/pp1p1ppp/1q2p3/8/3NP1n1/2N1B3/PPP2PPP/R2QKB1R w KQkq - bm Qxg4; id \"arasan20.84\";\nr3kb1r/1b1n2p1/p3Nn1p/3Pp3/1p4PP/3QBP2/qPP5/2KR1B1R w kq - bm Qg6+; id \"arasan20.85\";\\n\" +\n1r1qrbk1/pb3p2/2p1pPpp/1p4B1/2pP2PQ/2P5/P4PBP/R3R1K1 w - - bm Bxh6; id \"arasan20.86\";\\n\" +\n2r1r2k/1b1n1p1p/p3pPp1/1p1pP2q/3N4/P3Q1P1/1PP4P/2KRRB2 w - - bm g4; id \"arasan20.87\";\\n\" +\n2r1b1k1/5p2/1R2nB2/1p2P2p/2p5/2Q1P2K/3R1PB1/r3q3 w - - bm Rxe6; id \"arasan20.88\";\\n\" +\nrn2r1k1/ppq1pp1p/2b2bp1/8/2BNPP1B/2P4P/P1Q3P1/1R3RK1 w - - bm Bxf7+; id \"arasan20.89\";\\n\" +\n1kr5/1p3p2/q3p3/pRbpPp2/P1rNnP2/2P1B1Pp/1P2Q2P/R5K1 b - - bm Bxd4; id \"arasan20.90\";\\n\" +\nr3r2k/1pq2pp1/4b2p/3pP3/p1nB3P/P2B1RQ1/1PP3P1/3R3K w - - bm Rf6; id \"arasan20.91\";\\n\" +\nr3brk1/2q1bp1p/pnn3p1/1p1pP1N1/3P4/3B2P1/PP1QNR1P/R1B3K1 w - - bm Nxh7; id \"arasan20.92\";\\n\" +\n1r3r2/q5k1/4p1n1/1bPpPp1p/pPpR1Pp1/P1B1Q3/2B3PP/3R2K1 w - - bm Rxd5; id \"arasan20.93\";\\n\" +\nrq3rk1/1b1n1ppp/ppn1p3/3pP3/5B2/2NBP2P/PP2QPP1/2RR2K1 w - - bm Nxd5; id \"arasan20.94\";\\n\" +\n7r/k4pp1/pn2p1pr/2ppP3/1q3P2/1PN2R1P/P1P2QP1/3R3K w - - bm a3; id \"arasan20.95\";\\n\" +\n1r3rk1/3bbppp/1qn2P2/p2pP1P1/3P4/2PB1N2/6K1/qNBQ1R2 w - - bm Bxh7+; id \"arasan20.96\";\\n\" +\n1r1qrbk1/5ppp/2b1p2B/2npP3/1p4QP/pP1B1N2/P1P2PP1/1K1R3R w - - bm Bxh7+; id \"arasan20.97\";\\n\" +\nr5k1/pbpq1pp1/3b2rp/N3n3/1N6/2P3B1/PP1Q1PPP/R4RK1 b - - bm Rxg3; id \"arasan20.98\";\\n\" +\n1r2r1k1/2R2p2/1N1Rp2p/p2b3P/4pPP1/8/P4K2/8 w - - bm g5; id \"arasan20.99\";\\n\" +\nr4r2/pp1b1ppk/2n1p3/3pPnB1/q1pP2QP/P1P4R/2PKNPP1/R7 w - - bm Qh5+; id \"arasan20.100\";\\n\" +\n8/2k2Bp1/2n5/p1P4p/4pPn1/P3PqPb/1r1BQ2P/2R1K1R1 b - - bm Nce5; id \"arasan20.101\";\\n\" +\n8/5kpp/8/8/8/5P2/1RPK2PP/6r1 w - - bm c4; id \"arasan20.102\";\\n\" +\nr3rnk1/pp2ppb1/1np3p1/3qP2p/3P1B2/4Q1N1/PP2BPP1/1K1R3R w - - bm Bh6; id \"arasan20.103\";\\n\" +\n1r1q2k1/2r3bp/B2p1np1/3P1p2/R1P1pP2/4B2P/P5PK/3Q1R2 b - - bm Ng4+; id \"arasan20.104\";\\n\" +\n2r1rnk1/1p2pp1p/p1np2p1/q4PP1/3NP2Q/4B2R/PPP4P/3R3K w - - bm b4; id \"arasan20.105\";\\n\" +\n2b2qk1/1r4pp/2p1p3/p2n1PPB/2p4P/2p5/P4Q2/4RRK1 w - - bm Qg3; id \"arasan20.106\";\\n\" +\n1r1rkb2/2q2p2/p2p1P1B/P1pPp2Q/2P3b1/1P6/2B3PP/5R1K w - - bm Qxg4; id \"arasan20.107\";\\n\" +\nr4rk1/3b3p/p1pb4/1p1n2p1/2P2p2/1B1P2Pq/PP1NRP1P/R1BQ2K1 w - - bm Qf1; id \"arasan20.108\";\\n\" +\n1r3rk1/4bpp1/p3p2p/q1PpPn2/bn3Q1P/1PN1BN2/2P1BPP1/1KR2R2 b - - bm Bxb3; id \"arasan20.109\";\\n\" +\n2nb2k1/1rqb1pp1/p2p1n1p/2pPp3/P1P1P3/2B1NN1P/2B2PP1/Q3R2K w - - bm Nxe5; id \"arasan20.110\";\\n\" +\n3r2k1/p1qn1p1p/4p1p1/2p1N3/8/2P3P1/PP2QP1P/4R1K1 w - - bm Nxf7; id \"arasan20.111\";\\n\" +\nr2q1rk1/pb1nbp1p/1pp1pp2/8/2BPN2P/5N2/PPP1QPP1/2KR3R w - - bm Nfg5; id \"arasan20.112\";\\n\" +\n4rr2/3bp1bk/p2q1np1/2pPp2p/2P4P/1R4N1/1P1BB1P1/1Q3RK1 w - - bm Bxh5; id \"arasan20.113\";\\n\" +\n8/8/4b1p1/2Bp3p/5P1P/1pK1Pk2/8/8 b - - bm g5 d4+; id \"arasan20.114\";\\n\" +\n8/5p2/3p2p1/1bk4p/p2pBNnP/P5P1/1P3P2/4K3 b - - bm d3; id \"arasan20.115\";\\n\" +\n8/4nk2/1p3p2/1r1p2pp/1P1R1N1P/6P1/3KPP2/8 w - - bm Nd3; id \"arasan20.116\";\\n\" +\n6k1/1bq1bpp1/p6p/2p1pP2/1rP1P1P1/2NQ4/2P4P/K2RR3 b - - bm Bd5; id \"arasan20.117\";\\n\" +\nr3r1k1/1bqnbp1p/pp1pp1p1/6P1/Pn2PP1Q/1NN1BR2/1PPR2BP/6K1 w - - bm Rh3; id \"arasan20.118\";\\n\" +\n4rrk1/1pp1n1pp/1bp1P2q/p4p2/P4P2/3R2N1/1PP2P1P/2BQRK2 w - - bm Nh5; id \"arasan20.119\";\\n\" +\n3q4/4k3/1p1b1p1r/p2Q4/3B1p1p/7P/1P4P1/3R3K w - - bm b4; id \"arasan20.120\";\\n\" +\n8/5p1k/6p1/1p1Q3p/3P4/1R2P1KP/6P1/r4q2 b - - bm h4+; id \"arasan20.121\";\\n\" +\n7k/3q1pp1/1p3r2/p1bP4/P1P2p2/1P2rNpP/2Q3P1/4RR1K b - - bm Rxf3; id \"arasan20.122\";\\n\" +\n3r3r/k1p2pb1/B1b2q2/2RN3p/3P2p1/1Q2B1Pn/PP3PKP/5R2 w - - bm Rfc1; id \"arasan20.123\";\\n\" +\nr1b3kr/pp1n2Bp/2pb2q1/3p3N/3P4/2P2Q2/P1P3PP/4RRK1 w - - bm Re5; id \"arasan20.124\";\\n\" +\n2r3k1/1q3pp1/2n1b2p/4P3/3p1BP1/Q6P/1p3PB1/1R4K1 b - - bm Rb8; id \"arasan20.125\";\\n\" +\nrn2kb1r/1b1n1p1p/p3p1p1/1p2q1B1/3N3Q/2N5/PPP3PP/2KR1B1R w kq - bm Nxe6; id \"arasan20.126\";\\n\" +\nr7/ppp3kp/2bn4/4qp2/2B1pR2/2P1Q2P/P5P1/5RK1 w - - bm Rxf5; id \"arasan20.127\";\\n\" +\n1r6/r6k/2np2p1/2pNp1qp/1pP1Pp1b/1P1P1P2/1B3P2/1Q1R1K1R b - - bm Bxf2; id \"arasan20.128\";\\n\" +\n1nr3k1/q4rpp/1p1p1n2/3Pp3/1PQ1P1b1/4B1P1/2R2NBP/2R3K1 w - - bm Qxc8+; id \"arasan20.129\";\\n\" +\n8/5rk1/p2p4/1p1P1b1p/1P1K2pP/2P3P1/4R3/5B2 w - - bm Rf2; id \"arasan20.130\";\\n\" +\n5rk1/2p1R2p/r5q1/2pPR2p/5p2/1p5P/P4PbK/2BQ4 w - - bm d6; id \"arasan20.131\";\\n\" +\nr2q1r2/1b2bpkp/p3p1p1/2ppP1P1/7R/1PN1BQR1/1PP2P1P/4K3 w - - bm Qf6+; id \"arasan20.132\";\\n\" +\nr1r3k1/1ppn2bp/p1q1p1p1/3pP3/3PB1P1/PQ3NP1/3N4/2BK3R w - - bm Ng5; id \"arasan20.133\";\\n\" +\n1rr1b1k1/1pq1bp2/p2p1np1/4p3/P2BP3/2NB2Q1/1PP3PP/4RR1K w - - bm Rxf6; id \"arasan20.134\";\\n\" +\nr1r3k1/1q3p1p/4p1pP/1bnpP1P1/pp1Q1P2/1P6/P1PR1N2/1K3B1R b - - bm axb3; id \"arasan20.135\";\\n\" +\nr1b2rk1/pppnq3/4ppp1/6N1/3P3Q/2PB4/P1PK2PP/3R3R w - - bm Nxe6; id \"arasan20.136\";\\n\" +\n3r1r1k/pp5p/4b1pb/6q1/3P4/4p1BP/PP2Q1PK/3RRB2 b - - bm Qxg3+; id \"arasan20.137\";\\n\" +\nr2r2k1/3bb1Pp/3pp1p1/p1q5/1p2PP2/P1N5/1PPQ4/1K1R1B1R w - - bm Nd5; id \"arasan20.138\";\\n\" +\n8/2R5/3p4/3P4/3k3P/2p3K1/1r4P1/8 w - - bm Kf3; id \"arasan20.139\";\\n\" +\nr1bq2k1/1pp2ppp/3prn2/p3n3/2P5/PQN1PP2/1P1PB2P/R1B2R1K b - - bm Nfg4; id \"arasan20.140\";\\n\" +\n2kr3r/pp4pp/4pp2/2pq4/P1Nn4/4Q3/KP2B1PP/2RR4 b - - am Qxg2; id \"arasan20.141\";\\n\" +\n5r2/1p4k1/pP1pP1pp/2rP2q1/4Qp2/3Bb3/P5PP/4RR1K w - - bm Rf3; id \"arasan20.142\";\\n\" +\nr2qr1k1/1b1pppbp/1p4p1/pP2P1B1/3N4/R7/1PP2PPP/3QR1K1 w - a6 bm Nf5; id \"arasan20.143\";\\n\" +\n4k3/1R6/Pb3p2/1P1n4/5p2/8/4K3/8 w - - bm Kd3; id \"arasan20.144\";\\n\" +\nr4nk1/2pq1ppp/3p4/p3pNPQ/4P3/2PP1RP1/Pr3PK1/7R w - - bm Ne3; id \"arasan20.145\";\\n\" +\nr1q2rk1/1b2bppp/p1p1p3/4B3/PP6/3B3P/2P1QPP1/R2R2K1 w - - bm Bxh7+; id \"arasan20.146\";\\n\" +\nr2qrb1k/1p1b2p1/p2ppn1p/8/3NP3/1BN5/PPP3QP/1K3RR1 w - - bm e5; id \"arasan20.147\";\\n\" +\nr2q1k1r/pp2n1pp/2nb1p2/1B1p3Q/N2P4/2P1B3/PP4PP/R4RK1 w - - bm Rxf6+; id \"arasan20.148\";\\n\" +\n4r1k1/6p1/bp2r2p/3QNp2/P2BnP2/4P2P/5qPK/3RR3 b - - bm Kh7; id \"arasan20.149\";\\n\" +\n8/5rk1/p3Q1pp/1p1P1p1b/2p1Pq1P/P4P2/1PKN4/5R2 w - - bm d6; id \"arasan20.150\";\\n\" +\nr1bqkb1r/4pppp/p1p5/2ppP3/8/2P2N2/PPP2PPP/R1BQR1K1 w kq - bm e6; id \"arasan20.151\";\\n\" +\n3r1rk1/1b2bpp1/2n1p2p/qp1n2N1/4N3/P3P3/1BB1QPPP/2R2RK1 w - - bm Qh5; id \"arasan20.152\";\\n\" +\n3R4/pp2r1pk/q1p3bp/2P2r2/PP6/2Q3P1/6BP/5RK1 w - - bm Rxf5; id \"arasan20.153\";\\n\" +\nr3k3/1p4p1/1Bb1Bp1p/P1p1bP1P/2Pp2P1/3P4/5K2/4R3 w - - bm g5; id \"arasan20.154\";\\n\" +\n1r1rb1k1/5ppp/4p3/1p1p3P/1q2P2Q/pN3P2/PPP4P/1K1R2R1 w - - bm Rxg7+; id \"arasan20.155\";\\n\" +\n1r1q1rk1/4bp1p/n3p3/pbNpP1PB/5P2/1P2B1K1/1P1Q4/2RR4 w - - bm Ne4; id \"arasan20.156\";\\n\" +\nr1bq1rk1/pp2bppp/1n2p3/3pP3/8/2RBBN2/PP2QPPP/2R3K1 w - - bm Bxh7+; id \"arasan20.157\";\\n\" +\nr6k/N1Rb2bp/p2p1nr1/3Pp2q/1P2Pp1P/5N2/P3QBP1/4R1K1 b - - bm Bh3; id \"arasan20.158\";\\n\" +\nr1b2rk1/1pq1nppp/pbn1p3/8/3N4/3BBN2/PPP1QPPP/3R1RK1 w - - bm Bxh7+; id \"arasan20.159\";\\n\" +\n3r1rk1/1b2qp1p/1p3np1/1N1p4/6n1/2NBP1K1/PBQ2PP1/3RR3 b - - bm d4; id \"arasan20.160\";\\n\" +\nbr3bk1/3r1p2/3q2p1/3P2Np/2B4P/3QR1P1/3R1P1K/8 w - - bm Nxf7; id \"arasan20.161\";\\n\" +\nr3r2k/ppq3np/2p3p1/NPPp1bb1/P2Pnp2/3B1P2/2Q3PP/1RN1BRK1 b - - bm Ng3; id \"arasan20.162\";\\n\" +\n7k/5rp1/3q1p1p/2bNpQ1P/4P1P1/8/1R3PK1/8 w - - bm g5; id \"arasan20.163\";\\n\" +\n4r3/4r3/1ppqpnk1/p3Rp1p/P2P1R1Q/2PB2P1/1P3P2/6K1 w - - bm Bxf5+; id \"arasan20.164\";\\n\" +\nr3nrk1/1pqbbppp/p2pp3/2n1P3/5P2/2NBBNQ1/PPP3PP/R4RK1 w - - bm Bxh7; id \"arasan20.165\";\\n\" +\nrnbq3r/ppp2kpp/4pp2/3n4/2BP4/BQ3N2/P4PPP/4RRK1 w - - bm Ng5+; id \"arasan20.166\";\\n\" +\n8/2N5/1P2p3/5bPk/1q3b2/3Bp2P/2P5/6QK b - - bm Kh4; id \"arasan20.167\";\\n\" +\n1k1r1b1r/1p6/p4pp1/P1p1p3/2NpP1p1/1PPP2Pq/1B3P1P/2RQR1K1 b - - bm f5; id \"arasan20.168\";\\n\" +\n5r2/3rkp2/2R2p2/p2Bb2Q/1p2P2P/4q1P1/Pp6/1K1R4 b - - bm b3; id \"arasan20.169\";\\n\" +\n5rk1/qp1b1rnp/4p1p1/p2pB3/8/1R1B4/PP1QRPPP/6K1 w - - bm Bxg6; id \"arasan20.170\";\\n\" +\n6k1/5r1p/1p2Q1p1/p7/P1P2P2/2K1R1P1/2N2qb1/8 w - - bm Qd6 Qe8+; id \"arasan20.171\";\\n\" +\n4r1k1/1p4p1/p1qBp1Qp/b1pnP3/8/5NP1/1P3PKP/3R4 w - - bm Rxd5; id \"arasan20.172\";\\n\" +\n2r1k2r/pp1bb1pp/6n1/3Q1p2/1B1N4/P7/1q4PP/4RRK1 w k - bm Bxe7; id \"arasan20.173\";\\n\" +\n3b2k1/4qp2/2P4Q/3B3p/1P6/1K6/8/8 w - - bm Bc4; id \"arasan20.174\";\\n\" +\n1r2brk1/6p1/1q2p1Pp/pN1pPPb1/np1N4/5Q2/1PP1B3/1K1R3R w - - bm f6; id \"arasan20.175\";\\n\" +\n2rq1Nk1/pb3pp1/4p3/1p6/3b1Pn1/P1N5/1PQ3PP/R1B2R1K b - - bm f5; id \"arasan20.176\";\\n\" +\nr1b2rk1/1p4p1/p1n1p3/3p1pB1/NqP3n1/b2BP3/1PQN1P1P/1K4RR w - - bm Rxg4; id \"arasan20.177\";\\n\" +\nq2rn1k1/1b3p1p/1p4p1/2n1B1P1/r1PN3P/P4P2/4Q1B1/3RR1K1 w - - bm Bf6; id \"arasan20.178\";\\n\" +\nr1b3r1/5p1k/p1n2P1p/P1qpp1P1/1p1p4/3P2Q1/BPPB2P1/R4RK1 w - - bm Kf2; id \"arasan20.179\";\\n\" +\nr2q1rk1/2p2ppp/pb1p1n2/n3p3/P2PP3/2P2NN1/R4PPP/2BQ1RK1 w - - bm Bg5; id \"arasan20.180\";\\n\" +\n1r2rbk1/1p1n1p2/p3b1p1/q2NpNPp/4P2Q/1P5R/6BP/5R1K w - h6 bm Ng3; id \"arasan20.181\";\\n\" +\nr4rk1/1bqnppBp/pp1p1np1/8/P2pP3/2N1QN1P/1PP1BPP1/R4RK1 w - - bm Qh6; id \"arasan20.182\";\\n\" +\n5b2/1b2qp1k/2pp1npp/1p6/1P2PP2/r1PQ2NP/2B3P1/3RB1K1 w - - bm e5; id \"arasan20.183\";\\n\" +\nr1qr1bk1/2p2pp1/ppn1p2p/8/1PPPN1nP/P4NP1/2Q2PK1/2BRR3 w - - bm Neg5; id \"arasan20.184\";\\n\" +\nr1b2r1k/4qp1p/p2ppb1Q/4nP2/1p1NP3/2N5/PPP4P/2KR1BR1 w - - bm Nc6; id \"arasan20.185\";\\n\" +\n5rk1/1p3n2/1q2pB2/1P1p1b1p/5Q1P/3p1NP1/5P2/2R3K1 w - - bm Ne5; id \"arasan20.186\";\\n\" +\n8/2k5/2PrR1p1/7p/5p1P/5P1K/6P1/8 w - - bm Rxd6; id \"arasan20.187\";\\n\" +\n8/4bBpp/3p4/P6P/2PN2p1/3k1b2/P7/6K1 w - - bm h6; id \"arasan20.188\";\\n\" +\n4K1k1/8/1p5p/1Pp3b1/8/1P3P2/P1B2P2/8 w - - bm f4; id \"arasan20.189\";\\n\" +\n5rn1/1p3p1k/r5pp/p1ppPPq1/6N1/1PPP3Q/1P5P/R4R1K w - - bm e6; id \"arasan20.190\";\\n\" +\n8/k3qrpR/1p1p4/p2QpPp1/P1P1P1K1/1P6/8/8 w - - bm b4; id \"arasan20.191\";\\n\" +\n3r1rk1/pbq1bp1p/1n1Rp1p1/2p1P1N1/4N2P/1P3Q2/PB3PP1/K6R w - - bm h5; id \"arasan20.192\";\\n\" +\nr2qk2r/2p1bpp1/p5B1/1p1pP3/3P2p1/5PnP/PP3R2/RNBQ2K1 b kq - bm Rxh3; id \"arasan20.193\";\\n\" +\nrn2r1k1/p4pn1/1p2p3/qPppP1Q1/3P4/2P2N2/2P2PPP/1R3RK1 w - - bm Nh4; id \"arasan20.194\";\\n\" +\nk6r/ppqb4/2n5/4p2r/P2p1P1P/B1pQ2P1/2P3B1/RR4K1 w - - bm a5; id \"arasan20.195\";\\n\" +\n1r1q2k1/p4p1p/2Pp2p1/2p1P3/1r1n4/1P4P1/3R1PBP/3QR1K1 w - - bm e6; id \"arasan20.196\";\\n\" +\n1rr5/5R2/6k1/3B2P1/1p2P1n1/1PpK4/8/R7 w - - bm Ra6+; id \"arasan20.197\";\\n\" +\nb1r1r1k1/p2n1p2/1p5p/2qp1Rn1/2P3pN/6P1/P2N1P1P/Q3RBK1 b - - bm Qb4; id \"arasan20.198\";\\n\" +\n1q4rk/R1nbp3/1n1p3p/QP1P4/3pPp2/2N2P1P/1P1N3K/5B2 w - - bm Nb3; id \"arasan20.199\";\\n\" +\n4rrk1/1bq1pp2/p2p1n1Q/1pn2p1p/4P3/P1N2P2/BPP3PP/2KRR3 w - - bm g4; id \"arasan20.200\";\\n\" +\n     */\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/tests/enginetests/Arasan20.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/tests/enginetests/Arasan20.java	(date 1543670485000)
@@ -1,9 +1,9 @@
 package tests.enginetests;
 
-import javacode.chessengine.search.Engine;
-import javacode.chessprogram.chess.Move;
-import javacode.chessprogram.graphicsandui.Art;
-import javacode.chessprogram.miscAdmin.ExtendedPositionDescriptionParser;
+import com.github.louism33.axolotl.search.Engine;
+import old.chessprogram.chess.Move;
+import old.chessprogram.graphicsandui.Art;
+import old.chessprogram.miscAdmin.ExtendedPositionDescriptionParser;
 import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
Index: src/main/java/javacode/chessengine/evaluation/Knight.java
===================================================================
--- src/main/java/javacode/chessengine/evaluation/Knight.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/com/github/louism33/axolotl/evaluation/Knight.java	(date 1543682045000)
@@ -1,36 +1,33 @@
-package javacode.chessengine.evaluation;
+package com.github.louism33.axolotl.evaluation;
 
-import javacode.chessprogram.chess.BitManipulations;
-import javacode.chessprogram.chess.Chessboard;
-import javacode.chessprogram.moveGeneration.PieceMoveKnight;
+import com.github.louism33.chesscore.BitOperations;
+import com.github.louism33.chesscore.Chessboard;
+import com.github.louism33.chesscore.PieceMove;
 
 import java.util.List;
 
-import static javacode.chessengine.evaluation.EvaluationConstants.*;
-import static javacode.chessprogram.bitboards.BitBoards.*;
-import static javacode.chessprogram.chess.BitIndexing.getIndexOfAllPieces;
-import static javacode.chessprogram.chess.BitIndexing.populationCount;
-import static javacode.chessprogram.chess.BitManipulations.squareCentredOnIndexNaive;
-import static javacode.chessprogram.moveGeneration.PieceMoveKnight.singleKnightTable;
-import static javacode.chessprogram.moveGeneration.PieceMovePawns.masterPawnCapturesTable;
+import static com.github.louism33.axolotl.evaluation.EvaluationConstants.*;
+import static com.github.louism33.chesscore.BitOperations.*;
+import static com.github.louism33.chesscore.BitboardResources.*;
+import static com.github.louism33.chesscore.PieceMove.singleKnightTable;
 
 class Knight {
 
     static int evalKnightByTurn(Chessboard board, boolean white) {
-        long myKnights = white ? board.WHITE_KNIGHTS : board.BLACK_KNIGHTS;
+        long myKnights = white ? board.getWhiteKnights() : board.getBlackKnights();
 
         if (myKnights == 0) {
             return 0;
         }
 
-        long myPawns = white ? board.WHITE_PAWNS : board.BLACK_PAWNS;
-        long enemyPawns = white ? board.BLACK_PAWNS : board.WHITE_PAWNS;
+        long myPawns = white ? board.getWhitePawns() : board.getBlackPawns();
+        long enemyPawns = white ? board.getBlackPawns() : board.getWhitePawns();
 
         int score = 0;
 
         score += 
                 unDevelopedKnights(board, white, myKnights)
-                + knightOutpostBonus(board, white, myKnights, enemyPawns)
+                + knightOutpostBonus(board, white, myPawns, myKnights, enemyPawns)
                 + knightMobility(board, white, myKnights)
                 + knightProtectorAndAggressor(board, white, myKnights)
         ;
@@ -39,20 +36,20 @@
     }
 
     private static int unDevelopedKnights(Chessboard board, boolean white, long myKnights){
-        long originalKnights = white ? WHITE_KNIGHTS : BLACK_KNIGHTS;
+        long originalKnights = white ? board.getWhiteKnights() : board.getBlackKnights();
         return populationCount(originalKnights & myKnights)
                 * KNIGHT_UNDEVELOPED_PENALTY;
     }
 
     private static int knightMobility(Chessboard board, boolean white, long myKnights){
         List<Integer> indexOfAllPieces = getIndexOfAllPieces(myKnights);
-        long emptySquares = ~board.ALL_PIECES();
-        long enemies = white ? board.ALL_BLACK_PIECES() : board.ALL_WHITE_PIECES();
+        long emptySquares = ~board.allPieces();
+        long enemies = white ? board.blackPieces() : board.whitePieces();
 
         int mobilitySquares = 0;
         for (Integer knightIndex : indexOfAllPieces) {
-            long knight = BitManipulations.newPieceOnSquare(knightIndex);
-            long pseudoAvailableSquares = singleKnightTable(board, knight, white, emptySquares);
+            long knight = newPieceOnSquare(knightIndex);
+            long pseudoAvailableSquares = singleKnightTable(knight, emptySquares);
             mobilitySquares += populationCount(pseudoAvailableSquares);
         }
         return mobilitySquares * KNIGHT_MOBILITY_SCORE;
@@ -60,15 +57,15 @@
 
     private static int knightProtectorAndAggressor(Chessboard board, boolean white, long myKnights){
         List<Integer> indexOfAllPieces = getIndexOfAllPieces(myKnights);
-        long emptySquares = ~board.ALL_PIECES();
-        long myPieces = white ? board.ALL_WHITE_PIECES() : board.ALL_BLACK_PIECES();
-        long enemyPieces = white ? board.ALL_BLACK_PIECES() : board.ALL_WHITE_PIECES();
+        long emptySquares = ~board.allPieces();
+        long myPieces = white ? board.whitePieces() : board.blackPieces();
+        long enemyPieces = white ? board.blackPieces() : board.whitePieces();
 
         int protectedFriends = 0;
         int threatenedEnemies = 0;
         for (Integer knightIndex : indexOfAllPieces) {
-            long knight = BitManipulations.newPieceOnSquare(knightIndex);
-            long pseudoAttackedOrProtectedByKnight = PieceMoveKnight.singleKnightTable(board, knight, white, board.ALL_PIECES());
+            long knight = newPieceOnSquare(knightIndex);
+            long pseudoAttackedOrProtectedByKnight = singleKnightTable(knight, UNIVERSE);
 
             protectedFriends += populationCount(pseudoAttackedOrProtectedByKnight & myPieces);
             threatenedEnemies += populationCount(pseudoAttackedOrProtectedByKnight & enemyPieces);
@@ -77,18 +74,19 @@
                 + threatenedEnemies * KNIGHT_AGGRESSOR_SCORE;
     }
 
-    private static int knightOutpostBonus(Chessboard board, boolean white, long myKnights, long enemyPawns) {
+    private static int knightOutpostBonus(Chessboard board, boolean white, long myPawns, long myKnights, long enemyPawns) {
         int score = 0;
 
         List<Integer> indexOfAllPieces = getIndexOfAllPieces(myKnights);
-        for (Integer knightIndex : indexOfAllPieces) {
-            long knight = BitManipulations.newPieceOnSquare(knightIndex);
+        for (int i = 0; i < indexOfAllPieces.size(); i++) {
+            Integer knightIndex = indexOfAllPieces.get(i);
+            long knight = newPieceOnSquare(knightIndex);
             
             /*
             only consider outpost if they are in middle four ranks, and not on edges
              */
             if (((knight & noMansLand) == 0)
-                    && ((knight & boardWithoutEdges) == 0)){
+                    && ((knight & boardWithoutEdges) == 0)) {
                 continue;
             }
             
@@ -113,8 +111,8 @@
                 }
             }
 
-            long ignoreThesePieces = ~squareCentredOnIndexNaive(knightIndex);
-            long pawnDefendingKnight = masterPawnCapturesTable(board, white, ignoreThesePieces, knight);
+            long ignoreThesePieces = ~BitOperations.squareCentredOnIndex(knightIndex);
+            long pawnDefendingKnight = PieceMove.masterPawnCapturesTable(board, white, ignoreThesePieces, knight, myPawns);
             if (pawnDefendingKnight != 0) {
                 score += KNIGHT_OUTPOST_BONUS;
             }
Index: src/main/java/javacode/chessengine/evaluation/MaterialEval.java
===================================================================
--- src/main/java/javacode/chessengine/evaluation/MaterialEval.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/com/github/louism33/axolotl/evaluation/MaterialEval.java	(date 1543831493000)
@@ -1,47 +1,42 @@
-package javacode.chessengine.evaluation;
+package com.github.louism33.axolotl.evaluation;
 
-import javacode.chessprogram.chess.BitManipulations;
-import javacode.chessprogram.chess.Chessboard;
-import javacode.chessprogram.chess.Move;
-import javacode.chessprogram.moveMaking.MoveParser;
+import com.github.louism33.chesscore.BitOperations;
+import com.github.louism33.chesscore.Chessboard;
+import com.github.louism33.chesscore.MoveParser;
 
-import static javacode.chessengine.evaluation.EvaluationConstants.*;
-import static javacode.chessprogram.chess.BitIndexing.populationCount;
+import static com.github.louism33.axolotl.evaluation.EvaluationConstants.*;
+import static com.github.louism33.chesscore.BitOperations.populationCount;
 
 class MaterialEval {
 
-
-    public MaterialEval(Evaluator evaluator) {
-    }
-    
-    int getScoreOfDestinationPiece(Chessboard board, Move move){
-        long victim = BitManipulations.newPieceOnSquare(move.destinationIndex);
+    static int getScoreOfDestinationPiece(Chessboard board, int move){
+        long victim = BitOperations.newPieceOnSquare(MoveParser.getDestinationIndex(move));
         if (MoveParser.isPromotionToQueen(move)){
             return QUEEN_SCORE;
         }
-        if ((victim & board.WHITE_PAWNS) != 0 || (victim & board.BLACK_PAWNS) != 0){
+        if ((victim & board.getWhitePawns()) != 0 || (victim & board.getBlackPawns()) != 0){
             return PAWN_SCORE;
         }
-        if ((victim & board.WHITE_KNIGHTS) != 0 || (victim & board.BLACK_KNIGHTS) != 0){
+        if ((victim & board.getWhiteKnights()) != 0 || (victim & board.getBlackKnights()) != 0){
             return KNIGHT_SCORE;
         }
-        if ((victim & board.WHITE_BISHOPS) != 0 || (victim & board.BLACK_BISHOPS) != 0){
+        if ((victim & board.getWhiteBishops()) != 0 || (victim & board.getBlackBishops()) != 0){
             return BISHOP_SCORE;
         }
-        if ((victim & board.WHITE_ROOKS) != 0 || (victim & board.BLACK_ROOKS) != 0){
+        if ((victim & board.getWhiteRooks()) != 0 || (victim & board.getBlackRooks()) != 0){
             return ROOK_SCORE;
         }
-        if ((victim & board.WHITE_QUEEN) != 0 || (victim & board.BLACK_QUEEN) != 0){
+        if ((victim & board.getWhiteQueen()) != 0 || (victim & board.getBlackQueen()) != 0){
             return QUEEN_SCORE;
         }
-        if ((victim & board.WHITE_KING) != 0 || (victim & board.BLACK_KING) != 0){
+        if ((victim & board.getWhiteKing()) != 0 || (victim & board.getBlackKing()) != 0){
             System.out.println("Capture of king ???");
             return 0;
         }
         throw new RuntimeException("not a capture move");
     }
 
-    int evalMaterialByTurn(Chessboard board, boolean white){
+    static int evalMaterialByTurn(Chessboard board, boolean white){
         int score = 0;
         score += 
                 pawnScores(board, white)
@@ -55,38 +50,38 @@
         return score;
     }
     
-    private int pawnScores(Chessboard board, boolean white){
-        long myPieces = white ? board.WHITE_PAWNS : board.BLACK_PAWNS;
+    private static int pawnScores(Chessboard board, boolean white){
+        long myPieces = white ? board.getWhitePawns() : board.getBlackPawns();
         int numberOfPawns = populationCount(myPieces);
         return numberOfPawns * PAWN_SCORE;
     }
 
-    private int knightScores(Chessboard board, boolean white){
-        long myPieces = white ? board.WHITE_KNIGHTS : board.BLACK_KNIGHTS;
+    private static int knightScores(Chessboard board, boolean white){
+        long myPieces = white ? board.getWhiteKnights() : board.getBlackKnights();
         int numberOfKnights = populationCount(myPieces);
         return numberOfKnights * KNIGHT_SCORE;
     }
 
-    private int bishopScores(Chessboard board, boolean white){
-        long myPieces = white ? board.WHITE_BISHOPS : board.BLACK_BISHOPS;
+    private static int bishopScores(Chessboard board, boolean white){
+        long myPieces = white ? board.getWhiteBishops() : board.getBlackBishops();
         int numberOfBishops = populationCount(myPieces);
         return numberOfBishops * BISHOP_SCORE;
     }
 
-    private int rookScores(Chessboard board, boolean white){
-        long myPieces = white ? board.WHITE_ROOKS : board.BLACK_ROOKS;
+    private static int rookScores(Chessboard board, boolean white){
+        long myPieces = white ? board.getWhiteRooks() : board.getBlackRooks();
         int numberOfRooks = populationCount(myPieces);
         return numberOfRooks * ROOK_SCORE;
     }
 
-    private int queenScores(Chessboard board, boolean white){
-        long myPieces = white ? board.WHITE_QUEEN : board.BLACK_QUEEN;
+    private static int queenScores(Chessboard board, boolean white){
+        long myPieces = white ? board.getWhiteQueen() : board.getBlackQueen();
         int numberOfQueens = populationCount(myPieces);
         return numberOfQueens * QUEEN_SCORE;
     }
 
-    private int kingScores(Chessboard board, boolean white){
-        long myPieces = white ? board.WHITE_KING : board.BLACK_KING;
+    private static int kingScores(Chessboard board, boolean white){
+        long myPieces = white ? board.getWhiteKing() : board.getBlackKing();
         int numberOfKings = populationCount(myPieces);
         return numberOfKings * KING_SCORE;
     }
Index: src/main/java/javacode/chessengine/evaluation/King.java
===================================================================
--- src/main/java/javacode/chessengine/evaluation/King.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/com/github/louism33/axolotl/evaluation/King.java	(date 1543682231000)
@@ -1,26 +1,26 @@
-package javacode.chessengine.evaluation;
+package com.github.louism33.axolotl.evaluation;
 
-import javacode.chessprogram.chess.BitManipulations;
-import javacode.chessprogram.chess.Chessboard;
+import com.github.louism33.chesscore.BitOperations;
+import com.github.louism33.chesscore.Chessboard;
+import com.github.louism33.chesscore.PieceMove;
 import org.junit.Assert;
 
 import java.util.List;
 
-import static javacode.chessengine.evaluation.EvaluationConstants.KING_AGGRESSOR_SCORE;
-import static javacode.chessengine.evaluation.EvaluationConstants.KING_PROTECTOR_SCORE;
-import static javacode.chessprogram.chess.BitIndexing.getIndexOfAllPieces;
-import static javacode.chessprogram.chess.BitIndexing.populationCount;
-import static javacode.chessprogram.moveGeneration.PieceMoveKing.singleKingCaptures;
+import static com.github.louism33.axolotl.evaluation.EvaluationConstants.KING_AGGRESSOR_SCORE;
+import static com.github.louism33.axolotl.evaluation.EvaluationConstants.KING_PROTECTOR_SCORE;
+import static com.github.louism33.chesscore.BitOperations.getIndexOfAllPieces;
+import static com.github.louism33.chesscore.BitOperations.populationCount;
 
 class King {
 
     static int evalKingByTurn(Chessboard board, boolean white) {
-        long myKing = white ? board.WHITE_KING : board.BLACK_KING;
+        long myKing = white ? board.getWhiteKing() : board.getBlackKing();
 
         Assert.assertEquals(1, populationCount(myKing));
 
-        long myPawns = white ? board.WHITE_PAWNS : board.BLACK_PAWNS;
-        long enemyPawns = white ? board.BLACK_PAWNS : board.WHITE_PAWNS;
+        long myPawns = white ? board.getWhitePawns() : board.getBlackPawns();
+        long enemyPawns = white ? board.getBlackPawns() : board.getWhitePawns();
 
         int score = 0;
 
@@ -38,15 +38,15 @@
 
     private static int kingProtectorAndAggressor(Chessboard board, boolean white, long myKing){
         List<Integer> indexOfAllPieces = getIndexOfAllPieces(myKing);
-        long emptySquares = ~board.ALL_PIECES();
-        long myPieces = white ? board.ALL_WHITE_PIECES() : board.ALL_BLACK_PIECES();
-        long enemyPieces = white ? board.ALL_BLACK_PIECES() : board.ALL_WHITE_PIECES();
+        long emptySquares = ~board.allPieces();
+        long myPieces = white ? board.whitePieces() : board.blackPieces();
+        long enemyPieces = white ? board.blackPieces() : board.whitePieces();
 
         int protectedFriends = 0;
         int threatenedEnemies = 0;
         for (Integer kingIndex : indexOfAllPieces) {
-            long king = BitManipulations.newPieceOnSquare(kingIndex);
-            long pseudoAttackedOrProtectedByKing = singleKingCaptures(board, king, white, board.ALL_PIECES());
+            long king = BitOperations.newPieceOnSquare(kingIndex);
+            long pseudoAttackedOrProtectedByKing = PieceMove.singleKingTable(king, board.allPieces());
             
             protectedFriends += populationCount(pseudoAttackedOrProtectedByKing & myPieces);
             threatenedEnemies += populationCount(pseudoAttackedOrProtectedByKing & enemyPieces);
Index: src/main/java/javacode/chessengine/evaluation/Bishop.java
===================================================================
--- src/main/java/javacode/chessengine/evaluation/Bishop.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/com/github/louism33/axolotl/evaluation/Bishop.java	(date 1543682045000)
@@ -1,27 +1,21 @@
-package javacode.chessengine.evaluation;
+package com.github.louism33.axolotl.evaluation;
 
-import javacode.chessprogram.chess.BitIndexing;
-import javacode.chessprogram.chess.BitManipulations;
-import javacode.chessprogram.chess.Chessboard;
+import com.github.louism33.chesscore.BitOperations;
+import com.github.louism33.chesscore.Chessboard;
+import com.github.louism33.chesscore.PieceMove;
 
 import java.util.List;
 
-import static javacode.chessengine.evaluation.EvaluationConstants.*;
-import static javacode.chessprogram.bitboards.BitBoards.*;
-import static javacode.chessprogram.chess.BitIndexing.getIndexOfAllPieces;
-import static javacode.chessprogram.chess.BitIndexing.populationCount;
-import static javacode.chessprogram.chess.BitManipulations.newPieceOnSquare;
-import static javacode.chessprogram.chess.BitManipulations.squareCentredOnIndexNaive;
-import static javacode.chessprogram.moveGeneration.PieceMovePawns.masterPawnCapturesTable;
-import static javacode.chessprogram.moveGeneration.PieceMoveSliding.singleBishopCaptures;
-import static javacode.chessprogram.moveGeneration.PieceMoveSliding.singleBishopPushes;
+import static com.github.louism33.axolotl.evaluation.EvaluationConstants.*;
+import static com.github.louism33.chesscore.BitOperations.*;
+import static com.github.louism33.chesscore.BitboardResources.*;
 
 class Bishop {
 
     static int evalBishopByTurn(Chessboard board, boolean white){
-        long myBishops = white ? board.WHITE_BISHOPS : board.BLACK_BISHOPS;
-        long myPawns = white ? board.WHITE_PAWNS : board.BLACK_PAWNS;
-        long enemyPawns = white ? board.BLACK_PAWNS : board.WHITE_PAWNS;
+        long myBishops = white ? board.getWhiteBishops() : board.getBlackBishops();
+        long myPawns = white ? board.getWhitePawns() : board.getBlackPawns();
+        long enemyPawns = white ? board.getBlackPawns() : board.getWhitePawns();
 
         if (myBishops == 0){
             return 0;
@@ -29,8 +23,8 @@
 
         int score = 0;
         if (populationCount(myBishops) == 1){
-            long bishopSquares = ((WHITE_SQUARES & myBishops) != 0) ?
-                    WHITE_SQUARES : BLACK_SQUARES;
+            long bishopSquares = ((WHITE_COLOURED_SQUARES & myBishops) != 0) ?
+                    WHITE_COLOURED_SQUARES : BLACK_COLOURED_SQUARES;
 
             score += bishopEnemyPawnColourScore(myBishops, enemyPawns, bishopSquares)
                     + bishopFriendlyPawnColourScore(board, white, myBishops, myPawns, bishopSquares)
@@ -49,8 +43,8 @@
     }
 
     private static int unDevelopedBishops(Chessboard board, boolean white, long myBishops){
-        long originalBishops = white ? WHITE_BISHOPS : BLACK_BISHOPS;
-        return BitIndexing.populationCount(originalBishops & myBishops)
+        long originalBishops = white ? board.getWhiteBishops() : board.getBlackBishops();
+        return BitOperations.populationCount(originalBishops & myBishops)
                 * BISHOP_UNDEVELOPED_PENALTY;
     }
 
@@ -60,13 +54,13 @@
 
     private static int bishopMobility(Chessboard board, boolean white, long myBishops){
         List<Integer> indexOfAllPieces = getIndexOfAllPieces(myBishops);
-        long emptySquares = ~board.ALL_PIECES();
-        long enemies = white ? board.ALL_BLACK_PIECES() : board.ALL_WHITE_PIECES();
+        long emptySquares = ~board.allPieces();
+        long enemies = white ? board.blackPieces() : board.whitePieces();
 
         int mobilitySquares = 0;
         for (Integer bishopIndex : indexOfAllPieces) {
-            long bishop = BitManipulations.newPieceOnSquare(bishopIndex);
-            long pseudoAvailableSquares = singleBishopPushes(board, bishop, white, emptySquares);
+            long bishop = newPieceOnSquare(bishopIndex);
+            long pseudoAvailableSquares = PieceMove.singleBishopTable(board.allPieces(), white, bishop, emptySquares);
             mobilitySquares += populationCount(pseudoAvailableSquares);
         }
         return mobilitySquares * BISHOP_MOBILITY_SCORE;
@@ -74,15 +68,15 @@
 
     private static int bishopProtectorAndAggressor(Chessboard board, boolean white, long myBishops){
         List<Integer> indexOfAllPieces = getIndexOfAllPieces(myBishops);
-        long emptySquares = ~board.ALL_PIECES();
-        long myPieces = white ? board.ALL_WHITE_PIECES() : board.ALL_BLACK_PIECES();
-        long enemyPieces = white ? board.ALL_BLACK_PIECES() : board.ALL_WHITE_PIECES();
+        long emptySquares = ~board.allPieces();
+        long myPieces = white ? board.whitePieces() : board.blackPieces();
+        long enemyPieces = white ? board.blackPieces() : board.whitePieces();
 
         int protectedFriends = 0;
         int threatenedEnemies = 0;
         for (Integer bishopIndex : indexOfAllPieces) {
-            long bishop = BitManipulations.newPieceOnSquare(bishopIndex);
-            long pseudoAttackedOrProtectedByBishop = singleBishopCaptures(board, bishop, white, board.ALL_PIECES());
+            long bishop = newPieceOnSquare(bishopIndex);
+            long pseudoAttackedOrProtectedByBishop = PieceMove.singleBishopTable(board.allPieces(), white, bishop, board.allPieces());
 
             protectedFriends += populationCount(pseudoAttackedOrProtectedByBishop & myPieces);
             threatenedEnemies += populationCount(pseudoAttackedOrProtectedByBishop & enemyPieces);
@@ -95,14 +89,15 @@
         int score = 0;
 
         List<Integer> indexOfAllPieces = getIndexOfAllPieces(myBishops);
-        for (Integer bishopIndex : indexOfAllPieces) {
+        for (int i = 0; i < indexOfAllPieces.size(); i++) {
+            Integer bishopIndex = indexOfAllPieces.get(i);
             long bishop = newPieceOnSquare(bishopIndex);
             
             /*
             only consider outpost if they are in middle four ranks, and not on edges
              */
             if (((bishop & noMansLand) == 0)
-                    && ((bishop & boardWithoutEdges) == 0)){
+                    && ((bishop & boardWithoutEdges) == 0)) {
                 continue;
             }
             
@@ -127,8 +122,9 @@
                 }
             }
 
-            long ignoreThesePieces = ~squareCentredOnIndexNaive(bishopIndex);
-            long pawnDefendingBishop = masterPawnCapturesTable(board, white, ignoreThesePieces, bishop);
+            long ignoreThesePieces = ~BitOperations.squareCentredOnIndex(bishopIndex);
+            long pawnDefendingBishop = PieceMove.masterPawnCapturesTable(board, white, ignoreThesePieces, 
+                    white ? board.getWhitePawns() : board.getBlackPawns(), bishop);
             if (pawnDefendingBishop != 0) {
                 score += BISHOP_OUTPOST_BONUS;
             }
@@ -173,10 +169,10 @@
         rough guide to whether I am ahead or not
          */
         if (white){
-            return populationCount(board.ALL_WHITE_PIECES()) > board.ALL_BLACK_PIECES() + 3;
+            return populationCount(board.whitePieces()) > board.blackPieces() + 3;
         }
         else {
-            return populationCount(board.ALL_BLACK_PIECES()) > board.ALL_WHITE_PIECES() + 3;
+            return populationCount(board.blackPieces()) > board.whitePieces() + 3;
         }
     }
 
Index: src/main/java/javacode/chessengine/search/Razoring.java
===================================================================
--- src/main/java/javacode/chessengine/search/Razoring.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/com/github/louism33/axolotl/search/Razoring.java	(date 1543832498000)
@@ -1,16 +1,16 @@
-package javacode.chessengine.search;
+package com.github.louism33.axolotl.search;
 
-import javacode.chessengine.evaluation.Evaluator;
-import javacode.chessprogram.chess.Chessboard;
+import com.github.louism33.axolotl.evaluation.Evaluator;
+import com.github.louism33.chesscore.Chessboard;
 
-import static javacode.chessengine.evaluation.EvaluationConstants.CHECKMATE_ENEMY_SCORE_MAX_PLY;
+import static com.github.louism33.axolotl.evaluation.EvaluationConstants.CHECKMATE_ENEMY_SCORE_MAX_PLY;
 
 class Razoring {
     
     public static final int[] alphaRazorMargin = {0, 300, 500, 650}; 
     private static final int alphaRazorBelowThisDepth = alphaRazorMargin.length;
 
-    static boolean isAlphaRazoringMoveOkHere(Chessboard board, Evaluator evaluator, int depth, int alpha){
+    static boolean isAlphaRazoringMoveOkHere(Chessboard board, int depth, int alpha){
         return depth < alphaRazorBelowThisDepth
                 && alpha < CHECKMATE_ENEMY_SCORE_MAX_PLY
                 ;
@@ -19,7 +19,7 @@
     public static final int[] betaRazorMargin = {0, 150, 250, 350, 450, 650, 750};
     private static final int betaRazorBelowThisDepth = betaRazorMargin.length;
     
-    static boolean isBetaRazoringMoveOkHere(Chessboard board, Evaluator evaluator, int depth, int staticBoardEval){
+    static boolean isBetaRazoringMoveOkHere(Chessboard board, int depth, int staticBoardEval){
         return depth < betaRazorBelowThisDepth
                 && staticBoardEval < CHECKMATE_ENEMY_SCORE_MAX_PLY
                 ;
Index: src/main/java/javacode/chessengine/transpositiontable/TranspositionTable.java
===================================================================
--- src/main/java/javacode/chessengine/transpositiontable/TranspositionTable.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/com/github/louism33/axolotl/transpositiontable/TranspositionTable.java	(date 1543675194000)
@@ -1,18 +1,16 @@
-package javacode.chessengine.transpositiontable;
-
-import javacode.chessprogram.chess.Move;
+package com.github.louism33.axolotl.transpositiontable;
 
 import java.util.HashMap;
 
-import static javacode.chessengine.evaluation.EvaluationConstants.CHECKMATE_ENEMY_SCORE_MAX_PLY;
-import static javacode.chessengine.evaluation.EvaluationConstants.IN_CHECKMATE_SCORE_MAX_PLY;
+import static com.github.louism33.axolotl.evaluation.EvaluationConstants.CHECKMATE_ENEMY_SCORE_MAX_PLY;
+import static com.github.louism33.axolotl.evaluation.EvaluationConstants.IN_CHECKMATE_SCORE_MAX_PLY;
 
 public class TranspositionTable extends HashMap<Long, TranspositionTable.TableObject> {
 
     public TranspositionTable(){}
     
     public static class TableObject {
-        private final Move move;
+        private final int move;
         private final int score;
         private final int depth;
         private final Flag flag;
@@ -21,14 +19,14 @@
                 EXACT, LOWERBOUND, UPPERBOUND
         }
 
-        public TableObject(Move move, int score, int depth, Flag flag) {
+        public TableObject(int move, int score, int depth, Flag flag) {
             this.move = move;
             this.score = score;
             this.depth = depth;
             this.flag = flag;
         }
 
-        public Move getMove() {
+        public int getMove() {
             return move;
         }
 
Index: src/main/java/javacode/chessengine/search/AspirationSearch.java
===================================================================
--- src/main/java/javacode/chessengine/search/AspirationSearch.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/com/github/louism33/axolotl/search/AspirationSearch.java	(date 1543832532000)
@@ -1,33 +1,24 @@
-package javacode.chessengine.search;
+package com.github.louism33.axolotl.search;
 
-import javacode.chessengine.evaluation.Evaluator;
-import javacode.chessengine.timemanagement.TimeAllocator;
-import javacode.chessengine.transpositiontable.ZobristHash;
-import javacode.chessprogram.chess.Chessboard;
-import javacode.chessprogram.chess.Move;
+import com.github.louism33.axolotl.evaluation.Evaluator;
+import com.github.louism33.axolotl.timemanagement.TimeAllocator;
+import com.github.louism33.chesscore.Chessboard;
+import com.github.louism33.chesscore.IllegalUnmakeException;
 
-import static javacode.chessengine.evaluation.EvaluationConstants.*;
+import static com.github.louism33.axolotl.evaluation.EvaluationConstants.*;
 
 class AspirationSearch {
 
-    private final Engine engine;
-    final PrincipleVariationSearch principleVariationSearch;
-
-    AspirationSearch(Engine engine, Evaluator evaluator){
-        this.engine = engine;
-        this.principleVariationSearch = new PrincipleVariationSearch(engine, evaluator);
+    private static boolean stopSearch(boolean outOfTime){
+        return Engine.isStopInstruction()
+                || (Engine.getEngineSpecifications().ALLOW_TIME_LIMIT && outOfTime);
     }
 
-    private boolean stopSearch(boolean outOfTime){
-        return this.engine.isStopInstruction()
-                || (this.engine.getEngineSpecifications().ALLOW_TIME_LIMIT && outOfTime);
-    }
-
-    int aspirationSearch(Chessboard board, long startTime, long timeLimitMillis,
-                         ZobristHash zobristHash, int depth, int aspirationScore){
+    static int aspirationSearch(Chessboard board, long startTime, long timeLimitMillis,
+                         int depth, int aspirationScore) throws IllegalUnmakeException {
 
         int firstWindow = 100, alpha, beta, alphaFac = 2, betaFac = 2;
-        if (this.engine.getEngineSpecifications().ALLOW_ASPIRATION_WINDOWS) {
+        if (Engine.getEngineSpecifications().ALLOW_ASPIRATION_WINDOWS) {
             firstWindow = 100;
             alpha = aspirationScore - firstWindow;
             beta = aspirationScore + firstWindow;
@@ -46,7 +37,7 @@
             Aspiration Search:
             call main search function with artificially small windows, hoping for more cutoffs
              */
-            score = this.principleVariationSearch.principleVariationSearch(board, zobristHash,
+            score = PrincipleVariationSearch.principleVariationSearch(board,
                     startTime, timeLimitMillis,
                     depth, depth, 0, alpha, beta, 0, false);
 
@@ -54,7 +45,7 @@
                 return score;
             }
 
-            if (TimeAllocator.outOfTime(engine, startTime, timeLimitMillis)) {
+            if (TimeAllocator.outOfTime(startTime, timeLimitMillis)) {
                 outOfTime = true;
             }
             
@@ -62,23 +53,23 @@
             Aspiration Search Miss:
             if score outside of window, widen window and increase speed of widening
              */
-            if (this.engine.getEngineSpecifications().ALLOW_ASPIRATION_WINDOWS) {
+            if (Engine.getEngineSpecifications().ALLOW_ASPIRATION_WINDOWS) {
                 if (score <= alpha) {
                     alpha = -firstWindow * alphaFac;
                     if (alphaFac >= 4){
                         alpha = SHORT_MINIMUM;
                     }
                     alphaFac *= 2;
-                    this.engine.statistics.numberOfFailedAspirations++;
+                    Engine.statistics.numberOfFailedAspirations++;
                 } else if (score >= beta) {
                     beta = firstWindow * betaFac;
                     if (betaFac >= 4){
                         beta = SHORT_MAXIMUM;
                     }
                     betaFac *= 2;
-                    this.engine.statistics.numberOfFailedAspirations++;
+                    Engine.statistics.numberOfFailedAspirations++;
                 } else {
-                    this.engine.statistics.numberOfSuccessfulAspirations++;
+                    Engine.statistics.numberOfSuccessfulAspirations++;
 
                     break;
                 }
@@ -90,8 +81,8 @@
         return score;
     }
 
-    Move getAiMove() {
-        return this.principleVariationSearch.getAiMove();
+    static int getAiMove() {
+        return PrincipleVariationSearch.getAiMove();
     }
 
 }
Index: src/main/java/javacode/chessengine/search/IterativeDeepeningDFS.java
===================================================================
--- src/main/java/javacode/chessengine/search/IterativeDeepeningDFS.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/com/github/louism33/axolotl/search/IterativeDeepeningDFS.java	(date 1543832505000)
@@ -1,35 +1,23 @@
-package javacode.chessengine.search;
+package com.github.louism33.axolotl.search;
 
-import javacode.chessengine.evaluation.Evaluator;
-import javacode.chessengine.protocolhelperclasses.PVLine;
-import javacode.chessengine.protocolhelperclasses.UCIPrinter;
-import javacode.chessengine.transpositiontable.ZobristHash;
-import javacode.chessprogram.chess.Chessboard;
-import javacode.chessprogram.chess.Move;
+import com.github.louism33.axolotl.evaluation.Evaluator;
+import com.github.louism33.axolotl.protocolhelperclasses.PVLine;
+import com.github.louism33.axolotl.protocolhelperclasses.UCIPrinter;
+import com.github.louism33.chesscore.Chessboard;
+import com.github.louism33.chesscore.IllegalUnmakeException;
 
-import static javacode.chessengine.evaluation.EvaluationConstants.*;
-import static javacode.chessengine.timemanagement.TimeAllocator.outOfTime;
+import static com.github.louism33.axolotl.evaluation.EvaluationConstants.*;
+import static com.github.louism33.axolotl.timemanagement.TimeAllocator.outOfTime;
 
 class IterativeDeepeningDFS {
 
-    private final Engine engine;
-    final AspirationSearch aspirationSearch;
-    private final UCIPrinter uciPrinter;
-
-    IterativeDeepeningDFS(Engine engine){
-        this.engine = engine;
-        Evaluator evaluator = new Evaluator(engine);
-        this.aspirationSearch = new AspirationSearch(engine, evaluator);
-        this.uciPrinter = new UCIPrinter(this.engine.getUciEntry(), this.engine);
+    private static boolean stopSearch(boolean outOfTime, int depth, int maxDepth){
+        return Engine.isStopInstruction()
+                || (Engine.getEngineSpecifications().ALLOW_TIME_LIMIT && outOfTime)
+                || (!Engine.getEngineSpecifications().ALLOW_TIME_LIMIT && (depth > maxDepth));
     }
 
-    private boolean stopSearch(boolean outOfTime, int depth, int maxDepth){
-        return this.engine.isStopInstruction()
-                || (this.engine.getEngineSpecifications().ALLOW_TIME_LIMIT && outOfTime)
-                || (!this.engine.getEngineSpecifications().ALLOW_TIME_LIMIT && (depth > maxDepth));
-    }
-
-    Move iterativeDeepeningWithAspirationWindows(Chessboard board, ZobristHash zobristHash, long startTime, long timeLimitMillis){
+    static int iterativeDeepeningWithAspirationWindows(Chessboard board, long startTime, long timeLimitMillis) throws IllegalUnmakeException {
         int aspirationScore = 0;
         int depth = 0;
         boolean outOfTime = false;
@@ -38,20 +26,20 @@
         Iterative Deepening Depth First Search:
         call searchMyTime function at increasing depths, the data we get from lower depths is easily worth it
          */
-        while (!stopSearch(outOfTime, depth, this.engine.MAX_DEPTH)){
+        while (!stopSearch(outOfTime, depth, Engine.MAX_DEPTH)){
 
-            int score = this.aspirationSearch.aspirationSearch(board, startTime, timeLimitMillis, zobristHash, depth, aspirationScore);
+            int score = AspirationSearch.aspirationSearch(board, startTime, timeLimitMillis, depth, aspirationScore);
 
             // send various info through UCI protocol
             long timeTaken = System.currentTimeMillis() - startTime;
-            PVLine pvLine = PVLine.retrievePVfromTable(board, this.aspirationSearch.principleVariationSearch.table);
+            PVLine pvLine = PVLine.retrievePVfromTable(board, PrincipleVariationSearch.table);
 
             if (score >= CHECKMATE_ENEMY_SCORE_MAX_PLY) {
                 /*
                 stop search when a checkmate has been found, however far away
                  */
                 int distanceToCheckmate = CHECKMATE_ENEMY_SCORE - score;
-                this.uciPrinter.acceptPVLine(pvLine, depth, true, distanceToCheckmate, timeTaken);
+                UCIPrinter.acceptPVLine(pvLine, depth, true, distanceToCheckmate, timeTaken);
 
                 break;
 
@@ -59,15 +47,15 @@
                 /*
                 if we are certain to lose, don't search any further
                  */
-                this.uciPrinter.acceptPVLine(pvLine, depth, false, 0, timeTaken);
+                UCIPrinter.acceptPVLine(pvLine, depth, false, 0, timeTaken);
 
                 break;
             }
             else {
-                this.uciPrinter.acceptPVLine(pvLine, depth, false, 0, timeTaken);
+                UCIPrinter.acceptPVLine(pvLine, depth, false, 0, timeTaken);
             }
 
-            if (outOfTime(engine, startTime, timeLimitMillis)) {
+            if (outOfTime(startTime, timeLimitMillis)) {
                 outOfTime = true;
             }
 
@@ -77,8 +65,8 @@
         return getAiMove();
     }
 
-    private Move getAiMove() {
-        return this.aspirationSearch.getAiMove();
+    private static int getAiMove() {
+        return AspirationSearch.getAiMove();
     }
 
 }
Index: src/main/java/javacode/chessengine/search/NullMovePruning.java
===================================================================
--- src/main/java/javacode/chessengine/search/NullMovePruning.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/com/github/louism33/axolotl/search/NullMovePruning.java	(date 1543683316000)
@@ -1,7 +1,8 @@
-package javacode.chessengine.search;
+package com.github.louism33.axolotl.search;
 
-import javacode.chessprogram.chess.BitIndexing;
-import javacode.chessprogram.chess.Chessboard;
+import com.github.louism33.chesscore.Chessboard;
+
+import static com.github.louism33.chesscore.BitOperations.populationCount;
 
 class NullMovePruning {
     
@@ -20,38 +21,38 @@
     }
 
     public static boolean maybeInEndgame(Chessboard board){
-        return BitIndexing.populationCount(board.ALL_PIECES()) < 9;
+        return populationCount(board.allPieces()) < 9;
     }
 
     static boolean maybeInZugzwang(Chessboard board, boolean white){
         // returns true if you are down to Pawns and King (+1 extra piece)
         long myPawns, myKing, allMyPieces;
         if (white){
-            allMyPieces = board.ALL_WHITE_PIECES();
-            myPawns = board.WHITE_PAWNS;
-            myKing = board.WHITE_KING;
+            allMyPieces = board.whitePieces();
+            myPawns = board.getWhitePawns();
+            myKing = board.getWhiteKing();
         }
         else {
-            allMyPieces = board.ALL_BLACK_PIECES();
-            myPawns = board.BLACK_PAWNS;
-            myKing = board.BLACK_KING;
+            allMyPieces = board.blackPieces();
+            myPawns = board.getBlackPawns();
+            myKing = board.getBlackKing();
         }
-        return BitIndexing.populationCount(allMyPieces ^ (myPawns | myKing)) <= 1;
+        return populationCount(allMyPieces ^ (myPawns | myKing)) <= 1;
     }
 
     public static boolean onlyPawnsLeftForPlayer(Chessboard board, boolean white){
         long myPawns, myKing, allMyPieces;
         if (white){
-            allMyPieces = board.ALL_WHITE_PIECES();
-            myPawns = board.WHITE_PAWNS;
-            myKing = board.WHITE_KING;
+            allMyPieces = board.whitePieces();
+            myPawns = board.getWhitePawns();
+            myKing = board.getWhiteKing();
         }
         else {
-            allMyPieces = board.ALL_BLACK_PIECES();
-            myPawns = board.BLACK_PAWNS;
-            myKing = board.BLACK_KING;
+            allMyPieces = board.blackPieces();
+            myPawns = board.getBlackPawns();
+            myKing = board.getBlackKing();
         }
-        return BitIndexing.populationCount(allMyPieces ^ (myPawns | myKing)) == 0;
+        return populationCount(allMyPieces ^ (myPawns | myKing)) == 0;
     }
     
     
Index: src/main/java/javacode/chessengine/search/SEEPruning.java
===================================================================
--- src/main/java/javacode/chessengine/search/SEEPruning.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/com/github/louism33/axolotl/search/SEEPruning.java	(date 1543832342000)
@@ -1,51 +1,45 @@
-package javacode.chessengine.search;
+package com.github.louism33.axolotl.search;
 
-import javacode.chessengine.evaluation.Evaluator;
-import javacode.chessprogram.chess.Chessboard;
-import javacode.chessprogram.chess.Move;
-import javacode.chessprogram.moveGeneration.PieceMoveKing;
-import javacode.chessprogram.moveGeneration.PieceMoveKnight;
-import javacode.chessprogram.moveGeneration.PieceMovePawns;
-import javacode.chessprogram.moveGeneration.PieceMoveSliding;
+import com.github.louism33.axolotl.evaluation.Evaluator;
+import com.github.louism33.chesscore.Chessboard;
+import com.github.louism33.chesscore.MoveParser;
+import com.github.louism33.chesscore.Piece;
+import com.github.louism33.chesscore.PieceMove;
 
 import java.util.ArrayList;
 import java.util.List;
 
-import static javacode.chessengine.evaluation.EvaluationConstants.*;
-import static javacode.chessprogram.chess.BitIndexing.populationCount;
-import static javacode.chessprogram.chess.BitManipulations.newPieceOnSquare;
+import static com.github.louism33.axolotl.evaluation.EvaluationConstants.*;
+import static com.github.louism33.chesscore.BitOperations.newPieceOnSquare;
+import static com.github.louism33.chesscore.BitOperations.populationCount;
+import static com.github.louism33.chesscore.Piece.*;
 
 public class SEEPruning {
-
-    enum Piece {
-        WHITE_PAWN, WHITE_KNIGHT, WHITE_BISHOP, WHITE_ROOK, WHITE_QUEEN, WHITE_KING,
-        BLACK_PAWN, BLACK_KNIGHT, BLACK_BISHOP, BLACK_ROOK, BLACK_QUEEN, BLACK_KING
-    }
-
-    static int seeScore(Chessboard board, Move move, Evaluator evaluator){
-        long destinationSquare = newPieceOnSquare(move.destinationIndex);
+    
+    static int seeScore(Chessboard board, int move){
+        long destinationSquare = newPieceOnSquare(MoveParser.getDestinationIndex(move));
         boolean iAmWhite = board.isWhiteTurn();
         List<Piece> myPieces = myPiecesThatThreatenSquare(board, iAmWhite, destinationSquare);
         List<Piece> enemyPieces = myPiecesThatThreatenSquare(board, !iAmWhite, destinationSquare);
 
         if (enemyPieces.size() > 0) {
-            return seeHelper(board, evaluator, move, myPieces, enemyPieces, destinationSquare);
+            return seeHelper(board, move, myPieces, enemyPieces, destinationSquare);
         }
         
-        return evaluator.getScoreOfDestinationPiece(board, move);
+        return Evaluator.getScoreOfDestinationPiece(board, move);
     }
     
-    private static int seeHelper(Chessboard board, Evaluator evaluator, Move move,
+    private static int seeHelper(Chessboard board, int move,
                                  List<Piece> myPieces, List<Piece> enemyPieces, long destinationSquare){
  
-        int seeScore = evaluator.getScoreOfDestinationPiece(board, move);
+        int seeScore = Evaluator.getScoreOfDestinationPiece(board, move);
         int totalFriends = myPieces.size();
         int myPiece = 0;
         int totalEnemies = enemyPieces.size();
         int enemyPiece = 0;
         
         while (true){
-            seeScore -= scoreByPiece(evaluator, myPieces.get(myPiece));
+            seeScore -= scoreByPiece(myPieces.get(myPiece));
             if (seeScore < 0){
                 return seeScore;
             } 
@@ -53,7 +47,7 @@
             if (totalFriends - myPiece == 0){
                 return seeScore;
             }
-            seeScore += scoreByPiece(evaluator, enemyPieces.get(enemyPiece));
+            seeScore += scoreByPiece(enemyPieces.get(enemyPiece));
             enemyPiece++;
             if (totalEnemies - enemyPiece == 0){
                 return seeScore;
@@ -61,7 +55,7 @@
         }
     }
 
-    private static int scoreByPiece(Evaluator evaluator, Piece piece){
+    private static int scoreByPiece(Piece piece){
         if (piece.equals(Piece.BLACK_PAWN) || piece.equals(Piece.WHITE_PAWN)){
             return PAWN_SCORE;
         }
@@ -74,10 +68,10 @@
         if (piece.equals(Piece.BLACK_ROOK) || piece.equals(Piece.WHITE_ROOK)){
             return ROOK_SCORE;
         }
-        if (piece.equals(Piece.BLACK_QUEEN) || piece.equals(Piece.WHITE_QUEEN)){
+        if (piece.equals(BLACK_QUEEN) || piece.equals(WHITE_QUEEN)){
             return QUEEN_SCORE;
         }
-        if (piece.equals(Piece.BLACK_KING) || piece.equals(Piece.WHITE_KING)){
+        if (piece.equals(BLACK_KING) || piece.equals(WHITE_KING)){
             return KING_SCORE;
         }
         throw new RuntimeException("piece problem");
@@ -89,12 +83,12 @@
         long pawns, knights, bishops, rooks, queens, king;
         Piece p, n, b, r, q, k;
         if (myColour){
-            pawns = board.WHITE_PAWNS;
-            knights = board.WHITE_KNIGHTS;
-            bishops = board.WHITE_BISHOPS;
-            rooks = board.WHITE_ROOKS;
-            queens = board.WHITE_QUEEN;
-            king = board.WHITE_KING;
+            pawns = board.getWhitePawns();
+            knights = board.getWhiteKnights();
+            bishops = board.getWhiteBishops();
+            rooks = board.getWhiteRooks();
+            queens = board.getWhiteQueen();
+            king = board.getWhiteKing();
             
             p = Piece.WHITE_PAWN;
             n = Piece.WHITE_KNIGHT;
@@ -104,12 +98,12 @@
             k = Piece.WHITE_KING;
         }
         else {
-            pawns = board.BLACK_PAWNS;
-            knights = board.BLACK_KNIGHTS;
-            bishops = board.BLACK_BISHOPS;
-            rooks = board.BLACK_ROOKS;
-            queens = board.BLACK_QUEEN;
-            king = board.BLACK_KING;
+            pawns = board.getBlackPawns();
+            knights = board.getBlackKnights();
+            bishops = board.getBlackBishops();
+            rooks = board.getBlackRooks();
+            queens = board.getBlackQueen();
+            king = board.getBlackKing();
 
             p = Piece.BLACK_PAWN;
             n = Piece.BLACK_KNIGHT;
@@ -120,37 +114,37 @@
         }
 
         if (pawns != 0) {
-            int numberOfThreats = populationCount(PieceMovePawns.singlePawnCaptures(board, square, !myColour, pawns));
+            int numberOfThreats = populationCount(PieceMove.singlePawnCaptures(square, !myColour, pawns));
             for (int num = 0; num < numberOfThreats; num++){
                 pieces.add(p);
             }
         }
         if (knights != 0) {
-            int numberOfThreats = populationCount(PieceMoveKnight.singleKnightTable(board, square, myColour, knights));
+            int numberOfThreats = populationCount(PieceMove.singleKnightTable(square, knights));
             for (int num = 0; num < numberOfThreats; num++){
                 pieces.add(n);
             }
         }
         if (bishops != 0) {
-            int numberOfThreats = populationCount(PieceMoveSliding.singleBishopCaptures(board, square, myColour, bishops));
+            int numberOfThreats = populationCount(PieceMove.singleBishopTable(board.allPieces(), myColour, square, bishops));
             for (int num = 0; num < numberOfThreats; num++){
                 pieces.add(b);
             }
         }
         if (rooks != 0) {
-            int numberOfThreats = populationCount(PieceMoveSliding.singleRookCaptures(board, square, myColour, rooks));
+            int numberOfThreats = populationCount(PieceMove.singleRookTable(board.allPieces(), myColour, square, rooks));
             for (int num = 0; num < numberOfThreats; num++){
                 pieces.add(r);
             }
         }
         if (queens != 0) {
-            int numberOfThreats = populationCount(PieceMoveSliding.singleQueenCaptures(board, square, myColour, queens));
+            int numberOfThreats = populationCount(PieceMove.singleQueenTable(board.allPieces(), myColour, square, queens));
             for (int num = 0; num < numberOfThreats; num++){
                 pieces.add(q);
             }
         }
         if (king != 0) {
-            int numberOfThreats = populationCount(PieceMoveKing.singleKingCaptures(board, square, myColour, king));
+            int numberOfThreats = populationCount(PieceMove.singleKingTable(square, king));
             for (int num = 0; num < numberOfThreats; num++){
                 pieces.add(k);
             }
Index: src/main/java/javacode/chessengine/search/Extensions.java
===================================================================
--- src/main/java/javacode/chessengine/search/Extensions.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/com/github/louism33/axolotl/search/Extensions.java	(date 1543832075000)
@@ -1,22 +1,10 @@
-package javacode.chessengine.search;
+package com.github.louism33.axolotl.search;
 
-import javacode.chessprogram.bitboards.BitBoards;
-import javacode.chessprogram.chess.Chessboard;
-import javacode.chessprogram.chess.Move;
-import javacode.chessprogram.moveMaking.StackMoveData;
-
-import static javacode.chessprogram.chess.BitManipulations.newPieceOnSquare;
-import static javacode.chessprogram.moveGeneration.MoveGeneratorMaster.generateLegalMoves;
+import com.github.louism33.chesscore.Chessboard;
 
 class Extensions {
 
-    private final Engine engine;
-
-    Extensions(Engine engine) {
-        this.engine = engine;
-    }
-
-    int extensions(Chessboard board, int ply, boolean boardInCheck){
+    static int extensions(Chessboard board, int ply, boolean boardInCheck){
         /*
         do not extend at root node
          */
@@ -25,7 +13,7 @@
         }
 
         if (boardInCheck){
-            this.engine.statistics.numberOfCheckExtensions++;
+            Engine.statistics.numberOfCheckExtensions++;
             return 1;
         }
 
@@ -33,28 +21,28 @@
         Passed Pawn Extension:
         extend if pawn was just moved to penultimate rank
         */
-        if (board.moveStack.size() > 0) {
-            StackMoveData peek = board.moveStack.peek();
-            Move previousMove = peek.move;
-            long destinationSquareOfPreviousMove = newPieceOnSquare(previousMove.destinationIndex);
-
-            if (board.isWhiteTurn()) {
-                if ((destinationSquareOfPreviousMove & BitBoards.RANK_TWO & board.BLACK_PAWNS) != 0) {
-                    this.engine.statistics.numberOfPassedPawnExtensions++;
-                    return 1;
-                }
-            } else {
-                if ((destinationSquareOfPreviousMove & BitBoards.RANK_SEVEN & board.WHITE_PAWNS) != 0) {
-                    this.engine.statistics.numberOfPassedPawnExtensions++;
-                    return 1;
-                }
-            }
-        }
+//        if (board.moveStack.size() > 0) {
+//            StackDataParser peek = board.moveStack.peek();
+//            int previousMove = peek.move;
+//            long destinationSquareOfPreviousMove = newPieceOnSquare(previousMove.destinationIndex);
+//
+//            if (board.isWhiteTurn()) {
+//                if ((destinationSquareOfPreviousMove & BitBoards.RANK_TWO & board.getBlackPawns()) != 0) {
+//                    this.engine.statistics.numberOfPassedPawnExtensions++;
+//                    return 1;
+//                }
+//            } else {
+//                if ((destinationSquareOfPreviousMove & BitBoards.RANK_SEVEN & board.getWhitePawns()) != 0) {
+//                    this.engine.statistics.numberOfPassedPawnExtensions++;
+//                    return 1;
+//                }
+//            }
+//        }
         /*
         Singular Reply Extension:
         if only there is only one legal move, searchMyTime deeper as we are forced situation
          */
-        if (generateLegalMoves(board, board.isWhiteTurn()).size() == 1){
+        if (board.generateLegalMoves().length == 1){
             return 1;
         }
 
Index: src/main/java/javacode/chessengine/search/QuiescentSearchUtils.java
===================================================================
--- src/main/java/javacode/chessengine/search/QuiescentSearchUtils.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/com/github/louism33/axolotl/search/QuiescentSearchUtils.java	(date 1543832023000)
@@ -1,24 +1,17 @@
-package javacode.chessengine.search;
+package com.github.louism33.axolotl.search;
 
-import javacode.chessengine.moveordering.MoveOrderer;
-import javacode.chessprogram.chess.Chessboard;
-import javacode.chessprogram.chess.Move;
-
-import java.util.List;
+import com.github.louism33.axolotl.moveordering.MoveOrderer;
+import com.github.louism33.chesscore.Chessboard;
 
 class QuiescentSearchUtils {
 
-    private final MoveOrderer moveOrderer;
-    
-    QuiescentSearchUtils(MoveOrderer moveOrderer) {
-        this.moveOrderer = moveOrderer;
-    }
     /*
     a board is quiet when there are no more captures that can be made
      */
-    boolean isBoardQuiet(Chessboard board, List<Move> moves){
-        for (Move move : moves){
-            if(this.moveOrderer.moveIsCapture(board, move)){
+    static boolean isBoardQuiet(Chessboard board, int[] moves){
+        for (int i = 0; i < moves.length; i++) {
+            int move = moves[i];
+            if (MoveOrderer.moveIsCapture(board, move)) {
                 return false;
             }
         }
Index: src/main/java/javacode/chessengine/search/InternalIterativeDeepening.java
===================================================================
--- src/main/java/javacode/chessengine/search/InternalIterativeDeepening.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/com/github/louism33/axolotl/search/InternalIterativeDeepening.java	(date 1543750541000)
@@ -1,9 +1,9 @@
-package javacode.chessengine.search;
+package com.github.louism33.axolotl.search;
 
-import javacode.chessprogram.chess.Chessboard;
+import com.github.louism33.chesscore.Chessboard;
 
-import static javacode.chessengine.search.NullMovePruning.maybeInEndgame;
-import static javacode.chessengine.search.NullMovePruning.onlyPawnsLeftForPlayer;
+import static com.github.louism33.axolotl.search.NullMovePruning.maybeInEndgame;
+import static com.github.louism33.axolotl.search.NullMovePruning.onlyPawnsLeftForPlayer;
 
 class InternalIterativeDeepening {
 
Index: src/main/java/javacode/chessengine/search/PrincipleVariationSearch.java
===================================================================
--- src/main/java/javacode/chessengine/search/PrincipleVariationSearch.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/com/github/louism33/axolotl/search/PrincipleVariationSearch.java	(date 1543860896000)
@@ -1,63 +1,42 @@
-package javacode.chessengine.search;
+package com.github.louism33.axolotl.search;
 
-import javacode.chessengine.evaluation.Evaluator;
-import javacode.chessengine.moveordering.MoveOrderer;
-import javacode.chessengine.transpositiontable.TranspositionTable;
-import javacode.chessengine.transpositiontable.ZobristHash;
-import javacode.chessprogram.chess.Chessboard;
-import javacode.chessprogram.chess.Move;
-import javacode.chessprogram.moveMaking.MoveParser;
+import com.github.louism33.axolotl.evaluation.Evaluator;
+import com.github.louism33.axolotl.moveordering.MoveOrderer;
+import com.github.louism33.axolotl.transpositiontable.TranspositionTable;
+import com.github.louism33.chesscore.Chessboard;
+import com.github.louism33.chesscore.IllegalUnmakeException;
+import com.github.louism33.chesscore.MoveParser;
 import org.junit.Assert;
 
-import java.util.List;
-
-import static javacode.chessengine.evaluation.EvaluationConstants.*;
-import static javacode.chessengine.moveordering.KillerMoves.mateKiller;
-import static javacode.chessengine.moveordering.KillerMoves.updateKillerMoves;
-import static javacode.chessengine.search.FutilityPruning.futilityMargin;
-import static javacode.chessengine.search.FutilityPruning.isFutilityPruningAllowedHere;
-import static javacode.chessengine.search.InternalIterativeDeepening.iidDepthReduction;
-import static javacode.chessengine.search.InternalIterativeDeepening.isIIDAllowedHere;
-import static javacode.chessengine.search.LateMoveReductions.isLateMoveReductionAllowedHere;
-import static javacode.chessengine.search.LateMoveReductions.lateMoveDepthReduction;
-import static javacode.chessengine.search.NullMovePruning.*;
-import static javacode.chessengine.search.Razoring.*;
-import static javacode.chessengine.search.SEEPruning.seeScore;
-import static javacode.chessengine.transpositiontable.EngineMovesAndHash.*;
-import static javacode.chessengine.transpositiontable.TranspositionTable.TableObject.Flag.*;
-import static javacode.chessprogram.check.CheckChecker.*;
-import static javacode.chessprogram.chess.Copier.copyMove;
-import static javacode.chessprogram.moveGeneration.MoveGeneratorMaster.generateLegalMoves;
+import static com.github.louism33.axolotl.evaluation.EvaluationConstants.*;
+import static com.github.louism33.axolotl.moveordering.KillerMoves.mateKiller;
+import static com.github.louism33.axolotl.moveordering.KillerMoves.updateKillerMoves;
+import static com.github.louism33.axolotl.search.FutilityPruning.futilityMargin;
+import static com.github.louism33.axolotl.search.FutilityPruning.isFutilityPruningAllowedHere;
+import static com.github.louism33.axolotl.search.InternalIterativeDeepening.iidDepthReduction;
+import static com.github.louism33.axolotl.search.InternalIterativeDeepening.isIIDAllowedHere;
+import static com.github.louism33.axolotl.search.LateMoveReductions.isLateMoveReductionAllowedHere;
+import static com.github.louism33.axolotl.search.LateMoveReductions.lateMoveDepthReduction;
+import static com.github.louism33.axolotl.search.NullMovePruning.*;
+import static com.github.louism33.axolotl.search.Razoring.*;
+import static com.github.louism33.axolotl.search.SEEPruning.seeScore;
+import static com.github.louism33.axolotl.transpositiontable.TranspositionTable.TableObject.Flag.*;
 
 class PrincipleVariationSearch {
 
-    private final Engine engine;
-    public final TranspositionTable table;
-    private final MoveOrderer moveOrderer;
-    private final QuiescenceSearch quiescenceSearch;
-    private Move aiMove;
-    private final Evaluator evaluator;
-    private final Extensions extensions;
+    public static final TranspositionTable table = new TranspositionTable();
+    private static int aiMove;
 
-    PrincipleVariationSearch(Engine engine, Evaluator evaluator){
-        this.engine = engine;
-        this.table = new TranspositionTable();
-        this.moveOrderer = new MoveOrderer(this.engine);
-        this.evaluator = evaluator;
-        this.quiescenceSearch = new QuiescenceSearch(this.engine, this.moveOrderer, this.evaluator);
-        this.extensions = new Extensions(this.engine);
-    }
-
-    int principleVariationSearch(Chessboard board, ZobristHash zobristHash,
+    static int principleVariationSearch(Chessboard board,
                                  long startTime, long timeLimitMillis,
                                  int originalDepth, int depth, int ply,
                                  int alpha, int beta,
-                                 int nullMoveCounter, boolean reducedSearch){
+                                 int nullMoveCounter, boolean reducedSearch) throws IllegalUnmakeException {
 
-        boolean boardInCheck = boardInCheck(board, board.isWhiteTurn());
+        boolean boardInCheck = board.inCheck(board.isWhiteTurn());
 
-        if (this.engine.getEngineSpecifications().ALLOW_EXTENSIONS) {
-            depth += this.extensions.extensions(board, ply, boardInCheck);
+        if (Engine.getEngineSpecifications().ALLOW_EXTENSIONS) {
+            depth += Extensions.extensions(board, ply, boardInCheck);
         }
 
         Assert.assertTrue(depth >= 0);
@@ -67,10 +46,10 @@
         if at a leaf node, perform specialised search of captures to avoid horizon effect
          */
         if (depth <= 0){
-            if(this.engine.getEngineSpecifications().ALLOW_EXTENSIONS && originalDepth != 0) {
-                Assert.assertTrue(!boardInCheck(board, board.isWhiteTurn()));
+            if(Engine.getEngineSpecifications().ALLOW_EXTENSIONS && originalDepth != 0) {
+                Assert.assertTrue(!board.inCheck(board.isWhiteTurn()));
             }
-            return this.quiescenceSearch.quiescenceSearch(board, alpha, beta);
+            return QuiescenceSearch.quiescenceSearch(board, alpha, beta);
         }
 
         Assert.assertTrue(depth >= 1);
@@ -79,7 +58,7 @@
         Mate Distance Pruning:
         prefer closer wins and further loses 
          */
-        if (this.engine.getEngineSpecifications().ALLOW_MATE_DISTANCE_PRUNING){
+        if (Engine.getEngineSpecifications().ALLOW_MATE_DISTANCE_PRUNING){
             alpha = Math.max(alpha, IN_CHECKMATE_SCORE + ply);
             beta = Math.min(beta, -IN_CHECKMATE_SCORE - ply - 1);
             if (alpha >= beta){
@@ -91,8 +70,8 @@
         Transposition Table Lookup:
         if possible, retrieve previously found data from singleton transposition table 
          */
-        Move hashMove = null;
-        TranspositionTable.TableObject previousTableData = table.get(zobristHash.getBoardHash());
+        int hashMove = 0;
+        TranspositionTable.TableObject previousTableData = table.get(board.getBoardHash());
         int score;
         if (previousTableData != null && ply > 0) {
             score = previousTableData.getScore(ply);
@@ -100,22 +79,22 @@
             if (previousTableData.getDepth() >= depth) {
                 TranspositionTable.TableObject.Flag flag = previousTableData.getFlag();
                 if (flag == EXACT) {
-                    this.engine.statistics.numberOfExacts++;
+                    Engine.statistics.numberOfExacts++;
                     if (ply == 0){
-                        aiMove = copyMove(hashMove);
+                        aiMove = hashMove;
                     }
                     return score;
                 } else if (flag == LOWERBOUND) {
-                    this.engine.statistics.numberOfLowerBounds++;
+                    Engine.statistics.numberOfLowerBounds++;
                     alpha = Math.max(alpha, score);
                 } else if (flag == UPPERBOUND) {
-                    this.engine.statistics.numberOfUpperBounds++;
+                    Engine.statistics.numberOfUpperBounds++;
                     beta = Math.min(beta, score);
                 }
                 if (alpha >= beta) {
-                    this.engine.statistics.numberOfHashBetaCutoffs++;
+                    Engine.statistics.numberOfHashBetaCutoffs++;
                     if (ply == 0){
-                        aiMove = copyMove(hashMove);
+                        aiMove = hashMove;
                     }
                     return score;
                 }
@@ -129,8 +108,8 @@
         int staticBoardEval = SHORT_MINIMUM;
         boolean thisIsAPrincipleVariationNode = (beta - alpha != 1);
         if (!thisIsAPrincipleVariationNode && !boardInCheck) {
-            List<Move> moves = generateLegalMoves(board, board.isWhiteTurn());
-            staticBoardEval = this.evaluator.eval(board, board.isWhiteTurn(), moves);
+            int[] moves = board.generateLegalMoves();
+            staticBoardEval = Evaluator.eval(board, board.isWhiteTurn(), moves);
 
             if(previousTableData != null){
                 if (previousTableData.getFlag() == EXACT
@@ -144,11 +123,11 @@
             Beta Razoring:
             if current node has a very high score, return eval
              */
-            if (this.engine.getEngineSpecifications().ALLOW_BETA_RAZORING){
-                if (isBetaRazoringMoveOkHere(board, evaluator, depth, staticBoardEval)){
+            if (Engine.getEngineSpecifications().ALLOW_BETA_RAZORING){
+                if (isBetaRazoringMoveOkHere(board, depth, staticBoardEval)){
                     int specificBetaRazorMargin = betaRazorMargin[depth];
                     if (staticBoardEval - specificBetaRazorMargin >= beta){
-                        this.engine.statistics.numberOfSuccessfulBetaRazors++;
+                        Engine.statistics.numberOfSuccessfulBetaRazors++;
                         return staticBoardEval;
                     }
                 }
@@ -159,20 +138,20 @@
             Alpha Razoring:
             if current node has a very low score, perform Quiescence search to try to find a cutoff
              */
-            if (this.engine.getEngineSpecifications().ALLOW_ALPHA_RAZORING){
-                if (isAlphaRazoringMoveOkHere(board, evaluator, depth, alpha)){
+            if (Engine.getEngineSpecifications().ALLOW_ALPHA_RAZORING){
+                if (isAlphaRazoringMoveOkHere(board, depth, alpha)){
                     int specificAlphaRazorMargin = alphaRazorMargin[depth];
                     if (staticBoardEval + specificAlphaRazorMargin < alpha){
-                        int qScore = this.quiescenceSearch
+                        int qScore = QuiescenceSearch
                                 .quiescenceSearch(board,
                                         alpha - specificAlphaRazorMargin,
                                         alpha - specificAlphaRazorMargin + 1);
 
                         if (qScore + specificAlphaRazorMargin <= alpha){
-                            this.engine.statistics.numberOfSuccessfulAlphaRazors++;
+                            Engine.statistics.numberOfSuccessfulAlphaRazors++;
                             return qScore;
                         }
-                        this.engine.statistics.numberOfFailedAlphaRazors++;
+                        Engine.statistics.numberOfFailedAlphaRazors++;
                     }
                 }
             }
@@ -181,26 +160,26 @@
             Null Move Pruning:
             if not in dangerous position, forfeit a move and make shallower null window search
              */
-            if (this.engine.getEngineSpecifications().ALLOW_NULL_MOVE_PRUNING) {
+            if (Engine.getEngineSpecifications().ALLOW_NULL_MOVE_PRUNING) {
                 if (nullMoveCounter < 2 && !reducedSearch && isNullMoveOkHere(board)) {
                     Assert.assertTrue(depth >= 1);
                     Assert.assertTrue(alpha < beta);
 
-                    makeNullMove(board, zobristHash);
+                    board.makeNullMoveAndFlipTurn();
 
                     int reducedDepth = depth - nullMoveDepthReduction(depth) - 1;
 
                     int nullScore = reducedDepth <= 0 ?
 
-                            -this.quiescenceSearch.quiescenceSearch(board,
+                            -QuiescenceSearch.quiescenceSearch(board,
                                     -beta,
                                     -beta + 1)
 
-                            : -principleVariationSearch(board, zobristHash, startTime, timeLimitMillis,
+                            : -principleVariationSearch(board, startTime, timeLimitMillis,
                             originalDepth, reducedDepth, ply + 1,
                             -beta, -beta + 1, nullMoveCounter + 1, true);
 
-                    unMakeNullMove(board, zobristHash);
+                    board.unMakeNullMoveAndFlipTurn();
 
                     if (nullScore >= beta) {
 
@@ -208,10 +187,10 @@
                             nullScore = beta;
                         }
 
-                        this.engine.statistics.numberOfNullMoveHits++;
+                        Engine.statistics.numberOfNullMoveHits++;
                         return nullScore;
                     }
-                    this.engine.statistics.numberOfNullMoveMisses++;
+                    Engine.statistics.numberOfNullMoveMisses++;
                 }
             }
         }
@@ -220,64 +199,71 @@
         Move Ordering:
         place moves most likely to cause cutoffs at the front of the move list (hashmoves, killers, captures)
          */
-        List<Move> orderedMoves;
+        MoveOrderer.MoveScore[] orderedMoves;
         if (previousTableData == null) {
             /*
             Internal Iterative Deepening:
             when no hashtable entry, pv node and not endgame, perform shallower search to add a good move to table
              */
-            if (this.engine.getEngineSpecifications().ALLOW_INTERNAL_ITERATIVE_DEEPENING){
+            if (Engine.getEngineSpecifications().ALLOW_INTERNAL_ITERATIVE_DEEPENING){
                 if (isIIDAllowedHere(board, depth, reducedSearch, thisIsAPrincipleVariationNode)){
-                    this.engine.statistics.numberOfIIDs++;
+                    Engine.statistics.numberOfIIDs++;
                     int reducedIIDDepth = depth - iidDepthReduction - 1;
 
-                    principleVariationSearch(board, zobristHash,
+                    principleVariationSearch(board,
                             startTime, timeLimitMillis, originalDepth,
                             reducedIIDDepth, ply,
                             alpha, beta, nullMoveCounter, true);
 
-                    previousTableData = table.get(zobristHash.getBoardHash());
+                    previousTableData = table.get(board.getBoardHash());
                     if (previousTableData == null){
-                        this.engine.statistics.numberOfFailedIIDs++;
+                        Engine.statistics.numberOfFailedIIDs++;
                     }
                     else {
-                        this.engine.statistics.numberOfSuccessfulIIDs++;
+                        Engine.statistics.numberOfSuccessfulIIDs++;
                     }
                 }
             }
         }
 
         if (previousTableData != null) {
-            this.engine.statistics.numberOfSearchesWithHash++;
-            orderedMoves = this.moveOrderer.orderedMoves(board, board.isWhiteTurn(), ply, hashMove, aiMove);
+            Engine.statistics.numberOfSearchesWithHash++;
+            orderedMoves = MoveOrderer.orderedMoves(board, board.isWhiteTurn(), ply, hashMove, aiMove);
 
         }
         else{
-            this.engine.statistics.numberOfSearchesWithoutHash++;
+            Engine.statistics.numberOfSearchesWithoutHash++;
 
-            orderedMoves = this.moveOrderer.orderedMoves(board, board.isWhiteTurn(), ply, null, aiMove);
+            orderedMoves = MoveOrderer.orderedMoves(board, board.isWhiteTurn(), ply, 0, aiMove);
         }
 
         int originalAlpha = alpha;
         int bestScore = SHORT_MINIMUM;
-        Move bestMove = null;
+        int bestMove = 0;
         
         /*
         iterate through fully legal moves
          */
         int numberOfMovesSearched = 0;
-        for (Move move : orderedMoves){
+        for (int i = 0; i < orderedMoves.length; i++) {
+            MoveOrderer.MoveScore moveScore = orderedMoves[i];
+            int move = moveScore.getMove();
+            
+            if (move == 0) {
+                break;
+            }
+
             // consider getting this from move orderer
-            boolean captureMove = this.moveOrderer.moveIsCapture(board, move);
+            boolean captureMove = MoveOrderer.moveIsCapture(board, move);
             boolean promotionMove = MoveParser.isPromotionMove(move);
-            boolean givesCheckMove = this.moveOrderer.checkingMove(board, move);
-            boolean pawnToSix = this.moveOrderer.moveWillBePawnPushSix(board, move);
-            boolean pawnToSeven = this.moveOrderer.moveWillBePawnPushSeven(board, move);
+            boolean givesCheckMove = MoveOrderer.checkingMove(board, move);
+            boolean pawnToSix = MoveOrderer.moveWillBePawnPushSix(board, move);
+            boolean pawnToSeven = MoveOrderer.moveWillBePawnPushSeven(board, move);
 
             if (!maybeInEndgame(board)
                     && (MoveParser.isPromotionToKnight(move) ||
                     MoveParser.isPromotionToBishop(move) ||
-                    MoveParser.isPromotionToRook(move))){
+                    MoveParser.isPromotionToRook(move))) {
                 continue;
             }
 
@@ -290,7 +276,7 @@
                     Late Move Pruning:
                     before making move, see if we can prune this move
                      */
-                    if (this.engine.getEngineSpecifications().ALLOW_LATE_MOVE_PRUNING) {
+                    if (Engine.getEngineSpecifications().ALLOW_LATE_MOVE_PRUNING) {
                         if (bestScore < CHECKMATE_ENEMY_SCORE_MAX_PLY
                                 && !onlyPawnsLeftForPlayer(board, board.isWhiteTurn())) {
                             if (!promotionMove
@@ -300,7 +286,7 @@
                                     && depth <= 4
                                     && numberOfMovesSearched >= depth * 3 + 4) {
 
-                                this.engine.statistics.numberOfLateMovePrunings++;
+                                Engine.statistics.numberOfLateMovePrunings++;
                                 continue;
                             }
                         }
@@ -310,39 +296,38 @@
                     (Extended) Futility Pruning:
                     if score + margin smaller than alpha, skip this move
                      */
-                    if (this.engine.getEngineSpecifications().ALLOW_FUTILITY_PRUNING) {
+                    if (Engine.getEngineSpecifications().ALLOW_FUTILITY_PRUNING) {
                         if (isFutilityPruningAllowedHere(board, move, depth,
                                 promotionMove, givesCheckMove, pawnToSix, pawnToSeven)) {
 
                             if (staticBoardEval == SHORT_MINIMUM) {
-                                staticBoardEval = this.evaluator.eval(board, board.isWhiteTurn(),
-                                        generateLegalMoves(board, board.isWhiteTurn()));
+                                staticBoardEval = Evaluator.eval(board, board.isWhiteTurn(),
+                                        board.generateLegalMoves());
                             }
 
                             int futilityScore = staticBoardEval + futilityMargin[depth];
 
                             if (futilityScore <= alpha) {
-                                this.engine.statistics.numberOfSuccessfulFutilities++;
+                                Engine.statistics.numberOfSuccessfulFutilities++;
                                 if (futilityScore > bestScore) {
                                     bestScore = futilityScore;
                                 }
                                 continue;
                             } else {
-                                this.engine.statistics.numberOfFailedFutilities++;
+                                Engine.statistics.numberOfFailedFutilities++;
                             }
                         }
                     }
-                }
-                else {
+                } else {
                     /*
                     Static Exchange Evaluation:
                     if an exchange promises a large loss of material skip it, more if further from root
                      */
-                    if (this.engine.getEngineSpecifications().ALLOW_SEE_PRUNING) {
+                    if (Engine.getEngineSpecifications().ALLOW_SEE_PRUNING) {
                         if (depth <= 5) {
-                            int seeScore = seeScore(board, move, evaluator);
+                            int seeScore = seeScore(board, move);
                             if (seeScore < -100 * depth) {
-                                this.engine.statistics.numberOfSuccessfulSEEs++;
+                                Engine.statistics.numberOfSuccessfulSEEs++;
                                 continue;
                             }
                         }
@@ -350,16 +335,15 @@
                 }
             }
 
-            makeMoveAndHashUpdate(board, move, zobristHash);
+            board.makeMoveAndFlipTurn(move);
             numberOfMovesSearched++;
-            this.engine.statistics.numberOfMovesMade++;
+            Engine.statistics.numberOfMovesMade++;
 
-            boolean enemyInCheck = boardInCheck(board, board.isWhiteTurn());
+            boolean enemyInCheck = board.inCheck(board.isWhiteTurn());
 
-            if (isDrawByRepetition(board, zobristHash) || isDrawByInsufficientMaterial(board)){
+            if (board.drawByRepetition(board.isWhiteTurn())) {
                 score = IN_STALEMATE_SCORE;
-            }
-            else { 
+            } else { 
                 /*
                 score now above alpha, therefore if no special cases apply, we do a full search
                  */
@@ -369,12 +353,12 @@
                 Late Move Reductions:
                 search later ordered safer moves to a lower depth
                  */
-                if (this.engine.getEngineSpecifications().ALLOW_LATE_MOVE_REDUCTIONS
+                if (Engine.getEngineSpecifications().ALLOW_LATE_MOVE_REDUCTIONS
                         && isLateMoveReductionAllowedHere(board, move, depth,
                         numberOfMovesSearched, reducedSearch, captureMove,
                         givesCheckMove, promotionMove, pawnToSix, pawnToSeven)) {
 
-                    this.engine.statistics.numberOfLateMoveReductions++;
+                    Engine.statistics.numberOfLateMoveReductions++;
                 
                     /*
                     lower depth search
@@ -382,7 +366,7 @@
                     int lowerDepth = depth - lateMoveDepthReduction(depth) - 1;
 
                     score = -principleVariationSearch
-                            (board, zobristHash, startTime, timeLimitMillis,
+                            (board, startTime, timeLimitMillis,
                                     originalDepth, lowerDepth, ply + 1,
                                     -alpha - 1, -alpha, 0, true);
 
@@ -390,14 +374,14 @@
                     if a lower move seems good, full depth research
                      */
                     if (score > alpha) {
-                        score = -principleVariationSearch(board, zobristHash,
+                        score = -principleVariationSearch(board,
                                 startTime, timeLimitMillis,
                                 originalDepth, depth - 1, ply + 1,
                                 -alpha - 1, -alpha, 0, false);
 
-                        this.engine.statistics.numberOfLateMoveReductionsMisses++;
+                        Engine.statistics.numberOfLateMoveReductionsMisses++;
                     } else {
-                        this.engine.statistics.numberOfLateMoveReductionsHits++;
+                        Engine.statistics.numberOfLateMoveReductionsHits++;
                     }
                 }
             
@@ -405,10 +389,10 @@
                 Principle Variation Search:
                 moves that are not favourite (PV) are searched with a null window
                  */
-                else if (this.engine.getEngineSpecifications().ALLOW_PRINCIPLE_VARIATION_SEARCH
+                else if (Engine.getEngineSpecifications().ALLOW_PRINCIPLE_VARIATION_SEARCH
                         && numberOfMovesSearched > 1) {
 
-                    score = -principleVariationSearch(board, zobristHash,
+                    score = -principleVariationSearch(board,
                             startTime, timeLimitMillis,
                             originalDepth, depth - 1, ply + 1,
                             -alpha - 1, -alpha, 0, reducedSearch);
@@ -417,9 +401,9 @@
                     if this line of play would improve our score, do full re-search (implemented slightly lower down)
                      */
                     if (score > alpha) {
-                        this.engine.statistics.numberOfPVSMisses++;
+                        Engine.statistics.numberOfPVSMisses++;
                     } else {
-                        this.engine.statistics.numberOfPVSHits++;
+                        Engine.statistics.numberOfPVSHits++;
                     }
                 }
 
@@ -427,24 +411,23 @@
                 always search PV node fully + full re-search of moves that showed promise
                  */
                 if (score > alpha) {
-                    score = -principleVariationSearch(board, zobristHash,
+                    score = -principleVariationSearch(board,
                             startTime, timeLimitMillis,
                             originalDepth, depth - 1, ply + 1,
                             -beta, -alpha, 0, false);
                 }
             }
 
-            UnMakeMoveAndHashUpdate(board, zobristHash);
-            
+            board.unMakeMoveAndFlipTurn(move);
             /*
             record score and move if better than previous ones
              */
-            if (score > bestScore){
+            if (score > bestScore) {
                 bestScore = score;
-                bestMove = copyMove(move);
+                bestMove = move;
                 alpha = Math.max(alpha, score);
                 if (ply == 0) {
-                    aiMove = copyMove(move);
+                    aiMove = move;
                 }
             }
 
@@ -452,24 +435,24 @@
             Alpha Beta Pruning:
             represents a situation which is too good, or too bad, and will not occur in normal play, so stop searching further
              */
-            if (alpha >= beta){
-                this.engine.statistics.statisticsFailHigh(ply, numberOfMovesSearched, move);
+            if (alpha >= beta) {
+                Engine.statistics.statisticsFailHigh(ply, numberOfMovesSearched, move);
 
-                if (!this.moveOrderer.moveIsCapture(board, move)){
+                if (!MoveOrderer.moveIsCapture(board, move)) {
                     /*
                     Killer Moves:
                     record this cutoff move, because we will try out in sister nodes
                      */
-                    if (this.engine.getEngineSpecifications().ALLOW_KILLERS) {
+                    if (Engine.getEngineSpecifications().ALLOW_KILLERS) {
                         updateKillerMoves(move, ply);
                     }
-                    if (this.engine.getEngineSpecifications().ALLOW_HISTORY_MOVES) {
-                        this.moveOrderer.updateHistoryMoves(move, ply);
+                    if (Engine.getEngineSpecifications().ALLOW_HISTORY_MOVES) {
+                        MoveOrderer.updateHistoryMoves(move, ply);
                     }
 
-                    if (this.engine.getEngineSpecifications().ALLOW_MATE_KILLERS){
-                        if (alpha > CHECKMATE_ENEMY_SCORE_MAX_PLY){
-                            mateKiller[ply] = copyMove(move);
+                    if (Engine.getEngineSpecifications().ALLOW_MATE_KILLERS) {
+                        if (alpha > CHECKMATE_ENEMY_SCORE_MAX_PLY) {
+                            mateKiller[ply] = move;
                         }
                     }
                 }
@@ -479,11 +462,11 @@
 
         if (numberOfMovesSearched == 0) {
             if (boardInCheck) {
-                this.engine.statistics.numberOfCheckmates++;
+                Engine.statistics.numberOfCheckmates++;
                 return IN_CHECKMATE_SCORE + ply;
             }
             else {
-                this.engine.statistics.numberOfStalemates++;
+                Engine.statistics.numberOfStalemates++;
                 return IN_STALEMATE_SCORE;
             }
         }
@@ -501,14 +484,14 @@
             flag = EXACT;
         }
 
-        table.put(zobristHash.getBoardHash(),
+        table.put(board.getBoardHash(),
                 new TranspositionTable.TableObject(bestMove, bestScore, depth,
                         flag));
 
         return bestScore;
     }
 
-    Move getAiMove() {
+    static int getAiMove() {
         return aiMove;
     }
 
Index: src/main/java/javacode/chessengine/search/EngineSpecifications.java
===================================================================
--- src/main/java/javacode/chessengine/search/EngineSpecifications.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/com/github/louism33/axolotl/search/EngineSpecifications.java	(date 1543670486000)
@@ -1,4 +1,4 @@
-package javacode.chessengine.search;
+package com.github.louism33.axolotl.search;
 
 public class EngineSpecifications {
     
Index: target/classes/META-INF/MANIFEST.MF
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>Manifest-Version: 1.0\r\nMain-Class: javacode.chessengine.main.UCIEntry\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- target/classes/META-INF/MANIFEST.MF	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ target/classes/META-INF/MANIFEST.MF	(date 1543750816000)
@@ -1,3 +1,3 @@
 Manifest-Version: 1.0
-Main-Class: javacode.chessengine.main.UCIEntry
+Main-Class: com.github.louism33.axolotl.main.UCIEntry
 
Index: src/main/java/javacode/chessengine/search/FutilityPruning.java
===================================================================
--- src/main/java/javacode/chessengine/search/FutilityPruning.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/com/github/louism33/axolotl/search/FutilityPruning.java	(date 1543683343000)
@@ -1,7 +1,6 @@
-package javacode.chessengine.search;
+package com.github.louism33.axolotl.search;
 
-import javacode.chessprogram.chess.Chessboard;
-import javacode.chessprogram.chess.Move;
+import com.github.louism33.chesscore.Chessboard;
 
 class FutilityPruning {
 
@@ -10,7 +9,7 @@
     public static final int[] futilityMargin = {0, 150, 250, 350, 450, 550, 650};
     private static final int futilityBelowThisDepth = futilityMargin.length;
     
-    static boolean isFutilityPruningAllowedHere(Chessboard board, Move move, int depth,
+    static boolean isFutilityPruningAllowedHere(Chessboard board, int move, int depth,
                                                 boolean promotionMove,
                                                 boolean givesCheckMove,
                                                 boolean pawnToSix, boolean pawnToSeven){
Index: src/main/java/javacode/chessengine/search/Engine.java
===================================================================
--- src/main/java/javacode/chessengine/search/Engine.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/com/github/louism33/axolotl/search/Engine.java	(date 1543833978000)
@@ -1,55 +1,40 @@
-package javacode.chessengine.search;
+package com.github.louism33.axolotl.search;
 
-import javacode.chessengine.main.UCIEntry;
-import javacode.chessengine.timemanagement.TimeAllocator;
-import javacode.chessengine.transpositiontable.ZobristHash;
-import javacode.chessengine.utilities.Statistics;
-import javacode.chessprogram.chess.Chessboard;
-import javacode.chessprogram.chess.Move;
+import com.github.louism33.axolotl.main.UCIEntry;
+import com.github.louism33.axolotl.timemanagement.TimeAllocator;
+import com.github.louism33.axolotl.utilities.Statistics;
+import com.github.louism33.chesscore.Chessboard;
+import com.github.louism33.chesscore.IllegalUnmakeException;
 import org.junit.Assert;
 
-import java.util.List;
-
-import static javacode.chessprogram.moveGeneration.MoveGeneratorMaster.generateLegalMoves;
-
 public class Engine {
 
-    public final Statistics statistics = new Statistics(this);
-    private final boolean HEAVY_INFO_LOG = false;
-    public int MAX_DEPTH = 12;
-    
-    private UCIEntry uciEntry;
-    private final EngineSpecifications engineSpecifications = new EngineSpecifications();
+    public static final Statistics statistics = new Statistics();
+    private static final boolean HEAVY_INFO_LOG = false;
+    public static int MAX_DEPTH = 12;
     
-    private final IterativeDeepeningDFS iterativeDeepeningDFS;
-    private final TimeAllocator timeAllocator = new TimeAllocator();
+    private static UCIEntry uciEntry;
+    private static final EngineSpecifications engineSpecifications = new EngineSpecifications();
     
-    private boolean stopInstruction;
-    private boolean setup = false;
-
-    public Engine() {
-        this.stopInstruction = false;
-        this.iterativeDeepeningDFS = new IterativeDeepeningDFS(this);
-    }
+    private static boolean stopInstruction;
+    private static boolean setup = false;
 
     public Engine(UCIEntry uciEntry) {
-        this.uciEntry = uciEntry;
-        this.stopInstruction = false;
-        this.iterativeDeepeningDFS = new IterativeDeepeningDFS(this);
+        Engine.uciEntry = uciEntry;
     }
     
-    private void setup(){
+    private static void setup(){
         stopInstruction = false;
         setup = true;
     }
 
-    public Move searchFixedDepth(Chessboard board, int depth){
+    public static int searchFixedDepth(Chessboard board, int depth){
         engineSpecifications.ALLOW_TIME_LIMIT = false;
         MAX_DEPTH = depth;
         return searchFixedTime(board, 0);
     }
 
-    public Move searchMyTime (Chessboard board, long maxTime){
+    public static int searchMyTime (Chessboard board, long maxTime){
         engineSpecifications.ALLOW_TIME_LIMIT = true;
         
         if (maxTime < 1000){
@@ -58,11 +43,11 @@
         if (maxTime < 5000){
             return searchFixedDepth(board, 2);
         }
-        long timeLimit = timeAllocator.allocateTime(board, maxTime);
+        long timeLimit = TimeAllocator.allocateTime(board, maxTime);
         return searchFixedTime(board, timeLimit);
     }
 
-    public Move searchFixedTime(Chessboard board, long maxTime){
+    public static int searchFixedTime(Chessboard board, long maxTime){
         if (!setup){
             setup();
         }
@@ -70,20 +55,23 @@
         /*
         create hash value of the board, used for lookup in transposition table
          */
-        ZobristHash zobristHash = new ZobristHash(board);
-
         long startTime = System.currentTimeMillis();
         
-        List<Move> moves = generateLegalMoves(board, board.isWhiteTurn());
+        int[] moves = board.generateLegalMoves();
         
-        if (moves.size() == 1){
-            return moves.get(0);
+        if (moves.length == 1){
+            return moves[0];
         }
-        
-        Move move = this.iterativeDeepeningDFS.iterativeDeepeningWithAspirationWindows
-                (board, zobristHash, startTime, maxTime);
+
+        int move = 0;
+        try {
+            move = IterativeDeepeningDFS.iterativeDeepeningWithAspirationWindows
+                    (board, startTime, maxTime);
+        } catch (IllegalUnmakeException e) {
+            e.printStackTrace();
+        }
 
-        Assert.assertNotNull(move);
+        Assert.assertNotEquals(move, 0);
         
         if (HEAVY_INFO_LOG){
             statistics.printStatistics();
@@ -95,23 +83,23 @@
         return move;
     }
 
-    public Move getAiMove(){
-        return this.iterativeDeepeningDFS.aspirationSearch.getAiMove();
+    public static int getAiMove(){
+        return AspirationSearch.getAiMove();
     }
 
-    public UCIEntry getUciEntry() {
+    public static UCIEntry getUciEntry() {
         return uciEntry;
     }
 
-    public boolean isStopInstruction() {
+    public static boolean isStopInstruction() {
         return stopInstruction;
     }
 
-    public void setStopInstruction(boolean stopInstruction) {
-        this.stopInstruction = stopInstruction;
+    public static void setStopInstruction(boolean stopInstruction) {
+        stopInstruction = stopInstruction;
     }
 
-    public EngineSpecifications getEngineSpecifications() {
+    public static EngineSpecifications getEngineSpecifications() {
         return engineSpecifications;
     }
 
Index: src/main/java/javacode/chessengine/search/LateMoveReductions.java
===================================================================
--- src/main/java/javacode/chessengine/search/LateMoveReductions.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/com/github/louism33/axolotl/search/LateMoveReductions.java	(date 1543683343000)
@@ -1,7 +1,6 @@
-package javacode.chessengine.search;
+package com.github.louism33.axolotl.search;
 
-import javacode.chessprogram.chess.Chessboard;
-import javacode.chessprogram.chess.Move;
+import com.github.louism33.chesscore.Chessboard;
 
 class LateMoveReductions {
     
@@ -10,7 +9,7 @@
     }
 
     static boolean isLateMoveReductionAllowedHere(Chessboard board,
-                                                  Move move, int depth, int numberOfMovesSearched, boolean reducedSearch,
+                                                  int move, int depth, int numberOfMovesSearched, boolean reducedSearch,
                                                   boolean wasPromotionMove, boolean wasCaptureMove,
                                                   boolean givesCheckMove, boolean pawnToSix, boolean pawnToSeven) {
 
Index: src/main/java/com/github/louism33/axolotl/main/WACTests.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/github/louism33/axolotl/main/WACTests.java	(date 1543833978000)
+++ src/main/java/com/github/louism33/axolotl/main/WACTests.java	(date 1543833978000)
@@ -0,0 +1,394 @@
+package com.github.louism33.axolotl.main;
+
+import com.github.louism33.axolotl.search.Engine;
+import com.github.louism33.chesscore.ExtendedPositionDescriptionParser;
+import com.github.louism33.chesscore.MoveParser;
+import org.junit.Assert;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.Parameterized;
+import org.junit.runners.Parameterized.Parameters;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+
+@RunWith(Parameterized.class)
+public class WACTests {
+    /*
+    Arasan = 10 sec.	298/300
+     */
+
+    private static Engine engine = null;
+    
+    private static final int timeLimit = 5_000;
+
+    @Parameters(name = "{index} Test: {1}")
+    public static Collection<Object[]> data() {
+        List<Object[]> answers = new ArrayList<>();
+
+        // inclusive
+        int counter = 0;
+        int until = 2;
+        int from = 0;
+        
+        for (String splitUpWAC : splitUpWACs) {
+            counter++;
+            
+            if (counter < from){
+//                continue;
+            }
+            
+            Object[] objectAndName = new Object[2];
+            ExtendedPositionDescriptionParser.EPDObject EPDObject = ExtendedPositionDescriptionParser.parseEDPPosition(splitUpWAC);
+            objectAndName[0] = EPDObject;
+            objectAndName[1] = EPDObject.getId();
+            answers.add(objectAndName);
+            
+
+            if (counter >= until){
+//                break;
+            }
+        }
+        return answers;
+    }
+
+
+    private static ExtendedPositionDescriptionParser.EPDObject EPDObject;
+
+    public WACTests(Object edp, Object name) {
+        EPDObject = (ExtendedPositionDescriptionParser.EPDObject) edp;
+    }
+
+
+    public static void reset(){
+//        engine = new Engine();
+    }
+
+    @Test
+    public void test() {
+        WACTests.reset();
+        System.out.println(EPDObject.getBoard());
+
+        int move = engine.searchFixedTime(EPDObject.getBoard(), timeLimit);
+        System.out.println(MoveParser.toString(move));
+
+        List<Integer> winningMoveDestination = EPDObject.getBestMoveDestinationIndex();
+        int myMoveDestination = MoveParser.getDestinationIndex(move);
+
+        Assert.assertTrue(winningMoveDestination.contains(myMoveDestination));
+
+
+        List<Integer> losingMoveDestination = EPDObject.getAvoidMoveDestinationIndex();
+
+        Assert.assertFalse(losingMoveDestination.contains(myMoveDestination));
+    }
+
+    private static final String wacTests = "" +
+            "2rr3k/pp3pp1/1nnqbN1p/3pN3/2pP4/2P3Q1/PPB4P/R4RK1 w - - bm Qg6; id \"WAC.001\";\n" +
+            "8/7p/5k2/5p2/p1p2P2/Pr1pPK2/1P1R3P/8 b - - bm Rxb2; id \"WAC.002\";\n" +
+            "5rk1/1ppb3p/p1pb4/6q1/3P1p1r/2P1R2P/PP1BQ1P1/5RKN w - - bm Rg3; id \"WAC.003\";\n" +
+            "r1bq2rk/pp3pbp/2p1p1pQ/7P/3P4/2PB1N2/PP3PPR/2KR4 w - - bm Qxh7+; id \"WAC.004\";\n" +
+            "5k2/6pp/p1qN4/1p1p4/3P4/2PKP2Q/PP3r2/3R4 b - - bm Qc4+; id \"WAC.005\";\n" +
+            "7k/p7/1R5K/6r1/6p1/6P1/8/8 w - - bm Rb7; id \"WAC.006\";\n" +
+            "rnbqkb1r/pppp1ppp/8/4P3/6n1/7P/PPPNPPP1/R1BQKBNR b KQkq - bm Ne3; id \"WAC.007\";\n" +
+            "r4q1k/p2bR1rp/2p2Q1N/5p2/5p2/2P5/PP3PPP/R5K1 w - - bm Rf7; id \"WAC.008\";\n" +
+            "3q1rk1/p4pp1/2pb3p/3p4/6Pr/1PNQ4/P1PB1PP1/4RRK1 b - - bm Bh2+; id \"WAC.009\";\n" +
+            "2br2k1/2q3rn/p2NppQ1/2p1P3/Pp5R/4P3/1P3PPP/3R2K1 w - - bm Rxh7; id \"WAC.010\";\n" +
+            "r1b1kb1r/3q1ppp/pBp1pn2/8/Np3P2/5B2/PPP3PP/R2Q1RK1 w kq - bm Bxc6; id \"WAC.011\";\n" +
+            "4k1r1/2p3r1/1pR1p3/3pP2p/3P2qP/P4N2/1PQ4P/5R1K b - - bm Qxf3+; id \"WAC.012\";\n" +
+            "5rk1/pp4p1/2n1p2p/2Npq3/2p5/6P1/P3P1BP/R4Q1K w - - bm Qxf8+; id \"WAC.013\";\n" +
+            "r2rb1k1/pp1q1p1p/2n1p1p1/2bp4/5P2/PP1BPR1Q/1BPN2PP/R5K1 w - - bm Qxh7+; id \"WAC.014\";\n" +
+            "1R6/1brk2p1/4p2p/p1P1Pp2/P7/6P1/1P4P1/2R3K1 w - - bm Rxb7; id \"WAC.015\";\n" +
+            "r4rk1/ppp2ppp/2n5/2bqp3/8/P2PB3/1PP1NPPP/R2Q1RK1 w - - bm Nc3; id \"WAC.016\";\n" +
+            "1k5r/pppbn1pp/4q1r1/1P3p2/2NPp3/1QP5/P4PPP/R1B1R1K1 w - - bm Ne5; id \"WAC.017\";\n" +
+            "R7/P4k2/8/8/8/8/r7/6K1 w - - bm Rh8; id \"WAC.018\";\n" +
+            "r1b2rk1/ppbn1ppp/4p3/1QP4q/3P4/N4N2/5PPP/R1B2RK1 w - - bm c6; id \"WAC.019\";\n" +
+            "r2qkb1r/1ppb1ppp/p7/4p3/P1Q1P3/2P5/5PPP/R1B2KNR b kq - bm Bb5; id \"WAC.020\";\n" +
+            "5rk1/1b3p1p/pp3p2/3n1N2/1P6/P1qB1PP1/3Q3P/4R1K1 w - - bm Qh6; id \"WAC.021\";\n" +
+            "r1bqk2r/ppp1nppp/4p3/n5N1/2BPp3/P1P5/2P2PPP/R1BQK2R w KQkq - bm Ba2 Nxf7; id \"WAC.022\";\n" +
+            "r3nrk1/2p2p1p/p1p1b1p1/2NpPq2/3R4/P1N1Q3/1PP2PPP/4R1K1 w - - bm g4; id \"WAC.023\";\n" +
+            "6k1/1b1nqpbp/pp4p1/5P2/1PN5/4Q3/P5PP/1B2B1K1 b - - bm Bd4; id \"WAC.024\";\n" +
+            "3R1rk1/8/5Qpp/2p5/2P1p1q1/P3P3/1P2PK2/8 b - - bm Qh4+; id \"WAC.025\";\n" +
+            "3r2k1/1p1b1pp1/pq5p/8/3NR3/2PQ3P/PP3PP1/6K1 b - - bm Bf5; id \"WAC.026\";\n" +
+            "7k/pp4np/2p3p1/3pN1q1/3P4/Q7/1r3rPP/2R2RK1 w - - bm Qf8+; id \"WAC.027\";\n" +
+            "1r1r2k1/4pp1p/2p1b1p1/p3R3/RqBP4/4P3/1PQ2PPP/6K1 b - - bm Qe1+; id \"WAC.028\";\n" +
+            "r2q2k1/pp1rbppp/4pn2/2P5/1P3B2/6P1/P3QPBP/1R3RK1 w - - bm c6; id \"WAC.029\";\n" +
+            "1r3r2/4q1kp/b1pp2p1/5p2/pPn1N3/6P1/P3PPBP/2QRR1K1 w - - bm Nxd6; id \"WAC.030\";\n" +
+            "rb3qk1/pQ3ppp/4p3/3P4/8/1P3N2/1P3PPP/3R2K1 w - - bm Qxa8 d6 dxe6 g3; id \"WAC.031\";\n" +
+            "6k1/p4p1p/1p3np1/2q5/4p3/4P1N1/PP3PPP/3Q2K1 w - - bm Qd8+; id \"WAC.032\";\n" +
+            "8/p1q2pkp/2Pr2p1/8/P3Q3/6P1/5P1P/2R3K1 w - - bm Qe5+ Qf4; id \"WAC.033\";\n" +
+            "7k/1b1r2p1/p6p/1p2qN2/3bP3/3Q4/P5PP/1B1R3K b - - bm Bg1; id \"WAC.034\";\n" +
+            "r3r2k/2R3pp/pp1q1p2/8/3P3R/7P/PP3PP1/3Q2K1 w - - bm Rxh7+; id \"WAC.035\";\n" +
+            "3r4/2p1rk2/1pQq1pp1/7p/1P1P4/P4P2/6PP/R1R3K1 b - - bm Re1+; id \"WAC.036\";\n" +
+            "2r5/2rk2pp/1pn1pb2/pN1p4/P2P4/1N2B3/nPR1KPPP/3R4 b - - bm Nxd4+; id \"WAC.037\";\n" +
+            "4k3/p4prp/1p6/2b5/8/2Q3P1/P2R1PKP/4q3 w - - bm Qd3 Rd8+; id \"WAC.038\";\n" +
+            "r1br2k1/pp2bppp/2nppn2/8/2P1PB2/2N2P2/PqN1B1PP/R2Q1R1K w - - bm Na4; id \"WAC.039\";\n" +
+            "3r1r1k/1p4pp/p4p2/8/1PQR4/6Pq/P3PP2/2R3K1 b - - bm Rc8; id \"WAC.040\";\n" +
+            "1k6/5RP1/1P6/1K6/6r1/8/8/8 w - - bm Ka5 Kc5 b7; id \"WAC.041\";\n" +
+            "r1b1r1k1/pp1n1pbp/1qp3p1/3p4/1B1P4/Q3PN2/PP2BPPP/R4RK1 w - - bm Ba5; id \"WAC.042\";\n" +
+            "r2q3k/p2P3p/1p3p2/3QP1r1/8/B7/P5PP/2R3K1 w - - bm Be7 Qxa8; id \"WAC.043\";\n" +
+            "3rb1k1/pq3pbp/4n1p1/3p4/2N5/2P2QB1/PP3PPP/1B1R2K1 b - - bm dxc4; id \"WAC.044\";\n" +
+            "7k/2p1b1pp/8/1p2P3/1P3r2/2P3Q1/1P5P/R4qBK b - - bm Qxa1; id \"WAC.045\";\n" +
+            "r1bqr1k1/pp1nb1p1/4p2p/3p1p2/3P4/P1N1PNP1/1PQ2PP1/3RKB1R w K - bm Nb5; id \"WAC.046\";\n" +
+            "r1b2rk1/pp2bppp/2n1pn2/q5B1/2BP4/2N2N2/PP2QPPP/2R2RK1 b - - bm Nxd4; id \"WAC.047\";\n" +
+            "1rbq1rk1/p1p1bppp/2p2n2/8/Q1BP4/2N5/PP3PPP/R1B2RK1 b - - bm Rb4; id \"WAC.048\";\n" +
+            "2b3k1/4rrpp/p2p4/2pP2RQ/1pP1Pp1N/1P3P1P/1q6/6RK w - - bm Qxh7+; id \"WAC.049\";\n" +
+            "k4r2/1R4pb/1pQp1n1p/3P4/5p1P/3P2P1/r1q1R2K/8 w - - bm Rxb6+; id \"WAC.050\";\n" +
+            "r1bq1r2/pp4k1/4p2p/3pPp1Q/3N1R1P/2PB4/6P1/6K1 w - - bm Rg4+; id \"WAC.051\";\n" +
+            "r1k5/1p3q2/1Qpb4/3N1p2/5Pp1/3P2Pp/PPPK3P/4R3 w - - bm Re7 c4; id \"WAC.052\";\n" +
+            "6k1/6p1/p7/3Pn3/5p2/4rBqP/P4RP1/5QK1 b - - bm Re1; id \"WAC.053\";\n" +
+            "r3kr2/1pp4p/1p1p4/7q/4P1n1/2PP2Q1/PP4P1/R1BB2K1 b q - bm Qh1+; id \"WAC.054\";\n" +
+            "r3r1k1/pp1q1pp1/4b1p1/3p2B1/3Q1R2/8/PPP3PP/4R1K1 w - - bm Qxg7+; id \"WAC.055\";\n" +
+            "r1bqk2r/pppp1ppp/5n2/2b1n3/4P3/1BP3Q1/PP3PPP/RNB1K1NR b KQkq - bm Bxf2+; id \"WAC.056\";\n" +
+            "r3q1kr/ppp5/3p2pQ/8/3PP1b1/5R2/PPP3P1/5RK1 w - - bm Rf8+; id \"WAC.057\";\n" +
+            "8/8/2R5/1p2qp1k/1P2r3/2PQ2P1/5K2/8 w - - bm Qd1+; id \"WAC.058\";\n" +
+            "r1b2rk1/2p1qnbp/p1pp2p1/5p2/2PQP3/1PN2N1P/PB3PP1/3R1RK1 w - - bm Nd5; id \"WAC.059\";\n" +
+            "rn1qr1k1/1p2np2/2p3p1/8/1pPb4/7Q/PB1P1PP1/2KR1B1R w - - bm Qh8+; id \"WAC.060\";\n" +
+            "3qrbk1/ppp1r2n/3pP2p/3P4/2P4P/1P3Q2/PB6/R4R1K w - - bm Qf7+; id \"WAC.061\";\n" +
+            "6r1/3Pn1qk/p1p1P1rp/2Q2p2/2P5/1P4P1/P3R2P/5RK1 b - - bm Rxg3+; id \"WAC.062\";\n" +
+            "r1brnbk1/ppq2pp1/4p2p/4N3/3P4/P1PB1Q2/3B1PPP/R3R1K1 w - - bm Nxf7; id \"WAC.063\";\n" +
+            "8/6pp/3q1p2/3n1k2/1P6/3NQ2P/5PP1/6K1 w - - bm g4+; id \"WAC.064\";\n" +
+            "1r1r1qk1/p2n1p1p/bp1Pn1pQ/2pNp3/2P2P1N/1P5B/P6P/3R1RK1 w - - bm Ne7+; id \"WAC.065\";\n" +
+            "1k1r2r1/ppq5/1bp4p/3pQ3/8/2P2N2/PP4P1/R4R1K b - - bm Qxe5; id \"WAC.066\";\n" +
+            "3r2k1/p2q4/1p4p1/3rRp1p/5P1P/6PK/P3R3/3Q4 w - - bm Rxd5; id \"WAC.067\";\n" +
+            "6k1/5ppp/1q6/2b5/8/2R1pPP1/1P2Q2P/7K w - - bm Qxe3; id \"WAC.068\";\n" +
+            "2k5/pppr4/4R3/4Q3/2pp2q1/8/PPP2PPP/6K1 w - - bm f3 h3; id \"WAC.069\";\n" +
+            "2kr3r/pppq1ppp/3p1n2/bQ2p3/1n1PP3/1PN1BN1P/1PP2PP1/2KR3R b - - bm Na2+; id \"WAC.070\";\n" +
+            "2kr3r/pp1q1ppp/5n2/1Nb5/2Pp1B2/7Q/P4PPP/1R3RK1 w - - bm Nxa7+; id \"WAC.071\";\n" +
+            "r3r1k1/pp1n1ppp/2p5/4Pb2/2B2P2/B1P5/P5PP/R2R2K1 w - - bm e6; id \"WAC.072\";\n" +
+            "r1q3rk/1ppbb1p1/4Np1p/p3pP2/P3P3/2N4R/1PP1Q1PP/3R2K1 w - - bm Qd2; id \"WAC.073\";\n" +
+            "5r1k/pp4pp/2p5/2b1P3/4Pq2/1PB1p3/P3Q1PP/3N2K1 b - - bm Qf1+; id \"WAC.074\";\n" +
+            "r3r1k1/pppq1ppp/8/8/1Q4n1/7P/PPP2PP1/RNB1R1K1 b - - bm Qd6; id \"WAC.075\";\n" +
+            "r1b1qrk1/2p2ppp/pb1pnn2/1p2pNB1/3PP3/1BP5/PP2QPPP/RN1R2K1 w - - bm Bxf6; id \"WAC.076\";\n" +
+            "3r2k1/ppp2ppp/6q1/b4n2/3nQB2/2p5/P4PPP/RN3RK1 b - - bm Ng3; id \"WAC.077\";\n" +
+            "r2q3r/ppp2k2/4nbp1/5Q1p/2P1NB2/8/PP3P1P/3RR1K1 w - - bm Ng5+; id \"WAC.078\";\n" +
+            "r3k2r/pbp2pp1/3b1n2/1p6/3P3p/1B2N1Pq/PP1PQP1P/R1B2RK1 b kq - bm Qxh2+; id \"WAC.079\";\n" +
+            "r4rk1/p1B1bpp1/1p2pn1p/8/2PP4/3B1P2/qP2QP1P/3R1RK1 w - - bm Ra1; id \"WAC.080\";\n" +
+            "r4rk1/1bR1bppp/4pn2/1p2N3/1P6/P3P3/4BPPP/3R2K1 b - - bm Bd6; id \"WAC.081\";\n" +
+            "3rr1k1/pp3pp1/4b3/8/2P1B2R/6QP/P3q1P1/5R1K w - - bm Bh7+; id \"WAC.082\";\n" +
+            "3rr1k1/ppqbRppp/2p5/8/3Q1n2/2P3N1/PPB2PPP/3R2K1 w - - bm Qxd7; id \"WAC.083\";\n" +
+            "r2q1r1k/2p1b1pp/p1n5/1p1Q1bN1/4n3/1BP1B3/PP3PPP/R4RK1 w - - bm Qg8+; id \"WAC.084\";\n" +
+            "kr2R3/p4r2/2pq4/2N2p1p/3P2p1/Q5P1/5P1P/5BK1 w - - bm Na6; id \"WAC.085\";\n" +
+            "8/p7/1ppk1n2/5ppp/P1PP4/2P1K1P1/5N1P/8 b - - bm Ng4+; id \"WAC.086\";\n" +
+            "8/p3k1p1/4r3/2ppNpp1/PP1P4/2P3KP/5P2/8 b - - bm Rxe5; id \"WAC.087\";\n" +
+            "r6k/p1Q4p/2p1b1rq/4p3/B3P3/4P3/PPP3P1/4RRK1 b - - bm Rxg2+; id \"WAC.088\";\n" +
+            "1r3b1k/p4rpp/4pp2/3q4/2ppbPPQ/6RK/PP5P/2B1NR2 b - - bm g5; id \"WAC.089\";\n" +
+            "3qrrk1/1pp2pp1/1p2bn1p/5N2/2P5/P1P3B1/1P4PP/2Q1RRK1 w - - bm Nxg7; id \"WAC.090\";\n" +
+            "2qr2k1/4b1p1/2p2p1p/1pP1p3/p2nP3/PbQNB1PP/1P3PK1/4RB2 b - - bm Be6; id \"WAC.091\";\n" +
+            "r4rk1/1p2ppbp/p2pbnp1/q7/3BPPP1/2N2B2/PPP4P/R2Q1RK1 b - - bm Bxg4; id \"WAC.092\";\n" +
+            "r1b1k1nr/pp3pQp/4pq2/3pn3/8/P1P5/2P2PPP/R1B1KBNR w KQkq - bm Bh6; id \"WAC.093\";\n" +
+            "8/k7/p7/3Qp2P/n1P5/3KP3/1q6/8 b - - bm e4+; id \"WAC.094\";\n" +
+            "2r5/1r6/4pNpk/3pP1qp/8/2P1QP2/5PK1/R7 w - - bm Ng4+; id \"WAC.095\";\n" +
+            "r1b4k/ppp2Bb1/6Pp/3pP3/1qnP1p1Q/8/PPP3P1/1K1R3R w - - bm Qd8+ b3; id \"WAC.096\";\n" +
+            "6k1/5p2/p5np/4B3/3P4/1PP1q3/P3r1QP/6RK w - - bm Qa8+; id \"WAC.097\";\n" +
+            "1r3rk1/5pb1/p2p2p1/Q1n1q2p/1NP1P3/3p1P1B/PP1R3P/1K2R3 b - - bm Nxe4; id \"WAC.098\";\n" +
+            "r1bq1r1k/1pp1Np1p/p2p2pQ/4R3/n7/8/PPPP1PPP/R1B3K1 w - - bm Rh5; id \"WAC.099\";\n" +
+            "8/k1b5/P4p2/1Pp2p1p/K1P2P1P/8/3B4/8 w - - bm Be3 b6+; id \"WAC.100\";\n" +
+            "5rk1/p5pp/8/8/2Pbp3/1P4P1/7P/4RN1K b - - bm Bc3; id \"WAC.101\";\n" +
+            "2Q2n2/2R4p/1p1qpp1k/8/3P3P/3B2P1/5PK1/r7 w - - bm Qxf8+; id \"WAC.102\";\n" +
+            "6k1/2pb1r1p/3p1PpQ/p1nPp3/1q2P3/2N2P2/PrB5/2K3RR w - - bm Qxg6+; id \"WAC.103\";\n" +
+            "b4r1k/pq2rp2/1p1bpn1p/3PN2n/2P2P2/P2B3K/1B2Q2N/3R2R1 w - - bm Qxh5; id \"WAC.104\";\n" +
+            "r2r2k1/pb3ppp/1p1bp3/7q/3n2nP/PP1B2P1/1B1N1P2/RQ2NRK1 b - - bm Bxg3 Qxh4; id \"WAC.105\";\n" +
+            "4rrk1/pppb4/7p/3P2pq/3Qn3/P5P1/1PP4P/R3RNNK b - - bm Nf2+; id \"WAC.106\";\n" +
+            "5n2/pRrk2p1/P4p1p/4p3/3N4/5P2/6PP/6K1 w - - bm Nb5; id \"WAC.107\";\n" +
+            "r5k1/1q4pp/2p5/p1Q5/2P5/5R2/4RKPP/r7 w - - bm Qe5; id \"WAC.108\";\n" +
+            "rn2k1nr/pbp2ppp/3q4/1p2N3/2p5/QP6/PB1PPPPP/R3KB1R b KQkq - bm c3; id \"WAC.109\";\n" +
+            "2kr4/bp3p2/p2p2b1/P7/2q5/1N4B1/1PPQ2P1/2KR4 b - - bm Be3; id \"WAC.110\";\n" +
+            "6k1/p5p1/5p2/2P2Q2/3pN2p/3PbK1P/7P/6q1 b - - bm Qf1+; id \"WAC.111\";\n" +
+            "r4kr1/ppp5/4bq1b/7B/2PR1Q1p/2N3P1/PP3P1P/2K1R3 w - - bm Rxe6; id \"WAC.112\";\n" +
+            "rnbqkb1r/1p3ppp/5N2/1p2p1B1/2P5/8/PP2PPPP/R2QKB1R b KQkq - bm Qxf6; id \"WAC.113\";\n" +
+            "r1b1rnk1/1p4pp/p1p2p2/3pN2n/3P1PPq/2NBPR1P/PPQ5/2R3K1 w - - bm Bxh7+; id \"WAC.114\";\n" +
+            "4N2k/5rpp/1Q6/p3q3/8/P5P1/1P3P1P/5K2 w - - bm Nd6; id \"WAC.115\";\n" +
+            "r2r2k1/2p2ppp/p7/1p2P1n1/P6q/5P2/1PB1QP1P/R5RK b - - bm Rd2; id \"WAC.116\";\n" +
+            "3r1rk1/q4ppp/p1Rnp3/8/1p6/1N3P2/PP3QPP/3R2K1 b - - bm Ne4; id \"WAC.117\";\n" +
+            "r5k1/pb2rpp1/1p6/2p4q/5R2/2PB2Q1/P1P3PP/5R1K w - - bm Rh4; id \"WAC.118\";\n" +
+            "r2qr1k1/p1p2ppp/2p5/2b5/4nPQ1/3B4/PPP3PP/R1B2R1K b - - bm Qxd3; id \"WAC.119\";\n" +
+            "r4rk1/1bn2qnp/3p1B1Q/p2P1pP1/1pp5/5N1P/PPB2P2/2KR3R w - - bm Rhg1 g6; id \"WAC.120\";\n" +
+            "6k1/5p1p/2bP2pb/4p3/2P5/1p1pNPPP/1P1Q1BK1/1q6 b - - bm Bxf3+; id \"WAC.121\";\n" +
+            "1k6/ppp4p/1n2pq2/1N2Rb2/2P2Q2/8/P4KPP/3r1B2 b - - bm Rxf1+; id \"WAC.122\";\n" +
+            "6k1/1b2rp2/1p4p1/3P4/PQ4P1/2N2q2/5P2/3R2K1 b - - bm Bxd5 Rc7 Re6; id \"WAC.123\";\n" +
+            "6k1/3r4/2R5/P5P1/1P4p1/8/4rB2/6K1 b - - bm g3; id \"WAC.124\";\n" +
+            "r1bqr1k1/pp3ppp/1bp5/3n4/3B4/2N2P1P/PPP1B1P1/R2Q1RK1 b - - bm Bxd4+; id \"WAC.125\";\n" +
+            "r5r1/pQ5p/1qp2R2/2k1p3/4P3/2PP4/P1P3PP/6K1 w - - bm Rxc6+; id \"WAC.126\";\n" +
+            "2k4r/1pr1n3/p1p1q2p/5pp1/3P1P2/P1P1P3/1R2Q1PP/1RB3K1 w - - bm Rxb7; id \"WAC.127\";\n" +
+            "6rk/1pp2Qrp/3p1B2/1pb1p2R/3n1q2/3P4/PPP3PP/R6K w - - bm Qg6; id \"WAC.128\";\n" +
+            "3r1r1k/1b2b1p1/1p5p/2p1Pp2/q1B2P2/4P2P/1BR1Q2K/6R1 b - - bm Bf3; id \"WAC.129\";\n" +
+            "6k1/1pp3q1/5r2/1PPp4/3P1pP1/3Qn2P/3B4/4R1K1 b - - bm Qh6 Qh8; id \"WAC.130\";\n" +
+            "2rq1bk1/p4p1p/1p4p1/3b4/3B1Q2/8/P4PpP/3RR1K1 w - - bm Re8; id \"WAC.131\";\n" +
+            "4r1k1/5bpp/2p5/3pr3/8/1B3pPq/PPR2P2/2R2QK1 b - - bm Re1; id \"WAC.132\";\n" +
+            "r1b1k2r/1pp1q2p/p1n3p1/3QPp2/8/1BP3B1/P5PP/3R1RK1 w kq - bm Bh4; id \"WAC.133\";\n" +
+            "3r2k1/p6p/2Q3p1/4q3/2P1p3/P3Pb2/1P3P1P/2K2BR1 b - - bm Rd1+; id \"WAC.134\";\n" +
+            "3r1r1k/N2qn1pp/1p2np2/2p5/2Q1P2N/3P4/PP4PP/3R1RK1 b - - bm Nd4; id \"WAC.135\";\n" +
+            "6kr/1q2r1p1/1p2N1Q1/5p2/1P1p4/6R1/7P/2R3K1 w - - bm Rc8+; id \"WAC.136\";\n" +
+            "3b1rk1/1bq3pp/5pn1/1p2rN2/2p1p3/2P1B2Q/1PB2PPP/R2R2K1 w - - bm Rd7; id \"WAC.137\";\n" +
+            "r1bq3r/ppppR1p1/5n1k/3P4/6pP/3Q4/PP1N1PP1/5K1R w - - bm h5; id \"WAC.138\";\n" +
+            "rnb3kr/ppp2ppp/1b6/3q4/3pN3/Q4N2/PPP2KPP/R1B1R3 w - - bm Nf6+; id \"WAC.139\";\n" +
+            "r2b1rk1/pq4p1/4ppQP/3pB1p1/3P4/2R5/PP3PP1/5RK1 w - - bm Bc7 Rc7; id \"WAC.140\";\n" +
+            "4r1k1/p1qr1p2/2pb1Bp1/1p5p/3P1n1R/1B3P2/PP3PK1/2Q4R w - - bm Qxf4; id \"WAC.141\";\n" +
+            "r2q3n/ppp2pk1/3p4/5Pr1/2NP1Qp1/2P2pP1/PP3K2/4R2R w - - bm Re8 f6+; id \"WAC.142\";\n" +
+            "5b2/pp2r1pk/2pp1pRp/4rP1N/2P1P3/1P4QP/P3q1P1/5R1K w - - bm Rxh6+; id \"WAC.143\";\n" +
+            "r2q1rk1/pp3ppp/2p2b2/8/B2pPPb1/7P/PPP1N1P1/R2Q1RK1 b - - bm d3; id \"WAC.144\";\n" +
+            "r1bq4/1p4kp/3p1n2/p4pB1/2pQ4/8/1P4PP/4RRK1 w - - bm Re8; id \"WAC.145\";\n" +
+            "8/8/2Kp4/3P1B2/2P2k2/5p2/8/8 w - - bm Bc8 Bd3 Bh3; id \"WAC.146\";\n" +
+            "r2r2k1/ppqbppbp/2n2np1/2pp4/6P1/1P1PPNNP/PBP2PB1/R2QK2R b KQ - bm Nxg4; id \"WAC.147\";\n" +
+            "2r1k3/6pr/p1nBP3/1p3p1p/2q5/2P5/P1R4P/K2Q2R1 w - - bm Rxg7; id \"WAC.148\";\n" +
+            "6k1/6p1/2p4p/4Pp2/4b1qP/2Br4/1P2RQPK/8 b - - bm Bxg2; id \"WAC.149\";\n" +
+            "r3r1k1/5p2/pQ1b2pB/1p6/4p3/6P1/Pq2BP1P/2R3K1 b - - bm Ba3 Be5 Bf8 e3; c0 \"All win but e3 is best.\"; id \"WAC.150\";\n" +
+            "8/3b2kp/4p1p1/pr1n4/N1N4P/1P4P1/1K3P2/3R4 w - - bm Nc3; id \"WAC.151\";\n" +
+            "1br2rk1/1pqb1ppp/p3pn2/8/1P6/P1N1PN1P/1B3PP1/1QRR2K1 w - - bm Ne4; id \"WAC.152\";\n" +
+            "2r3k1/q4ppp/p3p3/pnNp4/2rP4/2P2P2/4R1PP/2R1Q1K1 b - - bm Nxd4; id \"WAC.153\";\n" +
+            "r1b2rk1/2p2ppp/p7/1p6/3P3q/1BP3bP/PP3QP1/RNB1R1K1 w - - bm Qxf7+; id \"WAC.154\";\n" +
+            "5bk1/1rQ4p/5pp1/2pP4/3n1PP1/7P/1q3BB1/4R1K1 w - - bm d6; id \"WAC.155\";\n" +
+            "r1b1qN1k/1pp3p1/p2p3n/4p1B1/8/1BP4Q/PP3KPP/8 w - - bm Qxh6+; id \"WAC.156\";\n" +
+            "5rk1/p4ppp/2p1b3/3Nq3/4P1n1/1p1B2QP/1PPr2P1/1K2R2R w - - bm Ne7+; id \"WAC.157\";\n" +
+            "5rk1/n1p1R1bp/p2p4/1qpP1QB1/7P/2P3P1/PP3P2/6K1 w - - bm Rxg7+; id \"WAC.158\";\n" +
+            "r1b2r2/5P1p/ppn3pk/2p1p1Nq/1bP1PQ2/3P4/PB4BP/1R3RK1 w - - bm Ne6+; id \"WAC.159\";\n" +
+            "qn1kr2r/1pRbb3/pP5p/P2pP1pP/3N1pQ1/3B4/3B1PP1/R5K1 w - - bm Qxd7+; id \"WAC.160\";\n" +
+            "3r3k/3r1P1p/pp1Nn3/2pp4/7Q/6R1/Pq4PP/5RK1 w - - bm Qxd8+; id \"WAC.161\";\n" +
+            "r3kbnr/p4ppp/2p1p3/8/Q1B3b1/2N1B3/PP3PqP/R3K2R w KQkq - bm Bd5; id \"WAC.162\";\n" +
+            "5rk1/2p4p/2p4r/3P4/4p1b1/1Q2NqPp/PP3P1K/R4R2 b - - bm Qg2+; id \"WAC.163\";\n" +
+            "8/6pp/4p3/1p1n4/1NbkN1P1/P4P1P/1PR3K1/r7 w - - bm Rxc4+; id \"WAC.164\";\n" +
+            "1r5k/p1p3pp/8/8/4p3/P1P1R3/1P1Q1qr1/2KR4 w - - bm Re2; id \"WAC.165\";\n" +
+            "r3r1k1/5pp1/p1p4p/2Pp4/8/q1NQP1BP/5PP1/4K2R b K - bm d4; id \"WAC.166\";\n" +
+            "7Q/ppp2q2/3p2k1/P2Ppr1N/1PP5/7R/5rP1/6K1 b - - bm Rxg2+; id \"WAC.167\";\n" +
+            "r3k2r/pb1q1p2/8/2p1pP2/4p1p1/B1P1Q1P1/P1P3K1/R4R2 b kq - bm Qd2+; id \"WAC.168\";\n" +
+            "5rk1/1pp3bp/3p2p1/2PPp3/1P2P3/2Q1B3/4q1PP/R5K1 b - - bm Bh6; id \"WAC.169\";\n" +
+            "5r1k/6Rp/1p2p3/p2pBp2/1qnP4/4P3/Q4PPP/6K1 w - - bm Qxc4; id \"WAC.170\";\n" +
+            "2rq4/1b2b1kp/p3p1p1/1p1nNp2/7P/1B2B1Q1/PP3PP1/3R2K1 w - - bm Bh6+; id \"WAC.171\";\n" +
+            "5r1k/p5pp/8/1P1pq3/P1p2nR1/Q7/5BPP/6K1 b - - bm Qe1+; id \"WAC.172\";\n" +
+            "2r1b3/1pp1qrk1/p1n1P1p1/7R/2B1p3/4Q1P1/PP3PP1/3R2K1 w - - bm Qh6+; id \"WAC.173\";\n" +
+            "2r2rk1/6p1/p3pq1p/1p1b1p2/3P1n2/PP3N2/3N1PPP/1Q2RR1K b - - bm Nxg2; id \"WAC.174\";\n" +
+            "r5k1/pppb3p/2np1n2/8/3PqNpP/3Q2P1/PPP5/R4RK1 w - - bm Nh5; id \"WAC.175\";\n" +
+            "r1bq3r/ppp2pk1/3p1pp1/8/2BbPQ2/2NP2P1/PPP4P/R4R1K b - - bm Rxh2+; id \"WAC.176\";\n" +
+            "r1b3r1/4qk2/1nn1p1p1/3pPp1P/p4P2/1p3BQN/PKPBN3/3R3R b - - bm Qa3+; id \"WAC.177\";\n" +
+            "3r2k1/p1rn1p1p/1p2pp2/6q1/3PQNP1/5P2/P1P4R/R5K1 w - - bm Nxe6; id \"WAC.178\";\n" +
+            "r1b2r1k/pp4pp/3p4/3B4/8/1QN3Pn/PP3q1P/R3R2K b - - bm Qg1+; id \"WAC.179\";\n" +
+            "r1q2rk1/p3bppb/3p1n1p/2nPp3/1p2P1P1/6NP/PP2QPB1/R1BNK2R b KQ - bm Nxd5; id \"WAC.180\";\n" +
+            "r3k2r/2p2p2/p2p1n2/1p2p3/4P2p/1PPPPp1q/1P5P/R1N2QRK b kq - bm Ng4; id \"WAC.181\";\n" +
+            "r1b2rk1/ppqn1p1p/2n1p1p1/2b3N1/2N5/PP1BP3/1B3PPP/R2QK2R w KQ - bm Qh5; id \"WAC.182\";\n" +
+            "1r2k1r1/5p2/b3p3/1p2b1B1/3p3P/3B4/PP2KP2/2R3R1 w - - bm Bf6; id \"WAC.183\";\n" +
+            "4kn2/r4p1r/p3bQ2/q1nNP1Np/1p5P/8/PPP3P1/2KR3R w - - bm Qe7+; id \"WAC.184\";\n" +
+            "1r1rb1k1/2p3pp/p2q1p2/3PpP1Q/Pp1bP2N/1B5R/1P4PP/2B4K w - - bm Qxh7+; id \"WAC.185\";\n" +
+            "r5r1/p1q2p1k/1p1R2pB/3pP3/6bQ/2p5/P1P1NPPP/6K1 w - - bm Bf8+; id \"WAC.186\";\n" +
+            "6k1/5p2/p3p3/1p3qp1/2p1Qn2/2P1R3/PP1r1PPP/4R1K1 b - - bm Nh3+; id \"WAC.187\";\n" +
+            "3RNbk1/pp3p2/4rQpp/8/1qr5/7P/P4P2/3R2K1 w - - bm Qg7+; id \"WAC.188\";\n" +
+            "3r1k2/1ppPR1n1/p2p1rP1/3P3p/4Rp1N/5K2/P1P2P2/8 w - - bm Re8+; id \"WAC.189\";\n" +
+            "8/p2b2kp/1q1p2p1/1P1Pp3/4P3/3B2P1/P2Q3P/2Nn3K b - - bm Bh3; id \"WAC.190\";\n" +
+            "2r1Rn1k/1p1q2pp/p7/5p2/3P4/1B4P1/P1P1QP1P/6K1 w - - bm Qc4; id \"WAC.191\";\n" +
+            "r3k3/ppp2Npp/4Bn2/2b5/1n1pp3/N4P2/PPP3qP/R2QKR2 b Qq - bm Nd3+; id \"WAC.192\";\n" +
+            "5bk1/p4ppp/Qp6/4B3/1P6/Pq2P1P1/2rr1P1P/R4RK1 b - - bm Qxe3; id \"WAC.193\";\n" +
+            "5rk1/ppq2ppp/2p5/4bN2/4P3/6Q1/PPP2PPP/3R2K1 w - - bm Nh6+; id \"WAC.194\";\n" +
+            "3r1rk1/1p3p2/p3pnnp/2p3p1/2P2q2/1P5P/PB2QPPN/3RR1K1 w - - bm g3; id \"WAC.195\";\n" +
+            "rr4k1/p1pq2pp/Q1n1pn2/2bpp3/4P3/2PP1NN1/PP3PPP/R1B1K2R b KQ - bm Nb4; id \"WAC.196\";\n" +
+            "7k/1p4p1/7p/3P1n2/4Q3/2P2P2/PP3qRP/7K b - - bm Qf1+; id \"WAC.197\";\n" +
+            "2br2k1/ppp2p1p/4p1p1/4P2q/2P1Bn2/2Q5/PP3P1P/4R1RK b - - bm Rd3; id \"WAC.198\";\n" +
+            "r1br2k1/pp2nppp/2n5/1B1q4/Q7/4BN2/PP3PPP/2R2RK1 w - - bm Bxc6 Rcd1 Rfd1; id \"WAC.199\";\n" +
+            "2rqrn1k/pb4pp/1p2pp2/n2P4/2P3N1/P2B2Q1/1B3PPP/2R1R1K1 w - - bm Bxf6; id \"WAC.200\";\n" +
+            "2b2r1k/4q2p/3p2pQ/2pBp3/8/6P1/1PP2P1P/R5K1 w - - bm Ra7; id \"WAC.201\";\n" +
+            "QR2rq1k/2p3p1/3p1pPp/8/4P3/8/P1r3PP/1R4K1 b - - bm Rxa2; id \"WAC.202\";\n" +
+            "r4rk1/5ppp/p3q1n1/2p2NQ1/4n3/P3P3/1B3PPP/1R3RK1 w - - bm Qh6; id \"WAC.203\";\n" +
+            "r1b1qrk1/1p3ppp/p1p5/3Nb3/5N2/P7/1P4PQ/K1R1R3 w - - bm Rxe5; id \"WAC.204\";\n" +
+            "r3rnk1/1pq2bb1/p4p2/3p1Pp1/3B2P1/1NP4R/P1PQB3/2K4R w - - bm Qxg5; id \"WAC.205\";\n" +
+            "1Qq5/2P1p1kp/3r1pp1/8/8/7P/p4PP1/2R3K1 b - - bm Rc6; id \"WAC.206\";\n" +
+            "r1bq2kr/p1pp1ppp/1pn1p3/4P3/2Pb2Q1/BR6/P4PPP/3K1BNR w - - bm Qxg7+; id \"WAC.207\";\n" +
+            "3r1bk1/ppq3pp/2p5/2P2Q1B/8/1P4P1/P6P/5RK1 w - - bm Bf7+; id \"WAC.208\";\n" +
+            "4kb1r/2q2p2/r2p4/pppBn1B1/P6P/6Q1/1PP5/2KRR3 w k - bm Rxe5+; id \"WAC.209\";\n" +
+            "3r1rk1/pp1q1ppp/3pn3/2pN4/5PP1/P5PQ/1PP1B3/1K1R4 w - - bm Rh1; id \"WAC.210\";\n" +
+            "r1bqrk2/pp1n1n1p/3p1p2/P1pP1P1Q/2PpP1NP/6R1/2PB4/4RBK1 w - - bm Qxf7+; id \"WAC.211\";\n" +
+            "rn1qr2Q/pbppk1p1/1p2pb2/4N3/3P4/2N5/PPP3PP/R4RK1 w - - bm Qxg7+; id \"WAC.212\";\n" +
+            "3r1r1k/1b4pp/ppn1p3/4Pp1R/Pn5P/3P4/4QP2/1qB1NKR1 w - - bm Rxh7+; id \"WAC.213\";\n" +
+            "r2r2k1/1p2qpp1/1np1p1p1/p3N3/2PPN3/bP5R/4QPPP/4R1K1 w - - bm Ng5; id \"WAC.214\";\n" +
+            "3r2k1/pb1q1pp1/1p2pb1p/8/3N4/P2QB3/1P3PPP/1Br1R1K1 w - - bm Qh7+; id \"WAC.215\";\n" +
+            "r2qr1k1/1b1nbppp/p3pn2/1p1pN3/3P1B2/2PB1N2/PP2QPPP/R4RK1 w - - bm Nxf7 a4; id \"WAC.216\";\n" +
+            "r3kb1r/1pp3p1/p3bp1p/5q2/3QN3/1P6/PBP3P1/3RR1K1 w kq - bm Qd7+; id \"WAC.217\";\n" +
+            "6k1/pp5p/2p3q1/6BP/2nPr1Q1/8/PP3R1K/8 w - - bm Bh6; id \"WAC.218\";\n" +
+            "7k/p4q1p/1pb5/2p5/4B2Q/2P1B3/P6P/7K b - - bm Qf1+; id \"WAC.219\";\n" +
+            "3rr1k1/ppp2ppp/8/5Q2/4n3/1B5R/PPP1qPP1/5RK1 b - - bm Qxf1+; id \"WAC.220\";\n" +
+            "r3k3/P5bp/2N1bp2/4p3/2p5/6NP/1PP2PP1/3R2K1 w q - bm Rd8+; id \"WAC.221\";\n" +
+            "2r1r2k/1q3ppp/p2Rp3/2p1P3/6QB/p3P3/bP3PPP/3R2K1 w - - bm Bf6; id \"WAC.222\";\n" +
+            "r1bqk2r/pp3ppp/5n2/8/1b1npB2/2N5/PP1Q2PP/1K2RBNR w kq - bm Nxe4; id \"WAC.223\";\n" +
+            "5rk1/p1q3pp/1p1r4/2p1pp1Q/1PPn1P2/3B3P/P2R2P1/3R2K1 b - - bm Rh6 e4; id \"WAC.224\";\n" +
+            "4R3/4q1kp/6p1/1Q3b2/1P1b1P2/6KP/8/8 b - - bm Qh4+; id \"WAC.225\";\n" +
+            "2b2rk1/p1p4p/2p1p1p1/br2N1Q1/1p2q3/8/PB3PPP/3R1RK1 w - - bm Nf7; id \"WAC.226\";\n" +
+            "2k1rb1r/ppp3pp/2np1q2/5b2/2B2P2/2P1BQ2/PP1N1P1P/2KR3R b - - bm d5; id \"WAC.227\";\n" +
+            "r4rk1/1bq1bp1p/4p1p1/p2p4/3BnP2/1N1B3R/PPP3PP/R2Q2K1 w - - bm Bxe4; id \"WAC.228\";\n" +
+            "8/8/8/1p5r/p1p1k1pN/P2pBpP1/1P1K1P2/8 b - - bm Rxh4 b4; id \"WAC.229\";\n" +
+            "2b5/1r6/2kBp1p1/p2pP1P1/2pP4/1pP3K1/1R3P2/8 b - - bm Rb4; id \"WAC.230\";\n" +
+            "r4rk1/1b1nqp1p/p5p1/1p2PQ2/2p5/5N2/PP3PPP/R1BR2K1 w - - bm Bg5; id \"WAC.231\";\n" +
+            "1R2rq1k/2p3p1/Q2p1pPp/8/4P3/8/P1r3PP/1R4K1 w - - bm Qb5 Rxe8; id \"WAC.232\";\n" +
+            "5rk1/p1p2r1p/2pp2p1/4p3/PPPnP3/3Pq1P1/1Q1R1R1P/4NK2 b - - bm Nb3; id \"WAC.233\";\n" +
+            "2kr1r2/p6p/5Pp1/2p5/1qp2Q1P/7R/PP6/1KR5 w - - bm Rb3; id \"WAC.234\";\n" +
+            "5r2/1p1RRrk1/4Qq1p/1PP3p1/8/4B3/1b3P1P/6K1 w - - bm Qe4 Qxf7+ Rxf7+; id \"WAC.235\";\n" +
+            "1R6/p5pk/4p2p/4P3/8/2r3qP/P3R1b1/4Q1K1 b - - bm Rc1; id \"WAC.236\";\n" +
+            "r5k1/pQp2qpp/8/4pbN1/3P4/6P1/PPr4P/1K1R3R b - - bm Rc1+; id \"WAC.237\";\n" +
+            "1k1r4/pp1r1pp1/4n1p1/2R5/2Pp1qP1/3P2QP/P4PB1/1R4K1 w - - bm Bxb7; id \"WAC.238\";\n" +
+            "8/6k1/5pp1/Q6p/5P2/6PK/P4q1P/8 b - - bm Qf1+; id \"WAC.239\";\n" +
+            "2b4k/p1b2p2/2p2q2/3p1PNp/3P2R1/3B4/P1Q2PKP/4r3 w - - bm Qxc6; id \"WAC.240\";\n" +
+            "2rq1rk1/pp3ppp/2n2b2/4NR2/3P4/PB5Q/1P4PP/3R2K1 w - - bm Qxh7+; id \"WAC.241\";\n" +
+            "r1b1r1k1/pp1nqp2/2p1p1pp/8/4N3/P1Q1P3/1P3PPP/1BRR2K1 w - - bm Rxd7; id \"WAC.242\";\n" +
+            "1r3r1k/3p4/1p1Nn1R1/4Pp1q/pP3P1p/P7/5Q1P/6RK w - - bm Qe2; id \"WAC.243\";\n" +
+            "r6r/pp3ppp/3k1b2/2pb4/B4Pq1/2P1Q3/P5PP/1RBR2K1 w - - bm Qxc5+; id \"WAC.244\";\n" +
+            "4rrn1/ppq3bk/3pPnpp/2p5/2PB4/2NQ1RPB/PP5P/5R1K w - - bm Qxg6+; id \"WAC.245\";\n" +
+            "6R1/4qp1p/ppr1n1pk/8/1P2P1QP/6N1/P4PP1/6K1 w - - bm Qh5+; id \"WAC.246\";\n" +
+            "2k1r3/1p2Bq2/p2Qp3/Pb1p1p1P/2pP1P2/2P5/2P2KP1/1R6 w - - bm Rxb5; id \"WAC.247\";\n" +
+            "5r1k/1p4pp/3q4/3Pp1R1/8/8/PP4PP/4Q1K1 b - - bm Qc5+; id \"WAC.248\";\n" +
+            "r4rk1/pbq2pp1/1ppbpn1p/8/2PP4/1P1Q1N2/PBB2PPP/R3R1K1 w - - bm c5 d5; id \"WAC.249\";\n" +
+            "1b5k/7P/p1p2np1/2P2p2/PP3P2/4RQ1R/q2r3P/6K1 w - - bm Re8+; id \"WAC.250\";\n" +
+            "k7/p4p2/P1q1b1p1/3p3p/3Q4/7P/5PP1/1R4K1 w - - bm Qe5 Qf4; id \"WAC.251\";\n" +
+            "1rb1r1k1/p1p2ppp/5n2/2pP4/5P2/2QB4/qNP3PP/2KRB2R b - - bm Bg4 Re2; c0 \"Bg4 wins, but Re2 is far better.\"; id \"WAC.252\";\n" +
+            "k5r1/p4b2/2P5/5p2/3P1P2/4QBrq/P5P1/4R1K1 w - - bm Qe8+; id \"WAC.253\";\n" +
+            "r6k/pp3p1p/2p1bp1q/b3p3/4Pnr1/2PP2NP/PP1Q1PPN/R2B2RK b - - bm Nxh3; id \"WAC.254\";\n" +
+            "3r3r/p4pk1/5Rp1/3q4/1p1P2RQ/5N2/P1P4P/2b4K w - - bm Rfxg6+; id \"WAC.255\";\n" +
+            "3r1rk1/1pb1qp1p/2p3p1/p7/P2Np2R/1P5P/1BP2PP1/3Q1BK1 w - - bm Nf5; id \"WAC.256\";\n" +
+            "4r1k1/pq3p1p/2p1r1p1/2Q1p3/3nN1P1/1P6/P1P2P1P/3RR1K1 w - - bm Rxd4; id \"WAC.257\";\n" +
+            "r3brkn/1p5p/2p2Ppq/2Pp3B/3Pp2Q/4P1R1/6PP/5R1K w - - bm Bxg6; id \"WAC.258\";\n" +
+            "r1bq1rk1/ppp2ppp/2np4/2bN1PN1/2B1P3/3p4/PPP2nPP/R1BQ1K1R w - - bm Qh5; id \"WAC.259\";\n" +
+            "2r2b1r/p1Nk2pp/3p1p2/N2Qn3/4P3/q6P/P4PP1/1R3K1R w - - bm Qe6+; id \"WAC.260\";\n" +
+            "r5k1/1bp3pp/p2p4/1p6/5p2/1PBP1nqP/1PP3Q1/R4R1K b - - bm Nd4; id \"WAC.261\";\n" +
+            "6k1/p1B1b2p/2b3r1/2p5/4p3/1PP1N1Pq/P2R1P2/3Q2K1 b - - bm Rh6; id \"WAC.262\";\n" +
+            "rnbqr2k/pppp1Qpp/8/b2NN3/2B1n3/8/PPPP1PPP/R1B1K2R w KQ - bm Qg8+; id \"WAC.263\";\n" +
+            "r2r2k1/1R2qp2/p5pp/2P5/b1PN1b2/P7/1Q3PPP/1B1R2K1 b - - bm Qe5 Rab8; id \"WAC.264\";\n" +
+            "2r1k2r/2pn1pp1/1p3n1p/p3PP2/4q2B/P1P5/2Q1N1PP/R4RK1 w k - bm exf6; id \"WAC.265\";\n" +
+            "r3q2r/2p1k1p1/p5p1/1p2Nb2/1P2nB2/P7/2PNQbPP/R2R3K b - - bm Rxh2+; id \"WAC.266\";\n" +
+            "2r1kb1r/pp3ppp/2n1b3/1q1N2B1/1P2Q3/8/P4PPP/3RK1NR w Kk - bm Nc7+; id \"WAC.267\";\n" +
+            "2r3kr/ppp2n1p/7B/5q1N/1bp5/2Pp4/PP2RPPP/R2Q2K1 w - - bm Re8+; id \"WAC.268\";\n" +
+            "2kr2nr/pp1n1ppp/2p1p3/q7/1b1P1B2/P1N2Q1P/1PP1BPP1/R3K2R w KQ - bm axb4; id \"WAC.269\";\n" +
+            "2r1r1k1/pp1q1ppp/3p1b2/3P4/3Q4/5N2/PP2RPPP/4R1K1 w - - bm Qg4; id \"WAC.270\";\n" +
+            "2kr4/ppp3Pp/4RP1B/2r5/5P2/1P6/P2p4/3K4 w - - bm Rd6; id \"WAC.271\";\n" +
+            "nrq4r/2k1p3/1p1pPnp1/pRpP1p2/P1P2P2/2P1BB2/1R2Q1P1/6K1 w - - bm Bxc5; id \"WAC.272\";\n" +
+            "2k4B/bpp1qp2/p1b5/7p/1PN1n1p1/2Pr4/P5PP/R3QR1K b - - bm Ng3+ g3; id \"WAC.273\";\n" +
+            "8/1p6/p5R1/k7/Prpp4/K7/1NP5/8 w - - am Rd6; bm Rb6 Rg5+; id \"WAC.274\";\n" +
+            "r1b2rk1/1p1n1ppp/p1p2q2/4p3/P1B1Pn2/1QN2N2/1P3PPP/3R1RK1 b - - bm Nc5 Nxg2 b5; id \"WAC.275\";\n" +
+            "r5k1/pp1RR1pp/1b6/6r1/2p5/B6P/P4qPK/3Q4 w - - bm Qd5+; id \"WAC.276\";\n" +
+            "1r4r1/p2kb2p/bq2p3/3p1p2/5P2/2BB3Q/PP4PP/3RKR2 b - - bm Rg3 Rxg2; id \"WAC.277\";\n" +
+            "r2qkb1r/pppb2pp/2np1n2/5pN1/2BQP3/2N5/PPP2PPP/R1B1K2R w KQkq - bm Bf7+; id \"WAC.278\";\n" +
+            "r7/4b3/2p1r1k1/1p1pPp1q/1P1P1P1p/PR2NRpP/2Q3K1/8 w - - bm Nxf5 Rc3; id \"WAC.279\";\n" +
+            "r1r2bk1/5p1p/pn4p1/N2b4/3Pp3/B3P3/2q1BPPP/RQ3RK1 b - - bm Bxa3; id \"WAC.280\";\n" +
+            "2R5/2R4p/5p1k/6n1/8/1P2QPPq/r7/6K1 w - - bm Rxh7+; id \"WAC.281\";\n" +
+            "6k1/2p3p1/1p1p1nN1/1B1P4/4PK2/8/2r3b1/7R w - - bm Rh8+; id \"WAC.282\";\n" +
+            "3q1rk1/4bp1p/1n2P2Q/3p1p2/6r1/Pp2R2N/1B4PP/7K w - - bm Ng5; id \"WAC.283\";\n" +
+            "3r3k/pp4pp/8/1P6/3N4/Pn2P1qb/1B1Q2B1/2R3K1 w - - bm Nf5; id \"WAC.284\";\n" +
+            "2rr3k/1b2bppP/p2p1n2/R7/3P4/1qB2P2/1P4Q1/1K5R w - - bm Qxg7+; id \"WAC.285\";\n" +
+            "3r1k2/1p6/p4P2/2pP2Qb/8/1P1KB3/P6r/8 b - - bm Rxd5+; id \"WAC.286\";\n" +
+            "rn3k1r/pp2bBpp/2p2n2/q5N1/3P4/1P6/P1P3PP/R1BQ1RK1 w - - bm Qg4 Qh5; id \"WAC.287\";\n" +
+            "r1b2rk1/p4ppp/1p1Qp3/4P2N/1P6/8/P3qPPP/3R1RK1 w - - bm Nf6+; id \"WAC.288\";\n" +
+            "2r3k1/5p1p/p3q1p1/2n3P1/1p1QP2P/1P4N1/PK6/2R5 b - - bm Qe5; id \"WAC.289\";\n" +
+            "2k2r2/2p5/1pq5/p1p1n3/P1P2n1B/1R4Pp/2QR4/6K1 b - - bm Ne2+; id \"WAC.290\";\n" +
+            "5r1k/3b2p1/p6p/1pRpR3/1P1P2q1/P4pP1/5QnP/1B4K1 w - - bm h3; id \"WAC.291\";\n" +
+            "4r3/1Q1qk2p/p4pp1/3Pb3/P7/6PP/5P2/4R1K1 w - - bm d6+; id \"WAC.292\";\n" +
+            "1nbq1r1k/3rbp1p/p1p1pp1Q/1p6/P1pPN3/5NP1/1P2PPBP/R4RK1 w - - bm Nfg5; id \"WAC.293\";\n" +
+            "3r3k/1r3p1p/p1pB1p2/8/p1qNP1Q1/P6P/1P4P1/3R3K w - - bm Bf8 Nf5 Qf4; id \"WAC.294\";\n" +
+            "4r3/p4r1p/R1p2pp1/1p1bk3/4pNPP/2P1K3/2P2P2/3R4 w - - bm Rxd5+; id \"WAC.295\";\n" +
+            "3r4/1p2k2p/p1b1p1p1/4Q1Pn/2B3KP/4pP2/PP2R1N1/6q1 b - - bm Rd4+ Rf8; id \"WAC.296\";\n" +
+            "3r1rk1/p3qp1p/2bb2p1/2p5/3P4/1P6/PBQN1PPP/2R2RK1 b - - bm Bxg2 Bxh2+; id \"WAC.297\";\n" +
+            "3Q4/p3b1k1/2p2rPp/2q5/4B3/P2P4/7P/6RK w - - bm Qh8+; id \"WAC.298\";\n" +
+            "1n2rr2/1pk3pp/pNn2p2/2N1p3/8/6P1/PP2PPKP/2RR4 w - - bm Nca4; id \"WAC.299\";\n" +
+            "b2b1r1k/3R1ppp/4qP2/4p1PQ/4P3/5B2/4N1K1/8 w - - bm g6; id \"WAC.300\";" +
+            "";
+
+    private static final String[] splitUpWACs = wacTests.split("\\\n");
+    static int totalWACS = splitUpWACs.length;
+
+}
+    
\ No newline at end of file
Index: src/main/java/javacode/chessengine/moveordering/KillerMoves.java
===================================================================
--- src/main/java/javacode/chessengine/moveordering/KillerMoves.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/com/github/louism33/axolotl/moveordering/KillerMoves.java	(date 1543675335000)
@@ -1,20 +1,18 @@
-package javacode.chessengine.moveordering;
+package com.github.louism33.axolotl.moveordering;
 
-import javacode.chessprogram.chess.Move;
-
-import static javacode.chessprogram.chess.Copier.copyMove;
+import static com.github.louism33.chesscore.MoveParser.copyMove;
 
 public class KillerMoves {
 
-    public static final Move[][] killerMoves = new Move[100][2];
-    public static final Move[] mateKiller = new Move[100];
+    public static final int[][] killerMoves = new int[100][2];
+    public static final int[] mateKiller = new int[100];
 
-    public static void updateKillerMoves(Move move, int ply){
+    public static void updateKillerMoves(int move, int ply){
         /*
         if we have a new killer move, shift killers to the right
          */
-        if (!move.equals(killerMoves[ply][0])){
-            if (killerMoves[ply][0] != null) {
+        if (move != killerMoves[ply][0]){
+            if (killerMoves[ply][0] != 0) {
                 killerMoves[ply][1] = copyMove(killerMoves[ply][0]);
             }
             killerMoves[ply][0] = copyMove(move);
Index: src/main/java/javacode/chessengine/moveordering/MoveOrderer.java
===================================================================
--- src/main/java/javacode/chessengine/moveordering/MoveOrderer.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/com/github/louism33/axolotl/moveordering/MoveOrderer.java	(date 1543860798000)
@@ -1,163 +1,127 @@
-package javacode.chessengine.moveordering;
+package com.github.louism33.axolotl.moveordering;
 
-import javacode.chessengine.search.Engine;
-import javacode.chessprogram.bitboards.BitBoards;
-import javacode.chessprogram.check.CheckChecker;
-import javacode.chessprogram.chess.Chessboard;
-import javacode.chessprogram.chess.Move;
-import javacode.chessprogram.moveMaking.MoveOrganiser;
-import javacode.chessprogram.moveMaking.MoveParser;
-import javacode.chessprogram.moveMaking.MoveUnmaker;
-import org.junit.Assert;
+import com.github.louism33.axolotl.search.Engine;
+import com.github.louism33.chesscore.BitboardResources;
+import com.github.louism33.chesscore.Chessboard;
+import com.github.louism33.chesscore.IllegalUnmakeException;
+import com.github.louism33.chesscore.MoveParser;
 
-import java.util.ArrayList;
-import java.util.Comparator;
-import java.util.List;
-import java.util.stream.Collectors;
-
-import static javacode.chessengine.moveordering.KillerMoves.killerMoves;
-import static javacode.chessengine.moveordering.KillerMoves.mateKiller;
-import static javacode.chessengine.moveordering.MoveOrderingConstants.*;
-import static javacode.chessprogram.chess.BitManipulations.newPieceOnSquare;
-import static javacode.chessprogram.moveGeneration.MoveGeneratorMaster.generateLegalMoves;
-import static javacode.chessprogram.moveMaking.MoveParser.*;
+import static com.github.louism33.axolotl.moveordering.KillerMoves.killerMoves;
+import static com.github.louism33.axolotl.moveordering.KillerMoves.mateKiller;
+import static com.github.louism33.axolotl.moveordering.MoveOrderingConstants.*;
+import static com.github.louism33.chesscore.BitOperations.newPieceOnSquare;
+import static com.github.louism33.chesscore.MoveParser.*;
 
 @SuppressWarnings("FieldCanBeLocal")
 public class MoveOrderer {
 
-    private final Engine engine;
-    private final HistoryMoves historyMoves;
-
-    public MoveOrderer(Engine engine){
-        this.engine = engine;
-        this.historyMoves = new HistoryMoves(this);
-    }
-
     /*
     Move Ordering:
     previous Hash Moves, promotions, capture of last moved piece, good captures, killers, killers from earlier plies, 
     castling, bad captures, quiet moves, bad promotions
      */
-    public List<Move> orderedMoves(Chessboard board, boolean white, int ply, Move hashMove, Move aiMove){
+    public static MoveScore[] orderedMoves(Chessboard board, boolean white, int ply, int hashMove, int aiMove){
         return extractMoves(board, white,
-                generateLegalMoves(board, board.isWhiteTurn()),
+                board.generateLegalMoves(),
                 ply, hashMove, aiMove);
     }
 
-    private List<Move> extractMoves(Chessboard board, boolean white, List<Move> moves, int ply,
-                                    Move hashMove, Move aiMove){
-        List<MoveScore> moveScores = orderedMoveScores(board, white, moves, ply, hashMove, aiMove);
-        return moveScores.stream().map(moveScore -> moveScore.move).collect(Collectors.toList());
+    private static MoveScore[] extractMoves(Chessboard board, boolean white, int[] moves, int ply,
+                                         int hashMove, int aiMove){
+        return orderedMoveScores(board, white, moves, ply, hashMove, aiMove);
     }
 
-    private List<MoveScore> orderedMoveScores(Chessboard board, boolean white, List<Move> moves, int ply,
-                                              Move hashMove, Move aiMove){
-        List<MoveScore> moveScores = scoreMoves(board, white, moves, ply, hashMove, aiMove);
-        moveScores.sort(Comparator.comparingInt(MoveScore::getScore).reversed());
+    private static MoveScore[] orderedMoveScores(Chessboard board, boolean white, int[] moves, int ply,
+                                              int hashMove, int aiMove){
+        MoveScore[] moveScores = new MoveScore[0];
+        try {
+            moveScores = scoreMoves(board, white, moves, ply, hashMove, aiMove);
+        } catch (IllegalUnmakeException e) {
+            e.printStackTrace();
+        }
+//        moveScores.sort(Comparator.comparingInt(MoveScore::getScore).reversed());
         return moveScores;
     }
 
-    private List<MoveScore> scoreMoves(Chessboard board, boolean white, List<Move> moves, int ply,
-                                       Move hashMove, Move aiMove){
-        List<MoveScore> unsortedScoredMoves = new ArrayList<>();
+    private static MoveScore[] scoreMoves(Chessboard board, boolean white, int[] moves, int ply,
+                                       int hashMove, int aiMove) throws IllegalUnmakeException {
+        MoveScore[] unsortedScoredMoves = new MoveScore[MoveParser.numberOfRealMoves(moves)];
         /*
         captures range from +92 to +108. +100 indicates an equal capture (Bxb, Pxp...)
          */
-        for (Move move : moves){
+        for (int i = 0; i < moves.length; i++) {
+            int move = moves[i];
+            if (move == 0){
+                break;
+            }
             MoveScore moveScore;
-            if (move.equals(hashMove)){
+            if (move == hashMove) {
                 moveScore = new MoveScore(move, hashScore);
-            }
-            else if (ply == 0 && move.equals(aiMove)){
+            } else if (ply == 0 && move == aiMove) {
                 moveScore = new MoveScore(move, aiScore);
-            }
-            else if (this.engine.getEngineSpecifications().ALLOW_MATE_KILLERS && mateKiller[ply] != null && move.equals(mateKiller[ply])){
+            } else if (Engine.getEngineSpecifications().ALLOW_MATE_KILLERS && mateKiller[ply] != 0 && move == (mateKiller[ply])) {
                 moveScore = new MoveScore(move, mateKillerScore);
-            }
-            else if (moveIsCaptureOfLastMovePiece(board, move)){
+            } else if (board.moveIsCaptureOfLastMovePiece(move)) {
                 moveScore = new MoveScore(move, CAPTURE_BIAS_LAST_MOVED_PIECE + mvvLVA(board, move));
-            }
-            else if (isPromotionToQueen(move)) {
+            } else if (isPromotionToQueen(move)) {
                 moveScore = new MoveScore(move, queenPromotionScore);
-            }
-            else if (isPromotionToKnight(move)){
+            } else if (isPromotionToKnight(move)) {
                 moveScore = new MoveScore(move, knightPromotionScore);
-            }
-            else if (isPromotionToBishop(move) || isPromotionToRook(move)){
+            } else if (isPromotionToBishop(move) || isPromotionToRook(move)) {
 //                 promotions to rook and bishop are considered right at the end
                 moveScore = new MoveScore(move, uninterestingPromotion);
-            }
-            
-            else if (this.engine.getEngineSpecifications().ALLOW_KILLERS && killerMoves[ply][0] != null && killerMoves[ply][0].equals(move)){
+            } else if (Engine.getEngineSpecifications().ALLOW_KILLERS && killerMoves[ply][0] != 0 && killerMoves[ply][0] == move) {
                 moveScore = new MoveScore(move, killerOneScore);
-            }
-            else if (this.engine.getEngineSpecifications().ALLOW_KILLERS && killerMoves[ply][1] != null && killerMoves[ply][1].equals(move)){
+            } else if (Engine.getEngineSpecifications().ALLOW_KILLERS && killerMoves[ply][1] != 0 && killerMoves[ply][1] == move) {
                 moveScore = new MoveScore(move, killerTwoScore);
-            }
-            else if (this.engine.getEngineSpecifications().ALLOW_KILLERS && ply >= 2 && killerMoves.length > 2
-                    && killerMoves[ply - 2][0] != null && killerMoves[ply - 2][0].equals(move)){
+            } else if (Engine.getEngineSpecifications().ALLOW_KILLERS && ply >= 2 && killerMoves.length > 2
+                    && killerMoves[ply - 2][0] != 0 && killerMoves[ply - 2][0] == move) {
                 moveScore = new MoveScore(move, oldKillerScoreOne);
-            }
-            else if (this.engine.getEngineSpecifications().ALLOW_KILLERS && ply >= 2 && killerMoves.length > 2
-                    && killerMoves[ply - 2][1] != null && killerMoves[ply - 2][1].equals(move)){
+            } else if (Engine.getEngineSpecifications().ALLOW_KILLERS && ply >= 2 && killerMoves.length > 2
+                    && killerMoves[ply - 2][1] != 0 && killerMoves[ply - 2][1] == (move)) {
                 moveScore = new MoveScore(move, oldKillerScoreTwo);
-            }
-            else if (checkingMove(board, move)){
+            } else if (checkingMove(board, move)) {
                 moveScore = new MoveScore(move, giveCheckMove);
-            }
-            else if (moveIsCapture(board, move)){
+            } else if (moveIsCapture(board, move)) {
                 moveScore = new MoveScore(move, mvvLVA(board, move));
-            }
-            else if (MoveParser.isCastlingMove(move)){
+            } else if (MoveParser.isCastlingMove(move)) {
                 moveScore = new MoveScore(move, castlingMove);
-            }
-            else if (this.engine.getEngineSpecifications().ALLOW_HISTORY_MOVES){
-                moveScore = new MoveScore(move, this.historyMoves.historyMoveScore(move));
-            }
-            else {
+            } else if (Engine.getEngineSpecifications().ALLOW_HISTORY_MOVES) {
+                moveScore = new MoveScore(move, HistoryMoves.historyMoveScore(move));
+            } else {
                 moveScore = new MoveScore(move, uninterestingMove);
             }
 
-            unsortedScoredMoves.add(moveScore);
+            unsortedScoredMoves[i] = moveScore;
         }
 
         return unsortedScoredMoves;
     }
 
-    private boolean moveIsCaptureOfLastMovePiece(Chessboard board, Move move){
-        if (board.moveStack.size() == 0){
-            return false;
-        }
-        if (board.moveStack.peek().move == null){
-            return false;
-        }
-        int previousMoveDestinationIndex = board.moveStack.peek().move.destinationIndex;
-        return (move.destinationIndex == previousMoveDestinationIndex);
-    }
 
-    private int mvvLVA (Chessboard board, Move move){
-        int sourceScore = scoreByPiece(board, move, newPieceOnSquare(move.getSourceAsPieceIndex()));
-        int destinationScore = scoreByPiece(board, move, newPieceOnSquare(move.destinationIndex));
+    private static int mvvLVA (Chessboard board, int move){
+        int sourceScore = scoreByPiece(board, move, newPieceOnSquare(MoveParser.getSourceIndex(move)));
+        int destinationScore = scoreByPiece(board, move, newPieceOnSquare(MoveParser.getDestinationIndex(move)));
         return CAPTURE_BIAS + destinationScore - sourceScore;
     }
 
-    private int scoreByPiece(Chessboard board, Move move, long piece){
-        if (((piece & board.WHITE_PAWNS) != 0) || ((piece & board.BLACK_PAWNS) != 0)){
+    private static int scoreByPiece(Chessboard board, int move, long piece){
+        if (((piece & board.getWhitePawns()) != 0) || ((piece & board.getBlackPawns()) != 0)){
             return 1;
         }
-        else if (((piece & board.WHITE_KNIGHTS) != 0) || ((piece & board.BLACK_KNIGHTS) != 0)){
+        else if (((piece & board.getWhiteKnights()) != 0) || ((piece & board.getBlackKnights()) != 0)){
             return 3;
         }
-        else if (((piece & board.WHITE_BISHOPS) != 0) || ((piece & board.BLACK_BISHOPS) != 0)){
+        else if (((piece & board.getWhiteBishops()) != 0) || ((piece & board.getBlackBishops()) != 0)){
             return 4;
         }
-        else if (((piece & board.WHITE_ROOKS) != 0) || ((piece & board.BLACK_ROOKS) != 0)){
+        else if (((piece & board.getWhiteRooks()) != 0) || ((piece & board.getBlackRooks()) != 0)){
             return 5;
         }
-        else if (((piece & board.WHITE_QUEEN) != 0) || ((piece & board.BLACK_QUEEN) != 0)){
+        else if (((piece & board.getWhiteQueen()) != 0) || ((piece & board.getBlackQueen()) != 0)){
             return 9;
         }
-        else if (((piece & board.WHITE_KING) != 0) || ((piece & board.BLACK_KING) != 0)){
+        else if (((piece & board.getWhiteKing()) != 0) || ((piece & board.getBlackKing()) != 0)){
             return 10;
         }
         else {
@@ -169,114 +133,107 @@
     Quiescence Search ordering:
     order moves by most valuable victim and least valuable aggressor
      */
-    public List<Move> orderMovesQuiescence(Chessboard board, boolean white, List<Move> allMoves){
+    public static MoveScore[] orderMovesQuiescence(Chessboard board, boolean white, int[] allMoves){
         return extractMovesQuiescence(board, white, allMoves);
     }
 
-    private List<Move> extractMovesQuiescence(Chessboard board, boolean white, List<Move> moves){
-        List<MoveScore> moveScores = orderedMoveScoresQuiescence(board, white, moves);
-        return moveScores.stream().map(moveScore -> moveScore.move).collect(Collectors.toList());
+    private static MoveScore[] extractMovesQuiescence(Chessboard board, boolean white, int[] moves){
+        return orderedMoveScoresQuiescence(board, white, moves);
     }
 
-    private List<MoveScore> orderedMoveScoresQuiescence(Chessboard board, boolean white, List<Move> moves){
-        List<MoveScore> moveScores = scoreMovesQuiescence(board, white, moves);
-        moveScores.sort(Comparator.comparingInt(MoveScore::getScore).reversed());
+    private static MoveScore[] orderedMoveScoresQuiescence(Chessboard board, boolean white, int[] moves){
+        MoveScore[] moveScores = scoreMovesQuiescence(board, white, moves);
+//        moveScores.sort(Comparator.comparingInt(MoveScore::getScore).reversed());
         return moveScores;
     }
 
-    private List<MoveScore> scoreMovesQuiescence(Chessboard board, boolean white, List<Move> moves){
-        List<MoveScore> unsortedScoredMoves = new ArrayList<>();
-        for (Move move : moves){
-            if (moveIsCapture(board, move)){
+    private static MoveScore[] scoreMovesQuiescence(Chessboard board, boolean white, int[] moves){
+        MoveScore[] unsortedScoredMoves = new MoveScore[MoveParser.numberOfRealMoves(moves)];
+        for (int i = 0; i < unsortedScoredMoves.length; i++) {
+            int move = moves[i];
+            if (moveIsCapture(board, move)) {
                 if (isPromotionMove(move)) {
                     /*
                     ignore under promotions in Q search
                      */
                     if (isPromotionToQueen(move)) {
-                        unsortedScoredMoves.add(new MoveScore(move, queenPromotionScore + 1));
+                        unsortedScoredMoves[i] = new MoveScore(move, queenPromotionScore + 1);
                     }
+                } else if (board.moveIsCaptureOfLastMovePiece(move)) {
+                    unsortedScoredMoves[i] = new MoveScore(move, CAPTURE_BIAS_LAST_MOVED_PIECE + mvvLVA(board, move));
+                } else {
+                    unsortedScoredMoves[i] = new MoveScore(move, mvvLVA(board, move));
                 }
-                else if (moveIsCaptureOfLastMovePiece(board, move)){
-                    unsortedScoredMoves.add(new MoveScore(move, CAPTURE_BIAS_LAST_MOVED_PIECE + mvvLVA(board, move)));
-                }
-                else {
-                    unsortedScoredMoves.add(new MoveScore(move, mvvLVA(board, move)));
-                }
-            }
-
-            else if (isPromotionMove(move)) {
+            } else if (isPromotionMove(move)) {
                 if (isPromotionToQueen(move)) {
-                    unsortedScoredMoves.add(new MoveScore(move, queenPromotionScore));
+                    unsortedScoredMoves[i] = new MoveScore(move, queenPromotionScore);
                 }
             }
         }
         return unsortedScoredMoves;
     }
 
-    public boolean moveIsCapture(Chessboard board, Move move){
-        long ENEMY_PIECES = board.isWhiteTurn() ? board.ALL_BLACK_PIECES() : board.ALL_WHITE_PIECES();
-        long destinationSquare = newPieceOnSquare(move.destinationIndex);
+    public static boolean moveIsCapture(Chessboard board, int move){
+        long ENEMY_PIECES = board.isWhiteTurn() ? board.blackPieces() : board.whitePieces();
+        long destinationSquare = newPieceOnSquare(MoveParser.getDestinationIndex(move));
         return (destinationSquare & ENEMY_PIECES) != 0;
     }
 
-    public boolean checkingMove(Chessboard board, Move move){
-        Assert.assertTrue(generateLegalMoves(board, board.isWhiteTurn()).contains(move));
-
-        MoveOrganiser.makeMoveMaster(board, move);
-        MoveOrganiser.flipTurn(board);
-        boolean checkingMove = CheckChecker.boardInCheck(board, board.isWhiteTurn());
-        MoveUnmaker.unMakeMoveMaster(board);
+    public static boolean checkingMove(Chessboard board, int move) throws IllegalUnmakeException {
+        board.makeMoveAndFlipTurn(move);
+        boolean checkingMove = board.inCheck(board.isWhiteTurn());
+        board.unMakeMoveAndFlipTurn(move);
         return checkingMove;
     }
 
-    public boolean moveWillBePawnPushSix(Chessboard board, Move move){
-        long myPawns = board.isWhiteTurn() ? board.WHITE_PAWNS : board.BLACK_PAWNS;
+    public static boolean moveWillBePawnPushSix(Chessboard board, int move){
+        long myPawns = board.isWhiteTurn() ? board.getWhitePawns() : board.getBlackPawns();
 
         if (board.isWhiteTurn()){
-            if ((newPieceOnSquare(move.getSourceAsPieceIndex()) & myPawns) != 0){
+            if ((newPieceOnSquare(MoveParser.getSourceIndex(move)) & myPawns) != 0){
                 return false;
             }
-            return (newPieceOnSquare(move.destinationIndex) & BitBoards.RANK_SIX) != 0;
+            return (MoveParser.getDestinationIndex(move) & BitboardResources.RANK_SIX) != 0;
         }
         else {
-            if ((newPieceOnSquare(move.getSourceAsPieceIndex()) & myPawns) != 0){
+            if ((newPieceOnSquare(MoveParser.getSourceIndex(move)) & myPawns) != 0){
                 return false;
             }
-            return (newPieceOnSquare(move.destinationIndex) & BitBoards.RANK_THREE) != 0;
+            return (newPieceOnSquare(MoveParser.getDestinationIndex(move)) & BitboardResources.RANK_THREE) != 0;
         }
     }
 
-    public boolean moveWillBePawnPushSeven(Chessboard board, Move move){
-        long myPawns = board.isWhiteTurn() ? board.WHITE_PAWNS : board.BLACK_PAWNS;
+    public static boolean moveWillBePawnPushSeven(Chessboard board, int move){
+        long myPawns = board.isWhiteTurn() ? board.getWhitePawns() : board.getBlackPawns();
 
         if (board.isWhiteTurn()){
-            if ((newPieceOnSquare(move.getSourceAsPieceIndex()) & myPawns) != 0){
+            if ((newPieceOnSquare(MoveParser.getSourceIndex(move)) & myPawns) != 0){
                 return false;
             }
-            return (newPieceOnSquare(move.destinationIndex) & BitBoards.RANK_SEVEN) != 0;
+            return (newPieceOnSquare(MoveParser.getDestinationIndex(move)) & BitboardResources.RANK_SEVEN) != 0;
         }
         else {
-            if ((newPieceOnSquare(move.getSourceAsPieceIndex()) & myPawns) != 0){
+            if ((newPieceOnSquare(MoveParser.getSourceIndex(move)) & myPawns) != 0){
                 return false;
             }
-            return (newPieceOnSquare(move.destinationIndex) & BitBoards.RANK_TWO) != 0;
+            return (newPieceOnSquare(MoveParser.getDestinationIndex(move)) & BitboardResources.RANK_TWO) != 0;
         }
     }
 
-    public void updateHistoryMoves(Move move, int ply){
-        this.historyMoves.updateHistoryMoves(move, ply);
+    public static void updateHistoryMoves(int move, int ply){
+        HistoryMoves.updateHistoryMoves(move, ply);
     }
 
-    private class MoveScore {
-        private final Move move;
+    public static class MoveScore {
+        private final int move;
         private final int score;
 
-        MoveScore(Move move, int score) {
+        MoveScore(int move, int score) {
             this.move = move;
             this.score = score;
         }
 
-        public Move getMove() {
+        public int getMove() {
             return move;
         }
 
@@ -292,4 +249,13 @@
                     '}';
         }
     }
+
+    public static int numberOfRealMoves(int[] moves){
+        int index = 0;
+        while (moves[index] != 0){
+            index++;
+        }
+
+        return index;
+    }
 }
Index: src/main/java/javacode/chessengine/timemanagement/TimeAllocator.java
===================================================================
--- src/main/java/javacode/chessengine/timemanagement/TimeAllocator.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/com/github/louism33/axolotl/timemanagement/TimeAllocator.java	(date 1543832166000)
@@ -1,11 +1,11 @@
-package javacode.chessengine.timemanagement;
+package com.github.louism33.axolotl.timemanagement;
 
-import javacode.chessengine.search.Engine;
-import javacode.chessprogram.chess.Chessboard;
+import com.github.louism33.axolotl.search.Engine;
+import com.github.louism33.chesscore.Chessboard;
 
 public class TimeAllocator {
     
-    public long allocateTime(Chessboard board, long maxTime){
+    public static long allocateTime(Chessboard board, long maxTime){
         return maxTime / 25;
     }
 
@@ -13,10 +13,10 @@
         return timeLeft > maxTime / 2;
     }
     
-    public static boolean outOfTime(Engine engine, long startTime, long timeLimitMillis){
+    public static boolean outOfTime(long startTime, long timeLimitMillis){
         boolean outOfTime = false;
         
-        if (!engine.getEngineSpecifications().ALLOW_TIME_LIMIT){
+        if (!Engine.getEngineSpecifications().ALLOW_TIME_LIMIT){
             return false;
         }
         
Index: src/main/java/javacode/chessengine/search/QuiescenceSearch.java
===================================================================
--- src/main/java/javacode/chessengine/search/QuiescenceSearch.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/com/github/louism33/axolotl/search/QuiescenceSearch.java	(date 1543860905000)
@@ -1,45 +1,30 @@
-package javacode.chessengine.search;
+package com.github.louism33.axolotl.search;
 
-import javacode.chessengine.evaluation.Evaluator;
-import javacode.chessengine.moveordering.MoveOrderer;
-import javacode.chessprogram.chess.Chessboard;
-import javacode.chessprogram.chess.Move;
-import javacode.chessprogram.moveMaking.MoveOrganiser;
-import javacode.chessprogram.moveMaking.MoveParser;
-import javacode.chessprogram.moveMaking.MoveUnmaker;
+import com.github.louism33.axolotl.evaluation.Evaluator;
+import com.github.louism33.axolotl.moveordering.MoveOrderer;
+import com.github.louism33.chesscore.Chessboard;
+import com.github.louism33.chesscore.IllegalUnmakeException;
+import com.github.louism33.chesscore.MoveParser;
 import org.junit.Assert;
 
-import java.util.List;
-
-import static javacode.chessengine.evaluation.EvaluationConstants.CHECKMATE_ENEMY_SCORE_MAX_PLY;
-import static javacode.chessengine.search.FutilityPruning.quiescenceFutilityMargin;
-import static javacode.chessengine.search.SEEPruning.seeScore;
-import static javacode.chessprogram.moveGeneration.MoveGeneratorMaster.generateLegalMoves;
+import static com.github.louism33.axolotl.evaluation.EvaluationConstants.CHECKMATE_ENEMY_SCORE_MAX_PLY;
+import static com.github.louism33.axolotl.search.FutilityPruning.quiescenceFutilityMargin;
+import static com.github.louism33.axolotl.search.SEEPruning.seeScore;
 
 class QuiescenceSearch {
-    private final Engine engine;
-    private final MoveOrderer moveOrderer;
-    private final QuiescentSearchUtils quiescentSearchUtils;
-    private final Evaluator evaluator;
 
-    QuiescenceSearch(Engine engine, MoveOrderer moveOrderer, Evaluator evaluator){
-        this.engine = engine;
-        this.moveOrderer = moveOrderer;
-        this.evaluator = evaluator;
-        this.quiescentSearchUtils = new QuiescentSearchUtils(moveOrderer);
-    }
     /*
     Quiescence Search: 
     special search for captures only
      */
-    int quiescenceSearch(Chessboard board, int alpha, int beta){
+    static int quiescenceSearch(Chessboard board, int alpha, int beta) throws IllegalUnmakeException {
 
-        List<Move> moves = generateLegalMoves(board, board.isWhiteTurn());
+        int[] moves = board.generateLegalMoves();
 
         /*
         the score we get from not making captures anymore
          */
-        int standPatScore = this.evaluator.evalWithoutCM(board, board.isWhiteTurn(), moves);
+        int standPatScore = Evaluator.evalWithoutCM(board, board.isWhiteTurn(), moves);
 
         Assert.assertFalse(standPatScore > CHECKMATE_ENEMY_SCORE_MAX_PLY);
 
@@ -54,17 +39,25 @@
         /*
         no more captures to make or no more moves at all
          */
-        if (this.quiescentSearchUtils.isBoardQuiet(board, moves) || moves.size() == 0){
-            this.engine.statistics.numberOfQuiescentEvals++;
+        if (QuiescentSearchUtils.isBoardQuiet(board, moves) || moves.length == 0){
+            Engine.statistics.numberOfQuiescentEvals++;
             return standPatScore;
         }
 
-        List<Move> orderedCaptureMoves = this.moveOrderer
+        MoveOrderer.MoveScore[] orderedCaptureMoves = MoveOrderer
                 .orderMovesQuiescence(board, board.isWhiteTurn(), moves);
 
         int numberOfMovesSearched = 0;
-        for (Move loudMove : orderedCaptureMoves){
-            boolean captureMove = this.moveOrderer.moveIsCapture(board, loudMove);
+        for (int i = 0; i < orderedCaptureMoves.length; i++) {
+            final MoveOrderer.MoveScore moveScore = orderedCaptureMoves[i];
+            
+            if (moveScore == null){
+                break;
+            }
+            
+            int loudMove = moveScore.getMove();
+            
+            boolean captureMove = MoveOrderer.moveIsCapture(board, loudMove);
             boolean promotionMove = MoveParser.isPromotionMove(loudMove);
 
             Assert.assertTrue(captureMove || promotionMove);
@@ -73,43 +66,41 @@
             Quiescence Futility Pruning:
             if this is a particularly low scoring situation skip this move
              */
-            if (this.engine.getEngineSpecifications().ALLOW_QUIESCENCE_FUTILITY_PRUNING){
+            if (Engine.getEngineSpecifications().ALLOW_QUIESCENCE_FUTILITY_PRUNING) {
                 if (captureMove
                         && quiescenceFutilityMargin
                         + standPatScore
-                        + this.evaluator.getScoreOfDestinationPiece(board, loudMove)
-                        < alpha){
-                    this.engine.statistics.numberOfSuccessfulQuiescenceFutilities++;
+                        + Evaluator.getScoreOfDestinationPiece(board, loudMove)
+                        < alpha) {
+                    Engine.statistics.numberOfSuccessfulQuiescenceFutilities++;
                     continue;
-                }
-                else {
-                    this.engine.statistics.numberOfFailedQuiescenceFutilities++;
+                } else {
+                    Engine.statistics.numberOfFailedQuiescenceFutilities++;
                 }
             }
 
-            if (captureMove && this.engine.getEngineSpecifications().ALLOW_QUIESCENCE_SEE_PRUNING){
-                int seeScore = seeScore(board, loudMove, evaluator);
+            if (captureMove && Engine.getEngineSpecifications().ALLOW_QUIESCENCE_SEE_PRUNING) {
+                int seeScore = seeScore(board, loudMove);
                 if (seeScore <= -300) {
-                    this.engine.statistics.numberOfSuccessfulQuiescentSEEs++;
+                    Engine.statistics.numberOfSuccessfulQuiescentSEEs++;
                     continue;
                 }
             }
 
-            MoveOrganiser.makeMoveMaster(board, loudMove);
-            MoveOrganiser.flipTurn(board);
+            board.makeMoveAndFlipTurn(loudMove);
             numberOfMovesSearched++;
-            this.engine.statistics.numberOfQuiescentMovesMade++;
+            Engine.statistics.numberOfQuiescentMovesMade++;
 
             int score = -quiescenceSearch(board, -beta, -alpha);
 
-            MoveUnmaker.unMakeMoveMaster(board);
+            board.unMakeMoveAndFlipTurn(loudMove);
 
-            if (score >= beta){
-                this.engine.statistics.whichMoveWasTheBestQuiescence[numberOfMovesSearched-1]++;
+            if (score >= beta) {
+                Engine.statistics.whichMoveWasTheBestQuiescence[numberOfMovesSearched - 1]++;
                 return score;
             }
 
-            if (score > alpha){
+            if (score > alpha) {
                 alpha = score;
             }
         }
Index: src/main/java/javacode/chessengine/moveordering/HistoryMoves.java
===================================================================
--- src/main/java/javacode/chessengine/moveordering/HistoryMoves.java	(revision 7c88a32f43de88bcc1b0f9176d2d0645b252daee)
+++ src/main/java/com/github/louism33/axolotl/moveordering/HistoryMoves.java	(date 1543832023000)
@@ -1,31 +1,25 @@
-package javacode.chessengine.moveordering;
+package com.github.louism33.axolotl.moveordering;
 
-import javacode.chessprogram.chess.Move;
+import com.github.louism33.chesscore.MoveParser;
 
 class HistoryMoves {
     
-    private final MoveOrderer moveOrderer;
-
-    public HistoryMoves(MoveOrderer moveOrderer) {
-        this.moveOrderer = moveOrderer;
-    }
-
     /*
     History Moves:
     one int for every from-square to-square combination. Incremented every time this move is found to produce cutoffs
      */
-    private final int[][] historyMoves = new int[64][64];
+    private static final int[][] historyMoves = new int[64][64];
     
     /*
     square the ply as shallower moves get added many times
      */
-    public void updateHistoryMoves(Move move, int ply){
-        historyMoves[move.getSourceAsPieceIndex()][move.destinationIndex] += (ply * ply);
+    public static void updateHistoryMoves(int move, int ply){
+        historyMoves[MoveParser.getSourceIndex(move)][MoveParser.getDestinationIndex(move)] += (ply * ply);
     }
 
-    public int historyMoveScore(Move move){
+    public static int historyMoveScore(int move){
         int maxMoveScoreOfHistory = MoveOrderingConstants.MAX_HISTORY_MOVE_SCORE;
-        int historyScore = historyMoves[move.getSourceAsPieceIndex()][move.destinationIndex];
+        int historyScore = historyMoves[MoveParser.getSourceIndex(move)][MoveParser.getDestinationIndex(move)];
         return historyScore > maxMoveScoreOfHistory ? maxMoveScoreOfHistory : historyScore;
     }
 }
